{"version":3,"file":"static/js/317.f6468582.chunk.js","mappings":"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","sources":["../../core/src/assets/AssetLink.tsx","../../core/src/instance/BackfillPartitionsRequestedDialog.tsx","../../core/src/instance/BackfillStepStatusDialog.tsx","../../core/src/instance/BackfillTerminationDialog.tsx","../../core/src/instance/BackfillTable.tsx","../../core/src/instance/LastRunSummary.tsx","../../core/src/instance/StepSummaryForRun.tsx","../../core/src/instigation/InstigationTick.tsx","../../core/src/instigation/InstigationUtils.tsx","../../core/src/instigation/Unloadable.tsx","../../core/src/nav/RepositoryLink.tsx","../../core/src/nav/ScheduleOrSensorTag.tsx","../../core/src/partitions/PartitionRunList.tsx","../../core/src/partitions/PartitionStepStatus.tsx","../../core/src/partitions/useMatrixData.tsx","../../core/src/partitions/usePartitionStepQuery.tsx","../../core/src/runs/RepoSectionHeader.tsx","../../core/src/runs/RunStatusPez.tsx","../../core/src/runs/useCursorPaginatedQuery.tsx","../../core/src/runs/useJobReExecution.tsx","../../core/src/schedules/SchedulePartitionStatus.tsx","../../core/src/schedules/SchedulerInfo.tsx","../../core/src/schedules/SchedulesTable.tsx","../../core/src/sensors/EditCursorDialog.tsx","../../core/src/sensors/SensorDetails.tsx","../../core/src/sensors/SensorInfo.tsx","../../core/src/ui/VirtualizedTable.tsx","../../core/src/instance/JobMenu.tsx","../../core/src/workspace/VirtualizedJobRow.tsx","../../core/src/workspace/VirtualizedScheduleRow.tsx","../../core/src/workspace/VirtualizedSensorRow.tsx","../../core/src/workspace/VirtualizedWorkspaceTable.tsx"],"sourcesContent":["import {Box, Colors, Icon, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\nexport const AssetLink: React.FC<{\n  path: string[];\n  icon?: 'asset' | 'asset_non_sda' | 'folder';\n  textStyle?: 'break-word' | 'middle-truncate';\n  url?: string;\n  isGroup?: boolean;\n}> = (props) => {\n  const {path, icon, url, isGroup, textStyle = 'break-word'} = props;\n  const linkUrl = url ? url : assetDetailsPathForKey({path});\n  const assetPath =\n    path\n      .reduce((accum, elem, ii) => [...accum, ii > 0 ? ' / ' : '', elem], [] as string[])\n      .join('') + (isGroup ? '/' : '');\n\n  return (\n    <Box\n      flex={{direction: 'row', alignItems: 'flex-start', display: 'inline-flex'}}\n      style={{maxWidth: '100%'}}\n    >\n      {icon ? (\n        <Box margin={{right: 8, top: 2}}>\n          <Icon name={icon} color={Colors.Gray400} />\n        </Box>\n      ) : null}\n      <Link to={linkUrl} style={{overflow: 'hidden'}}>\n        {textStyle === 'break-word' ? (\n          <span style={{wordBreak: 'break-word'}}>{assetPath}</span>\n        ) : (\n          <MiddleTruncate text={assetPath} />\n        )}\n      </Link>\n    </Box>\n  );\n};\n","import {Button, DialogBody, DialogFooter, Dialog, FontFamily, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {BackfillTableFragment} from './types/BackfillTableFragment';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\nexport const BackfillPartitionsRequestedDialog = ({backfill, onClose}: Props) => {\n  return (\n    <Dialog\n      isOpen={!!backfill}\n      title={\n        <span>\n          Partitions requested for backfill:{' '}\n          <span style={{fontSize: '18px', fontFamily: FontFamily.monospace}}>\n            {backfill?.backfillId}\n          </span>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogBody>\n        {backfill ? (\n          <Box flex={{direction: 'column', gap: 8}} style={{maxHeight: '80vh', overflowY: 'auto'}}>\n            {backfill.partitionNames.map((partitionName: string) => (\n              <div key={partitionName}>{partitionName}</div>\n            ))}\n          </Box>\n        ) : null}\n      </DialogBody>\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, DialogFooter, Dialog} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PartitionPerOpStatus} from '../partitions/PartitionStepStatus';\nimport {usePartitionStepQuery} from '../partitions/usePartitionStepQuery';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  BackfillTableFragment,\n  BackfillTableFragment_partitionSet,\n} from './types/BackfillTableFragment';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\n\nexport const BackfillStepStatusDialog = ({backfill, onClose}: Props) => {\n  const content = () => {\n    if (!backfill?.partitionSet) {\n      return null;\n    }\n\n    const repoAddress = buildRepoAddress(\n      backfill.partitionSet.repositoryOrigin.repositoryName,\n      backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n    );\n\n    return (\n      <BackfillStepStatusDialogContent\n        backfill={backfill}\n        partitionSet={backfill.partitionSet}\n        repoAddress={repoAddress}\n        onClose={onClose}\n      />\n    );\n  };\n\n  return (\n    <Dialog\n      isOpen={!!backfill?.partitionSet}\n      title={`Step status for backfill: ${backfill?.backfillId}`}\n      onClose={onClose}\n      style={{width: '80vw'}}\n    >\n      {content()}\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface ContentProps {\n  backfill: BackfillTableFragment;\n  partitionSet: BackfillTableFragment_partitionSet;\n  repoAddress: RepoAddress;\n  onClose: () => void;\n}\n\nexport const BackfillStepStatusDialogContent = ({\n  backfill,\n  partitionSet,\n  repoAddress,\n}: ContentProps) => {\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n\n  const runsFilter = React.useMemo(() => {\n    const token: RunFilterToken = {token: 'tag', value: `dagster/backfill=${backfill.backfillId}`};\n    return [token];\n  }, [backfill.backfillId]);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames: backfill.partitionNames,\n    pageSize,\n    runsFilter,\n    repositorySelector: repoAddressToSelector(repoAddress),\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !backfill,\n  });\n\n  return (\n    <PartitionPerOpStatus\n      partitionNames={backfill.partitionNames}\n      partitions={partitions}\n      pipelineName={partitionSet?.pipelineName}\n      repoAddress={repoAddress}\n      setPageSize={setPageSize}\n      offset={offset}\n      setOffset={setOffset}\n    />\n  );\n};\n","import {gql, useMutation} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {cancelableStatuses} from '../runs/RunStatuses';\nimport {TerminationDialog} from '../runs/TerminationDialog';\nimport {BulkActionStatus} from '../types/globalTypes';\n\nimport {BackfillTableFragment} from './types/BackfillTableFragment';\nimport {CancelBackfill, CancelBackfillVariables} from './types/CancelBackfill';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n  onComplete: () => void;\n}\nexport const BackfillTerminationDialog = ({backfill, onClose, onComplete}: Props) => {\n  const [cancelBackfill] = useMutation<CancelBackfill, CancelBackfillVariables>(\n    CANCEL_BACKFILL_MUTATION,\n  );\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const unfinishedMap = React.useMemo(() => {\n    if (!backfill) {\n      return {};\n    }\n    const unfinishedPartitions = backfill.partitionStatuses.results.filter(\n      (partition) =>\n        partition.runStatus && partition.runId && cancelableStatuses.has(partition.runStatus),\n    );\n    return (\n      unfinishedPartitions.reduce(\n        (accum, partition) =>\n          partition && partition.runId ? {...accum, [partition.runId]: true} : accum,\n        {},\n      ) || {}\n    );\n  }, [backfill]);\n  if (!backfill) {\n    return null;\n  }\n\n  const numUnscheduled = (backfill.numPartitions || 0) - (backfill.numRequested || 0);\n  const cancel = async () => {\n    setIsSubmitting(true);\n    await cancelBackfill({variables: {backfillId: backfill.backfillId}});\n    onComplete();\n    setIsSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={!!backfill && backfill.status !== BulkActionStatus.CANCELED && !!numUnscheduled}\n        title=\"Cancel backfill\"\n        onClose={onClose}\n      >\n        <DialogBody>\n          There {numUnscheduled === 1 ? 'is 1 partition ' : `are ${numUnscheduled} partitions `}\n          yet to be queued or launched.\n        </DialogBody>\n        <DialogFooter>\n          <Button intent=\"none\" onClick={onClose}>\n            Close\n          </Button>\n          {isSubmitting ? (\n            <Button intent=\"danger\" disabled>\n              Canceling...\n            </Button>\n          ) : (\n            <Button intent=\"danger\" onClick={cancel}>\n              Cancel backfill\n            </Button>\n          )}\n        </DialogFooter>\n      </Dialog>\n      <TerminationDialog\n        isOpen={\n          !!backfill &&\n          (!numUnscheduled || backfill.status !== 'REQUESTED') &&\n          !!Object.keys(unfinishedMap).length\n        }\n        onClose={onClose}\n        onComplete={onComplete}\n        selectedRuns={unfinishedMap}\n      />\n    </>\n  );\n};\n\nconst CANCEL_BACKFILL_MUTATION = gql`\n  mutation CancelBackfill($backfillId: String!) {\n    cancelPartitionBackfill(backfillId: $backfillId) {\n      __typename\n      ... on CancelBackfillSuccess {\n        backfillId\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Group,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n  Table,\n  Tag,\n  Mono,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory, Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {usePermissions} from '../app/Permissions';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {\n  PartitionState,\n  PartitionStatus,\n  runStatusToPartitionState,\n} from '../partitions/PartitionStatus';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {AssetKeyTagCollection} from '../runs/AssetKeyTagCollection';\nimport {inProgressStatuses} from '../runs/RunStatuses';\nimport {runsPathWithFilters} from '../runs/RunsFilterInput';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {BulkActionStatus, RunStatus} from '../types/globalTypes';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {workspacePathFromAddress, workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {BackfillPartitionsRequestedDialog} from './BackfillPartitionsRequestedDialog';\nimport {BackfillStepStatusDialog} from './BackfillStepStatusDialog';\nimport {BackfillTerminationDialog} from './BackfillTerminationDialog';\nimport {RESUME_BACKFILL_MUTATION} from './BackfillUtils';\nimport {BackfillTableFragment} from './types/BackfillTableFragment';\nimport {resumeBackfill, resumeBackfillVariables} from './types/resumeBackfill';\n\nexport const BackfillTable = ({\n  showBackfillTarget = true,\n  allPartitions,\n  backfills,\n  refetch,\n}: {\n  allPartitions?: string[];\n  backfills: BackfillTableFragment[];\n  refetch: () => void;\n  showBackfillTarget?: boolean;\n}) => {\n  const [terminationBackfill, setTerminationBackfill] = React.useState<BackfillTableFragment>();\n  const [stepStatusBackfill, setStepStatusBackfill] = React.useState<BackfillTableFragment>();\n  const [\n    partitionsRequestedBackfill,\n    setPartitionsRequestedBackfill,\n  ] = React.useState<BackfillTableFragment>();\n  const [resumeBackfill] = useMutation<resumeBackfill, resumeBackfillVariables>(\n    RESUME_BACKFILL_MUTATION,\n  );\n  const {canCancelPartitionBackfill} = usePermissions();\n\n  const candidateId = terminationBackfill?.backfillId;\n\n  React.useEffect(() => {\n    if (canCancelPartitionBackfill.enabled && candidateId) {\n      const [backfill] = backfills.filter((backfill) => backfill.backfillId === candidateId);\n      setTerminationBackfill(backfill);\n    }\n  }, [backfills, candidateId, canCancelPartitionBackfill]);\n\n  const resume = async (backfill: BackfillTableFragment) => {\n    const {data} = await resumeBackfill({variables: {backfillId: backfill.backfillId}});\n    if (data && data.resumePartitionBackfill.__typename === 'ResumeBackfillSuccess') {\n      refetch();\n    } else if (data && data.resumePartitionBackfill.__typename === 'UnauthorizedError') {\n      SharedToaster.show({\n        message: (\n          <Group direction=\"column\" spacing={4}>\n            <div>\n              Attempted to retry the backfill in read-only mode. This backfill was not retried.\n            </div>\n          </Group>\n        ),\n        icon: 'error',\n        intent: 'danger',\n      });\n    } else if (data && data.resumePartitionBackfill.__typename === 'PythonError') {\n      const error = data.resumePartitionBackfill;\n      SharedToaster.show({\n        message: <div>An unexpected error occurred. This backfill was not retried.</div>,\n        icon: 'error',\n        intent: 'danger',\n        action: {\n          text: 'View error',\n          onClick: () =>\n            showCustomAlert({\n              body: <PythonErrorInfo error={error} />,\n            }),\n        },\n      });\n    }\n  };\n\n  return (\n    <>\n      <Table $monospaceFont={false}>\n        <thead>\n          <tr>\n            <th style={{width: 120}}>Backfill ID</th>\n            <th style={{width: 200}}>Created</th>\n            {showBackfillTarget ? <th>Backfill target</th> : null}\n            {allPartitions ? <th>Requested</th> : null}\n            <th style={{width: 140}}>Backfill status</th>\n            <th>Run status</th>\n            <th style={{width: 80}} />\n          </tr>\n        </thead>\n        <tbody>\n          {backfills.map((backfill: BackfillTableFragment) => (\n            <BackfillRow\n              key={backfill.backfillId}\n              showBackfillTarget={showBackfillTarget}\n              backfill={backfill}\n              allPartitions={allPartitions}\n              onTerminateBackfill={setTerminationBackfill}\n              onResumeBackfill={resume}\n              onShowStepStatus={setStepStatusBackfill}\n              onShowPartitionsRequested={setPartitionsRequestedBackfill}\n            />\n          ))}\n        </tbody>\n      </Table>\n      <BackfillStepStatusDialog\n        backfill={stepStatusBackfill}\n        onClose={() => setStepStatusBackfill(undefined)}\n      />\n      <BackfillPartitionsRequestedDialog\n        backfill={partitionsRequestedBackfill}\n        onClose={() => setPartitionsRequestedBackfill(undefined)}\n      />\n      <BackfillTerminationDialog\n        backfill={terminationBackfill}\n        onClose={() => setTerminationBackfill(undefined)}\n        onComplete={() => refetch()}\n      />\n    </>\n  );\n};\n\nconst BackfillRow = ({\n  backfill,\n  allPartitions,\n  showBackfillTarget,\n  onTerminateBackfill,\n  onResumeBackfill,\n  onShowStepStatus,\n  onShowPartitionsRequested,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onTerminateBackfill: (backfill: BackfillTableFragment) => void;\n  onResumeBackfill: (backfill: BackfillTableFragment) => void;\n  showBackfillTarget: boolean;\n  onShowStepStatus: (backfill: BackfillTableFragment) => void;\n  onShowPartitionsRequested: (backfill: BackfillTableFragment) => void;\n}) => {\n  const history = useHistory();\n  const {canCancelPartitionBackfill, canLaunchPartitionBackfill} = usePermissions();\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.backfillId}`,\n    },\n  ]);\n\n  const canCancelRuns = backfill.partitionStatuses.results.some(\n    (r) => r.runStatus === RunStatus.QUEUED || r.runStatus === RunStatus.STARTED,\n  );\n\n  return (\n    <tr>\n      <td style={{width: 120}}>\n        <Mono style={{fontSize: '16px', lineHeight: '18px'}}>\n          <Link to={runsUrl}>{backfill.backfillId}</Link>\n        </Mono>\n      </td>\n      <td style={{width: 240}}>\n        {backfill.timestamp ? <TimestampDisplay timestamp={backfill.timestamp} /> : '-'}\n      </td>\n      {showBackfillTarget ? (\n        <td>\n          <BackfillTarget backfill={backfill} />\n        </td>\n      ) : null}\n      {allPartitions ? (\n        <td style={{width: 300}}>\n          <BackfillRequested\n            allPartitions={allPartitions}\n            backfill={backfill}\n            onExpand={() => onShowPartitionsRequested(backfill)}\n          />\n        </td>\n      ) : null}\n      <td style={{width: 140}}>\n        <BackfillStatus backfill={backfill} />\n      </td>\n      <td>\n        <BackfillRunStatus backfill={backfill} history={history} />\n      </td>\n      <td>\n        <Popover\n          content={\n            <Menu>\n              {canCancelPartitionBackfill.enabled ? (\n                <>\n                  {backfill.numRequested < backfill.partitionStatuses.results.length &&\n                  backfill.status === BulkActionStatus.REQUESTED ? (\n                    <MenuItem\n                      text=\"Cancel backfill submission\"\n                      icon=\"cancel\"\n                      intent=\"danger\"\n                      onClick={() => onTerminateBackfill(backfill)}\n                    />\n                  ) : null}\n                  {canCancelRuns ? (\n                    <MenuItem\n                      text=\"Terminate unfinished runs\"\n                      icon=\"cancel\"\n                      intent=\"danger\"\n                      onClick={() => onTerminateBackfill(backfill)}\n                    />\n                  ) : null}\n                </>\n              ) : null}\n              {canLaunchPartitionBackfill.enabled &&\n              backfill.status === BulkActionStatus.FAILED &&\n              backfill.partitionSet ? (\n                <MenuItem\n                  text=\"Resume failed backfill\"\n                  title=\"Submits runs for all partitions in the backfill that do not have a corresponding run. Does not retry failed runs.\"\n                  icon=\"refresh\"\n                  onClick={() => onResumeBackfill(backfill)}\n                />\n              ) : null}\n              <MenuItem\n                text=\"View backfill runs\"\n                icon=\"settings_backup_restore\"\n                onClick={() => history.push(runsUrl)}\n              />\n              <MenuItem\n                text=\"View step status\"\n                icon=\"view_list\"\n                onClick={() => {\n                  onShowStepStatus(backfill);\n                }}\n              />\n            </Menu>\n          }\n          position=\"bottom-right\"\n        >\n          <Button icon={<Icon name=\"expand_more\" />} />\n        </Popover>\n      </td>\n    </tr>\n  );\n};\n\nconst BackfillRequested = ({\n  allPartitions,\n  backfill,\n  onExpand,\n}: {\n  allPartitions: string[];\n  backfill: BackfillTableFragment;\n  onExpand: () => void;\n}) => {\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <div>\n        <TagButton onClick={onExpand}>\n          <Tag intent=\"primary\" interactive>\n            {backfill.partitionNames.length} partitions\n          </Tag>\n        </TagButton>\n      </div>\n      <PartitionStatus\n        partitionNames={allPartitions}\n        partitionStateForKey={() => PartitionState.QUEUED}\n        small\n        hideStatusTooltip\n      />\n    </Box>\n  );\n};\n\nconst BackfillStatus = ({backfill}: {backfill: BackfillTableFragment}) => {\n  switch (backfill.status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>Requested</Tag>;\n    case BulkActionStatus.CANCELED:\n    case BulkActionStatus.FAILED:\n      return (\n        <Box margin={{bottom: 12}}>\n          <TagButton\n            onClick={() =>\n              backfill.error &&\n              showCustomAlert({title: 'Error', body: <PythonErrorInfo error={backfill.error} />})\n            }\n          >\n            <Tag intent=\"danger\">{backfill.status === 'FAILED' ? 'Failed' : 'Canceled'}</Tag>\n          </TagButton>\n        </Box>\n      );\n    case BulkActionStatus.COMPLETED:\n      const statuses = backfill.partitionStatuses.results.map((r) => r.runStatus);\n      if (\n        statuses.filter((runStatus) => runStatus === RunStatus.SUCCESS).length ===\n        backfill.partitionNames.length\n      ) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (statuses.filter((runStatus) => runStatus && runStatus in inProgressStatuses).length) {\n        return <Tag intent=\"primary\">In progress</Tag>;\n      }\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n  }\n};\n\nconst BackfillRunStatus = ({\n  backfill,\n  history,\n}: {\n  backfill: BackfillTableFragment;\n  history: any;\n}) => {\n  const states = React.useMemo(\n    () =>\n      Object.fromEntries(\n        backfill.partitionStatuses.results.map((s) => [\n          s.partitionName,\n          runStatusToPartitionState(s.runStatus),\n        ]),\n      ),\n    [backfill],\n  );\n\n  return (\n    <PartitionStatus\n      partitionNames={backfill.partitionNames}\n      partitionStateForKey={(key) => states[key]}\n      splitPartitions={true}\n      onClick={(partitionName) => {\n        const entry = backfill.partitionStatuses.results.find(\n          (r) => r.partitionName === partitionName,\n        );\n        if (entry) {\n          history.push(`/runs/${entry.runId}`);\n        }\n      }}\n    />\n  );\n};\n\nconst BackfillTarget: React.FC<{\n  backfill: BackfillTableFragment;\n}> = ({backfill}) => {\n  const {assetSelection, partitionSet, partitionSetName} = backfill;\n\n  const repoAddress = partitionSet\n    ? buildRepoAddress(\n        partitionSet.repositoryOrigin.repositoryName,\n        partitionSet.repositoryOrigin.repositoryLocationName,\n      )\n    : null;\n\n  const repo = useRepository(repoAddress);\n\n  if (!partitionSet || !repoAddress) {\n    return <span style={{fontWeight: 500}}>{partitionSetName}</span>;\n  }\n\n  const isJob = !!(repo && isThisThingAJob(repo, partitionSet.pipelineName));\n  const isHiddenAssetJob = isHiddenAssetGroupJob(partitionSet.pipelineName);\n\n  const repoLink = (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} style={{fontSize: '12px'}}>\n      <Icon name=\"repo\" color={Colors.Gray400} />\n      <Link to={workspacePathFromAddress(repoAddress)}>\n        {repoAddressAsHumanString(repoAddress)}\n      </Link>\n    </Box>\n  );\n\n  if (isHiddenAssetJob) {\n    return (\n      <Box flex={{direction: 'column', gap: 8}}>\n        {repoLink}\n        <AssetKeyTagCollection assetKeys={assetSelection} modalTitle=\"Assets in backfill\" />\n      </Box>\n    );\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <Link\n        to={workspacePipelinePath({\n          repoName: partitionSet.repositoryOrigin.repositoryName,\n          repoLocation: partitionSet.repositoryOrigin.repositoryLocationName,\n          pipelineName: partitionSet.pipelineName,\n          isJob,\n          path: `/partitions?partitionSet=${encodeURIComponent(partitionSet.name)}`,\n        })}\n        style={{fontWeight: 500}}\n      >\n        {partitionSet.name}\n      </Link>\n      <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n        {repoLink}\n        <PipelineReference\n          showIcon\n          size=\"small\"\n          pipelineName={partitionSet.pipelineName}\n          pipelineHrefContext={{\n            name: partitionSet.repositoryOrigin.repositoryName,\n            location: partitionSet.repositoryOrigin.repositoryLocationName,\n          }}\n          isJob={isJob}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const BACKFILL_TABLE_FRAGMENT = gql`\n  fragment BackfillTableFragment on PartitionBackfill {\n    backfillId\n    status\n    numRequested\n    partitionNames\n    numPartitions\n    timestamp\n    partitionSetName\n    partitionSet {\n      id\n      name\n      mode\n      pipelineName\n      repositoryOrigin {\n        id\n        repositoryName\n        repositoryLocationName\n      }\n    }\n    partitionStatuses {\n      results {\n        id\n        partitionName\n        runId\n        runStatus\n      }\n    }\n    assetSelection {\n      path\n    }\n    error {\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunTimeFragment';\nimport {RunStatus} from '../types/globalTypes';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary: React.FC<Props> = React.memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}) => {\n    const {status} = run;\n\n    const intent = React.useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, Caption} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {StepEventStatus} from '../types/globalTypes';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRunQuery';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const {data} = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {variables: {runId}},\n  );\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = React.useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0];\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0];\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tag,\n  Body,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {InstigationTickStatus, InstigationType} from '../types/globalTypes';\n\nimport {LaunchedRunListQuery, LaunchedRunListQueryVariables} from './types/LaunchedRunListQuery';\nimport {TickTagFragment} from './types/TickTagFragment';\n\nexport const TickTag: React.FC<{\n  tick: TickTagFragment;\n  instigationType?: InstigationType;\n}> = ({tick, instigationType}) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  switch (tick.status) {\n    case InstigationTickStatus.STARTED:\n      return <Tag>Started</Tag>;\n    case InstigationTickStatus.SUCCESS:\n      if (!tick.runIds.length) {\n        return <Tag intent=\"primary\">Requested</Tag>;\n      }\n      const tag = (\n        <>\n          <Tag intent=\"primary\" interactive>\n            <ButtonLink underline=\"never\" onClick={() => setOpen(true)}>\n              {tick.runIds.length} Requested\n            </ButtonLink>\n          </Tag>\n          <Dialog\n            isOpen={open}\n            onClose={() => setOpen(false)}\n            style={{width: '90vw'}}\n            title=\"Launched runs\"\n          >\n            <RunList runIds={tick.runIds} />\n            <DialogFooter>\n              <Button intent=\"primary\" onClick={() => setOpen(false)}>\n                OK\n              </Button>\n            </DialogFooter>\n          </Dialog>\n        </>\n      );\n      if (tick.runKeys.length > tick.runIds.length) {\n        const message = `${tick.runKeys.length} runs requested, but ${\n          tick.runKeys.length - tick.runIds.length\n        } skipped because the runs already exist for those requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            {tag}\n          </Tooltip>\n        );\n      }\n      return tag;\n\n    case InstigationTickStatus.SKIPPED:\n      if (tick.runKeys.length) {\n        const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      if (tick.skipReason) {\n        return (\n          <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      return <Tag intent=\"warning\">Skipped</Tag>;\n    case InstigationTickStatus.FAILURE:\n      if (!tick.error) {\n        return <Tag intent=\"danger\">Failure</Tag>;\n      } else {\n        const error = tick.error;\n        const showError = () =>\n          showCustomAlert({\n            title: instigationType\n              ? instigationType === InstigationType.SCHEDULE\n                ? 'Schedule Response'\n                : 'Sensor Response'\n              : 'Python Error',\n            body: <PythonErrorInfo error={error} />,\n          });\n        return (\n          <>\n            <LinkButton onClick={showError}>\n              <Tag minimal={true} intent=\"danger\">\n                Failure\n              </Tag>\n            </LinkButton>\n            <ButtonLink onClick={showError} style={{marginLeft: 8, fontSize: 12}}>\n              View\n            </ButtonLink>\n          </>\n        );\n      }\n    default:\n      return assertUnreachable(tick.status);\n  }\n};\n\nexport const RunList: React.FC<{runIds: string[]}> = ({runIds}) => {\n  const {data, loading} = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const FailedRunList: React.FC<{\n  originRunIds?: string[];\n}> = ({originRunIds}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.Gray200}}>\n        <Body>\n          Failed Runs\n          <Tooltip content=\"Failed runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\nconst LinkButton = styled.button`\n  background: inherit;\n  border: none;\n  cursor: pointer;\n  font-size: inherit;\n  text-decoration: none;\n  padding: 0;\n`;\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n          runId\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Mono} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {InstigationStateFragment} from './types/InstigationStateFragment';\nimport {RunStatusFragment} from './types/RunStatusFragment';\n\nexport const InstigatedRunStatus: React.FC<{\n  instigationState: InstigationStateFragment;\n}> = ({instigationState}) => {\n  if (!instigationState.runs.length) {\n    return <span style={{color: Colors.Gray300}}>None</span>;\n  }\n  return <LastRunSummary run={instigationState.runs[0]} name={instigationState.name} />;\n};\n\nexport const RunStatusLink: React.FC<{run: RunStatusFragment}> = ({run}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.runId}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({runId: run.runId})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    runId\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.Gray500};\n  }\n`;\n","import {useMutation} from '@apollo/client';\nimport {Alert, Box, Checkbox, Colors, Group, Table, Subheading, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {usePermissions} from '../app/Permissions';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {StopSchedule, StopScheduleVariables} from '../schedules/types/StopSchedule';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {StopSensor, StopSensorVariables} from '../sensors/types/StopSensor';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {TickTag} from './InstigationTick';\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationStateFragment';\n\nexport const UnloadableSensors: React.FC<{\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({sensorStates, showSubheading = true}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor Name</th>\n            <th style={{width: '100px'}}>Last Tick</th>\n            <th>Last Run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules: React.FC<{\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({scheduleStates, showSubheading = true}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule Name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last Tick</th>\n            <th>Last Run</th>\n            <th>Partition Set Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks} = sensorState;\n  const {canStopSensor} = usePermissions();\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<StopSensor, StopSensorVariables>(\n    STOP_SENSOR_MUTATION,\n    {\n      onCompleted: displaySensorMutationErrors,\n    },\n  );\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !canStopSensor.enabled;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n    return lacksPermission ? (\n      <Tooltip content={canStopSensor.disabledReason}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow: React.FC<{\n  scheduleState: InstigationStateFragment;\n}> = ({scheduleState}) => {\n  const {canStopRunningSchedule} = usePermissions();\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopSchedule,\n    StopScheduleVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !canStopRunningSchedule.enabled;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={canStopRunningSchedule.disabledReason}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n        ) : null}\n      </td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import {Box, Colors, Icon, IconWrapper, MiddleTruncate, Spinner, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {usePermissions} from '../app/Permissions';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ReloadRepositoryLocationButton} from './ReloadRepositoryLocationButton';\n\nexport const RepositoryLink: React.FC<{\n  repoAddress: RepoAddress;\n  showIcon?: boolean;\n  showRefresh?: boolean;\n}> = ({repoAddress, showIcon = false, showRefresh = true}) => {\n  const {location} = repoAddress;\n  const {canReloadRepositoryLocation} = usePermissions();\n  const repoString = repoAddressAsHumanString(repoAddress);\n\n  return (\n    <Box flex={{display: 'inline-flex', direction: 'row', alignItems: 'center'}} title={repoString}>\n      {showIcon && <Icon name=\"folder\" style={{marginRight: 8}} color={Colors.Gray400} />}\n      <RepositoryName to={workspacePathFromAddress(repoAddress)} style={{flex: 1}}>\n        <MiddleTruncate text={repoString} />\n      </RepositoryName>\n      {canReloadRepositoryLocation.enabled && showRefresh ? (\n        <ReloadRepositoryLocationButton location={location}>\n          {({tryReload, reloading}) => (\n            <ReloadTooltip\n              content={\n                reloading ? (\n                  'Reloading…'\n                ) : (\n                  <>\n                    Reload location <strong>{location}</strong>\n                  </>\n                )\n              }\n            >\n              {reloading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <StyledButton onClick={tryReload}>\n                  <Icon name=\"refresh\" color={Colors.Gray400} />\n                </StyledButton>\n              )}\n            </ReloadTooltip>\n          )}\n        </ReloadRepositoryLocationButton>\n      ) : null}\n    </Box>\n  );\n};\n\nconst RepositoryName = styled(Link)`\n  max-width: 280px;\n`;\n\nconst ReloadTooltip = styled(Tooltip)`\n  margin-left: 4px;\n\n  && {\n    display: block;\n  }\n`;\n\nconst StyledButton = styled.button`\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  margin: 0;\n\n  :focus:not(:focus-visible) {\n    outline: none;\n  }\n\n  & ${IconWrapper} {\n    display: block;\n    transition: color 100ms linear;\n  }\n\n  :hover ${IconWrapper} {\n    color: ${Colors.Blue500};\n  }\n`;\n","import {Box, ButtonLink, Colors, Tag, Tooltip, FontFamily, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {ScheduleSwitchFragment} from '../schedules/types/ScheduleSwitchFragment';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitchFragment';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ScheduleAndSensorDialog} from './ScheduleAndSensorDialog';\n\nexport const ScheduleOrSensorTag: React.FC<{\n  schedules: ScheduleSwitchFragment[];\n  sensors: SensorSwitchFragment[];\n  repoAddress: RepoAddress;\n  showSwitch?: boolean;\n}> = ({schedules, sensors, repoAddress, showSwitch = true}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const scheduleCount = schedules.length;\n  const sensorCount = sensors.length;\n\n  if (scheduleCount > 1 || sensorCount > 1 || (scheduleCount && sensorCount)) {\n    const buttonText =\n      scheduleCount && sensorCount\n        ? `${scheduleCount + sensorCount} schedules/sensors`\n        : scheduleCount\n        ? `${scheduleCount} schedules`\n        : `${sensorCount} sensors`;\n\n    const icon = scheduleCount > 1 ? 'schedule' : 'sensors';\n\n    return (\n      <>\n        <Tag icon={icon}>\n          <ButtonLink onClick={() => setOpen(true)} color={Colors.Link}>\n            {buttonText}\n          </ButtonLink>\n        </Tag>\n        <ScheduleAndSensorDialog\n          isOpen={open}\n          onClose={() => setOpen(false)}\n          repoAddress={repoAddress}\n          schedules={schedules}\n          sensors={sensors}\n          showSwitch={showSwitch}\n        />\n      </>\n    );\n  }\n\n  if (scheduleCount) {\n    return (\n      <MatchingSchedule schedule={schedules[0]} repoAddress={repoAddress} showSwitch={showSwitch} />\n    );\n  }\n\n  if (sensorCount) {\n    return <MatchingSensor sensor={sensors[0]} repoAddress={repoAddress} showSwitch={showSwitch} />;\n  }\n\n  return null;\n};\n\nconst MatchingSchedule: React.FC<{\n  schedule: ScheduleSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({schedule, repoAddress, showSwitch}) => {\n  const {cronSchedule, executionTimezone, scheduleState} = schedule;\n  const running = scheduleState.status === 'RUNNING';\n  const tag = (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"schedule\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n          style={{overflow: 'hidden', textOverflow: 'ellipsis'}}\n        >\n          {humanCronString(cronSchedule, executionTimezone || 'UTC')}\n        </Link>\n        {showSwitch ? (\n          <ScheduleSwitch size=\"small\" repoAddress={repoAddress} schedule={schedule} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n\n  return schedule.cronSchedule ? (\n    <Tooltip\n      placement=\"top-start\"\n      content={\n        <Box flex={{direction: 'column', gap: 4}}>\n          <div>\n            Name: <strong>{schedule.name}</strong>\n          </div>\n          <div>\n            Cron:{' '}\n            <span style={{fontFamily: FontFamily.monospace, marginLeft: '4px'}}>\n              ({schedule.cronSchedule})\n            </span>\n          </div>\n          <div>\n            Timezone: <strong>{schedule.executionTimezone || 'UTC'}</strong>\n          </div>\n        </Box>\n      }\n    >\n      {tag}\n    </Tooltip>\n  ) : (\n    tag\n  );\n};\n\nconst MatchingSensor: React.FC<{\n  sensor: SensorSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({sensor, repoAddress, showSwitch}) => {\n  const running = sensor.sensorState.status === 'RUNNING';\n  return (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"sensors\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n          style={{maxWidth: 200, overflow: 'hidden'}}\n        >\n          <MiddleTruncate text={sensor.name} />\n        </Link>\n        {showSwitch ? (\n          <SensorSwitch size=\"small\" repoAddress={repoAddress} sensor={sensor} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState, Spinner} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\n\nimport {PartitionRunListQuery, PartitionRunListQueryVariables} from './types/PartitionRunListQuery';\n\ninterface PartitionRunListProps {\n  pipelineName: string;\n  partitionName: string;\n}\n\nexport const PartitionRunList: React.FC<PartitionRunListProps> = (props) => {\n  const {data, loading} = useQuery<PartitionRunListQuery, PartitionRunListQueryVariables>(\n    PARTITION_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          pipelineName: props.pipelineName,\n          tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </div>\n  );\n};\n\nconst PARTITION_RUN_LIST_QUERY = gql`\n  query PartitionRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n          runId\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n} from '@dagster-io/ui';\nimport keyBy from 'lodash/keyBy';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {PartitionHealthData, PartitionHealthDimension} from '../assets/usePartitionHealthData';\nimport {GanttChartMode} from '../gantt/Constants';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {useViewport} from '../gantt/useViewport';\nimport {linkToRunEvent} from '../runs/RunUtils';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {RunStatus} from '../types/globalTypes';\nimport {MenuLink} from '../ui/MenuLink';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRunList} from './PartitionRunList';\nimport {PartitionState} from './PartitionStatus';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  LeftLabel,\n  TopLabel,\n  topLabelHeightForLabels,\n  TopLabelTilted,\n} from './RunMatrixUtils';\nimport {PartitionMatrixStepRunFragment} from './types/PartitionMatrixStepRunFragment';\nimport {\n  PartitionStepStatusPipelineQuery,\n  PartitionStepStatusPipelineQueryVariables,\n} from './types/PartitionStepStatusPipelineQuery';\nimport {\n  PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT,\n  MatrixStep,\n  PartitionRuns,\n  useMatrixData,\n  MatrixData,\n} from './useMatrixData';\n\nconst BUFFER = 3;\n\nexport const getVisibleItemCount = (viewportWidth: number) =>\n  Math.ceil(viewportWidth / BOX_SIZE) - BUFFER;\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName?: string;\n}\n\ninterface PartitionStepStatusBaseProps {\n  offset: number;\n  setOffset: (val: number) => void;\n  setPageSize: (val: number) => void;\n  pipelineName: string;\n  partitionNames: string[];\n\n  runFilters?: RunFilterToken[];\n  setRunFilters?: (val: RunFilterToken[]) => void;\n}\n\nconst timeboundsOfPartitions = (partitionColumns: {steps: {unix: number}[]}[]) => {\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n  return [minUnix, maxUnix] as const;\n};\n\nexport const PartitionPerAssetStatus: React.FC<\n  Omit<PartitionStepStatusBaseProps, 'partitionNames'> & {\n    assetHealth: PartitionHealthData[];\n    assetQueryItems: GraphQueryItem[];\n    rangeDimensionIdx: number;\n    rangeDimension: PartitionHealthDimension;\n  }\n> = ({assetHealth, rangeDimension, rangeDimensionIdx, assetQueryItems, ...rest}) => {\n  const healthByAssetKey = keyBy(assetHealth, (a) => tokenForAssetKey(a.assetKey));\n\n  const layout = buildLayout({nodes: assetQueryItems, mode: GanttChartMode.FLAT});\n  const layoutBoxesWithRangeDimension = layout.boxes.filter(\n    (b) =>\n      healthByAssetKey[b.node.name]?.dimensions[rangeDimensionIdx]?.name === rangeDimension.name,\n  );\n\n  const data: MatrixData = {\n    stepRows: layoutBoxesWithRangeDimension.map((box) => ({\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: 0,\n      finalFailurePercent: 0,\n    })),\n    partitions: [],\n    partitionColumns: rangeDimension.partitionKeys.map((partitionKey, idx) => ({\n      idx,\n      name: partitionKey,\n      runsLoaded: true,\n      runs: [],\n      steps: layoutBoxesWithRangeDimension.map((box) => ({\n        name: box.node.name,\n        unix: 0,\n        color: partitionStateToStatusSquareColor(\n          healthByAssetKey[box.node.name].stateForSingleDimension(rangeDimensionIdx, partitionKey),\n        ),\n      })),\n    })),\n  };\n\n  return (\n    <PartitionStepStatus\n      {...rest}\n      partitionNames={rangeDimension.partitionKeys}\n      data={data}\n      showLatestRun={false}\n    />\n  );\n};\n\nexport const partitionStateToStatusSquareColor = (state: PartitionState) => {\n  return state === PartitionState.SUCCESS\n    ? 'SUCCESS'\n    : state === PartitionState.SUCCESS_MISSING\n    ? 'SUCCESS-MISSING'\n    : 'MISSING';\n};\n\nexport const PartitionPerOpStatus: React.FC<\n  PartitionStepStatusBaseProps & {\n    repoAddress: RepoAddress;\n    partitions: PartitionRuns[];\n  }\n> = ({repoAddress, pipelineName, partitions, partitionNames, ...rest}) => {\n  // Retrieve the pipeline's structure\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const pipelineSelector = {...repositorySelector, pipelineName};\n  const pipeline = useQuery<\n    PartitionStepStatusPipelineQuery,\n    PartitionStepStatusPipelineQueryVariables\n  >(PARTITION_STEP_STATUS_PIPELINE_QUERY, {\n    variables: {pipelineSelector},\n  });\n\n  const solidHandles =\n    pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n    pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n  const data = useMatrixData({\n    partitionNames,\n    partitions,\n    stepQuery: '',\n    solidHandles,\n  });\n\n  if (!data) {\n    return <span />;\n  }\n  return (\n    <PartitionStepStatus\n      {...rest}\n      showLatestRun={true}\n      pipelineName={pipelineName}\n      partitionNames={partitionNames}\n      data={data}\n    />\n  );\n};\n\nconst PartitionStepStatus: React.FC<\n  PartitionStepStatusBaseProps & {\n    data: MatrixData;\n    showLatestRun: boolean;\n  }\n> = (props) => {\n  const {viewport, containerProps} = useViewport();\n  const [hovered, setHovered] = React.useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = React.useState<PartitionRunSelection | null>(null);\n  const {setPageSize, data} = props;\n\n  React.useEffect(() => {\n    if (viewport.width) {\n      setPageSize(getVisibleItemCount(viewport.width));\n    }\n  }, [viewport.width, setPageSize]);\n\n  const {stepRows, partitionColumns} = data;\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => (stepsByName[step.name] = step));\n    return stepRows.map((stepRow) => stepsByName[stepRow.name]);\n  };\n\n  const visibleCount = getVisibleItemCount(viewport.width);\n  const visibleStart = Math.max(0, partitionColumns.length - props.offset - visibleCount);\n  const visibleEnd = Math.max(visibleCount, partitionColumns.length - props.offset);\n  const visibleColumns = partitionColumns.slice(visibleStart, visibleEnd);\n  const [minUnix, maxUnix] = timeboundsOfPartitions(partitionColumns);\n  const topLabelHeight = topLabelHeightForLabels(partitionColumns.map((p) => p.name));\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs` : ''}\n      >\n        <Box padding={{bottom: 12}}>\n          {focused && (\n            <PartitionRunList\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n            />\n          )}\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        <GridFloatingContainer floating={props.offset + visibleCount < props.partitionNames.length}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel style={{height: topLabelHeight}} />\n            {props.showLatestRun && <LeftLabel style={{paddingLeft: 24}}>Last Run</LeftLabel>}\n            <Divider />\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: 8 + step.x}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                {step.name}\n              </LeftLabel>\n            ))}\n          </GridColumn>\n        </GridFloatingContainer>\n\n        {props.offset + visibleCount < props.partitionNames.length ? (\n          <PagerControl\n            $direction=\"left\"\n            onClick={() =>\n              props.setOffset(\n                Math.max(\n                  0,\n                  Math.min(\n                    props.offset + visibleCount - 1,\n                    props.partitionNames.length - visibleCount,\n                  ),\n                ),\n              )\n            }\n          >\n            <Icon name=\"chevron_left\" />\n          </PagerControl>\n        ) : null}\n        <div style={{flex: 1, overflow: 'hidden', position: 'relative'}} {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_SIZE,\n              position: 'absolute',\n              height: '100%',\n              right: 0,\n              zIndex: 1,\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_SIZE,\n                  position: 'absolute',\n                  right: (visibleCount - idx) * BOX_SIZE + 20,\n                }}\n              >\n                <TopLabelTilted $height={topLabelHeight} label={p.name} />\n                {props.showLatestRun && (\n                  <LeftLabel style={{textAlign: 'center'}}>\n                    <PartitionSquare\n                      key={`${p.name}:__full_status`}\n                      runs={p.runs}\n                      runsLoaded={p.runsLoaded}\n                      minUnix={minUnix}\n                      maxUnix={maxUnix}\n                      hovered={hovered}\n                      setHovered={setHovered}\n                      setFocused={setFocused}\n                      partitionName={p.name}\n                    />\n                  </LeftLabel>\n                )}\n                <Divider />\n                {sortPartitionSteps(p.steps).map((s) => (\n                  <PartitionSquare\n                    key={s.name}\n                    step={s}\n                    runs={p.runs}\n                    runsLoaded={p.runsLoaded}\n                    minUnix={minUnix}\n                    maxUnix={maxUnix}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setFocused={setFocused}\n                    partitionName={p.name}\n                  />\n                ))}\n              </GridColumn>\n            ))}\n          </div>\n        </div>\n        {props.offset > 0 ? (\n          <PagerControl\n            $direction=\"right\"\n            onClick={() => props.setOffset(Math.max(0, props.offset - visibleCount))}\n          >\n            <Icon name=\"chevron_right\" />\n          </PagerControl>\n        ) : null}\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n};\n\nconst PagerControl = styled.div<{$direction: 'left' | 'right'}>`\n  width: 30px;\n  position: absolute;\n  border: 1px solid ${Colors.KeylineGray};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(50% - 15px);\n  bottom: calc(50% - 15px);\n  ${({$direction}) => ($direction === 'left' ? 'left: 315px;' : 'right: 0;')}\n  background: white;\n  z-index: 10;\n\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  &:hover {\n    background: #ececec;\n  }\n`;\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${Colors.KeylineGray};\n`;\n\nexport const PARTITION_STEP_STATUS_RUN_FRAGMENT = gql`\n  fragment PartitionStepStatusRun on Run {\n    id\n    runId\n    tags {\n      key\n      value\n    }\n    stepStats {\n      __typename\n      stepKey\n      status\n    }\n  }\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_STEP_STATUS_PIPELINE_QUERY = gql`\n  query PartitionStepStatusPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          ...PartitionMatrixSolidHandleFragment\n        }\n      }\n    }\n  }\n  ${PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT}\n`;\n\nconst TOOLTIP_STYLE = JSON.stringify({\n  top: 20,\n  left: 10,\n});\n\nconst PartitionSquare: React.FC<{\n  step?: MatrixStep;\n  runs: PartitionMatrixStepRunFragment[];\n  runsLoaded: boolean;\n  hovered: PartitionRunSelection | null;\n  minUnix: number;\n  maxUnix: number;\n  partitionName: string;\n  setHovered: (hovered: PartitionRunSelection | null) => void;\n  setFocused: (hovered: PartitionRunSelection | null) => void;\n}> = ({step, runs, runsLoaded, hovered, setHovered, setFocused, partitionName}) => {\n  const [opened, setOpened] = React.useState(false);\n  let squareStatus;\n\n  if (!runsLoaded) {\n    squareStatus = 'loading';\n  } else if (step) {\n    squareStatus = step.color.toLowerCase();\n  } else if (runs.length === 0) {\n    squareStatus = 'empty';\n  } else {\n    const runStatus = runs[runs.length - 1].status;\n    squareStatus = runStatus === RunStatus.CANCELED ? 'failure' : runStatus.toLowerCase();\n  }\n\n  const content = (\n    <div\n      className={`square ${squareStatus}`}\n      onMouseEnter={() => setHovered({stepName: step?.name, partitionName})}\n      onMouseLeave={() => setHovered(null)}\n      data-tooltip={\n        runsLoaded && !step ? (runs.length === 1 ? `1 run` : `${runs.length} runs`) : undefined\n      }\n      data-tooltip-style={TOOLTIP_STYLE}\n    />\n  );\n\n  if (\n    !opened &&\n    (!runs.length || hovered?.stepName !== step?.name || hovered?.partitionName !== partitionName)\n  ) {\n    return content;\n  }\n\n  return (\n    <Popover\n      interactionKind=\"click\"\n      placement=\"bottom-start\"\n      onOpening={() => setOpened(true)}\n      onClosed={() => setOpened(false)}\n      content={\n        <Menu>\n          <MenuLink\n            icon=\"open_in_new\"\n            text=\"Show logs from last run\"\n            to={linkToRunEvent(runs[runs.length - 1], {stepKey: step ? step.name : null})}\n          />\n          <MenuItem\n            icon=\"settings_backup_restore\"\n            text={`View runs (${runs.length})`}\n            onClick={() => setFocused({stepName: step?.name, partitionName})}\n          />\n        </Menu>\n      }\n    >\n      {content}\n    </Popover>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {shallowCompareKeys} from '@blueprintjs/core/lib/cjs/common/utils';\nimport React from 'react';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {StepEventStatus} from '../types/globalTypes';\n\nimport {PartitionMatrixSolidHandleFragment} from './types/PartitionMatrixSolidHandleFragment';\nimport {PartitionMatrixStepRunFragment} from './types/PartitionMatrixStepRunFragment';\n\ntype StatusSquareColor = 'SUCCESS' | 'FAILURE' | 'MISSING' | 'FAILURE-MISSING' | 'SUCCESS-MISSING';\n\nexport interface PartitionRuns {\n  name: string;\n  runsLoaded: boolean;\n  runs: PartitionMatrixStepRunFragment[];\n}\n\nexport interface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n  colorizeSliceUnix: number;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nconst MISSING_STEP_STATUSES = new Set([StepEventStatus.IN_PROGRESS, StepEventStatus.SKIPPED]);\n\nfunction getStartTime(a: PartitionMatrixStepRunFragment) {\n  return a.startTime || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionMatrixStepRunFragment, b: PartitionMatrixStepRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagit 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nexport function isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitionNames: string[],\n  partitions: PartitionRuns[],\n  options?: DisplayOptions,\n) {\n  const partitionsByName = {};\n  partitions.forEach((p) => {\n    // Note this is sorting partition runs in place, I don't think it matters and\n    // seems better than cloning all the arrays.\n    p.runs.sort(byStartTimeAsc);\n    partitionsByName[p.name] = p;\n  });\n\n  const partitionColumns = partitionNames.map((name, idx) => {\n    const partition: PartitionRuns = partitionsByName[name] || {\n      name,\n      runsLoaded: false,\n      runs: [],\n    };\n    const steps = layout.boxes.map(({node}) => {\n      const blankState = {\n        name: node.name,\n        color: 'MISSING' as StatusSquareColor,\n        unix: 0,\n      };\n\n      if (!partition.runs.length) {\n        return blankState;\n      }\n\n      const lastRun = partition.runs[partition.runs.length - 1];\n      const lastRunStepStatus = lastRun.stepStats.find((stats) =>\n        isStepKeyForNode(node.name, stats.stepKey),\n      )?.status;\n\n      let previousRunStatus;\n      if (\n        partition.runs.length > 1 &&\n        (!lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus))\n      ) {\n        let idx = partition.runs.length - 2;\n        while (idx >= 0 && !previousRunStatus) {\n          const currRun = partition.runs[idx];\n          const currRunStatus = currRun.stepStats.find((stats) =>\n            isStepKeyForNode(node.name, stats.stepKey),\n          )?.status;\n          if (currRunStatus && !MISSING_STEP_STATUSES.has(currRunStatus)) {\n            previousRunStatus = currRunStatus;\n            break;\n          }\n          idx--;\n        }\n      }\n\n      if (!lastRunStepStatus && !previousRunStatus) {\n        return blankState;\n      }\n\n      const color: StatusSquareColor =\n        !lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus)\n          ? (`${previousRunStatus}-MISSING` as StatusSquareColor)\n          : (lastRunStepStatus as StatusSquareColor);\n      return {\n        name: node.name,\n        unix: getStartTime(lastRun),\n        color,\n      };\n    });\n    return {\n      ...partition,\n      steps,\n      idx,\n    };\n  });\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx].color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx].color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options?.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii].finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii].runs.length === 0 ||\n        partitionColumns[ii].steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitions, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: PartitionMatrixSolidHandleFragment[] | false;\n  partitionNames: string[];\n  partitions: PartitionRuns[];\n  stepQuery: string;\n  options?: DisplayOptions;\n}\n\nexport type MatrixData = ReturnType<typeof buildMatrixData>;\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = (inputs: MatrixDataInputs) => {\n  const cachedMatrixData = React.useRef<{\n    result: MatrixData;\n    inputs: MatrixDataInputs;\n  }>();\n  if (!inputs.solidHandles) {\n    return null;\n  }\n  if (cachedMatrixData.current && shallowCompareKeys(inputs, cachedMatrixData.current.inputs)) {\n    return cachedMatrixData.current.result;\n  }\n\n  const nodes = explodeCompositesInHandleGraph(inputs.solidHandles).map((h) => h.solid);\n\n  // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n  const solidsFiltered = filterByQuery(nodes, inputs.stepQuery);\n\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n\n  // Build the matrix of step + partition squares - presorted to match the gantt layout\n  const result = buildMatrixData(layout, inputs.partitionNames, inputs.partitions, inputs.options);\n  cachedMatrixData.current = {result, inputs};\n  return result;\n};\n\nexport const PARTITION_MATRIX_STEP_RUN_FRAGMENT = gql`\n  fragment PartitionMatrixStepRunFragment on Run {\n    id\n    runId\n    status\n    startTime\n    endTime\n    stepStats {\n      stepKey\n      startTime\n      endTime\n      status\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT = gql`\n  fragment PartitionMatrixSolidHandleFragment on SolidHandle {\n    handleID\n    solid {\n      name\n      definition {\n        name\n      }\n      inputs {\n        dependsOn {\n          solid {\n            name\n          }\n        }\n      }\n      outputs {\n        dependedBy {\n          solid {\n            name\n          }\n        }\n      }\n    }\n    ...GraphExplorerSolidHandleFragment\n  }\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {gql, useApolloClient, ApolloClient} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {RepositorySelector, RunStatus} from '../types/globalTypes';\n\nimport {PartitionMatrixStepRunFragment} from './types/PartitionMatrixStepRunFragment';\nimport {\n  PartitionStepLoaderQuery,\n  PartitionStepLoaderQueryVariables,\n} from './types/PartitionStepLoaderQuery';\nimport {PartitionRuns, PARTITION_MATRIX_STEP_RUN_FRAGMENT} from './useMatrixData';\n\ninterface DataState {\n  runs: PartitionMatrixStepRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingCursorIdx: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingCursorIdx: 0,\n};\n\ntype PartitionStepQueryOptions = {\n  partitionSetName: string;\n  partitionTagName: string;\n  partitionNames: string[];\n  pageSize: number;\n  runsFilter: RunFilterToken[];\n  repositorySelector: RepositorySelector;\n  jobName?: string;\n  offset?: number;\n  skipQuery?: boolean;\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function usePartitionStepQuery({\n  partitionSetName,\n  partitionTagName,\n  partitionNames,\n  pageSize,\n  runsFilter,\n  jobName,\n  repositorySelector,\n  offset,\n  skipQuery,\n}: PartitionStepQueryOptions) {\n  const client = useApolloClient();\n\n  const version = React.useRef(0);\n  const [dataState, setDataState] = React.useState<DataState>(InitialDataState);\n\n  const _serializedRunTags = JSON.stringify([\n    ...runsFilter.map((token) => {\n      const [key, value] = token.value.split('=');\n      return {key, value};\n    }),\n    {\n      key: DagsterTag.RepositoryLabelTag,\n      value: `${repositorySelector.repositoryName}@${repositorySelector.repositoryLocationName}`,\n    },\n  ]);\n\n  React.useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    const runTags = JSON.parse(_serializedRunTags);\n    setDataState((dataState) => ({...dataState, runs: [], loading: true}));\n\n    const run = async () => {\n      if (version.current !== v) {\n        return;\n      }\n      let loadingCursorIdx = partitionNames.length - (offset || 0);\n      const stopIdx = Math.max(0, loadingCursorIdx - pageSize);\n      setDataState((state) => ({...state, partitionNames, loadingCursorIdx}));\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n\n      while (loadingCursorIdx > stopIdx) {\n        const nextCursorIdx = Math.max(loadingCursorIdx - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(nextCursorIdx, loadingCursorIdx);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) => {\n            const partitionSetTag = {key: DagsterTag.PartitionSet, value: partitionSetName};\n            const partitionTag = {key: partitionTagName, value: partitionName};\n            // for jobs, filter by pipelineName/jobName instead of by partition set tag.  This\n            // preserves partition run history across the pipeline => job transition\n            const runTagsFilter = jobName\n              ? {\n                  pipelineName: jobName,\n                  tags: [...runTags, partitionTag],\n                }\n              : {tags: [...runTags, partitionTag, partitionSetTag]};\n            return fetchRunsForFilter(client, {limit: 1000, filter: runTagsFilter});\n          }),\n        );\n        if (version.current !== v) {\n          return;\n        }\n\n        loadingCursorIdx = nextCursorIdx;\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: loadingCursorIdx > 0,\n          loadingCursorIdx,\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: NodeJS.Timeout = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [RunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === partitionTagName && partitionNames.includes(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.runId === r.runId))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    if (!skipQuery) {\n      run();\n    }\n\n    return () => {\n      version.current += 1;\n    };\n  }, [\n    pageSize,\n    client,\n    partitionSetName,\n    partitionTagName,\n    _serializedRunTags,\n    jobName,\n    offset,\n    partitionNames,\n    skipQuery,\n  ]);\n\n  return assemblePartitions(dataState, partitionTagName);\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionStepLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionStepLoaderQuery, PartitionStepLoaderQueryVariables>({\n    fetchPolicy: 'network-only',\n    query: PARTITION_STEP_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'Runs' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\n\nfunction assemblePartitions(data: DataState, partitionTagName: string) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: PartitionRuns[] = [];\n  const byName: {[name: string]: PartitionRuns} = {};\n\n  data.partitionNames.forEach((name, idx) => {\n    byName[name] = {\n      name,\n      runsLoaded: idx >= data.loadingCursorIdx,\n      runs: [],\n    };\n    results.push(byName[name]);\n  });\n\n  data.runs.forEach((r) => {\n    const partitionName = r.tags.find((t) => t.key === partitionTagName)?.value || '';\n    byName[partitionName]?.runs.push(r);\n  });\n\n  return results;\n}\n\nconst PARTITION_STEP_LOADER_QUERY = gql`\n  query PartitionStepLoaderQuery($filter: RunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ...PartitionMatrixStepRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PARTITION_MATRIX_STEP_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Colors, Icon, IconWrapper} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {DUNDER_REPO_NAME} from '../workspace/buildRepoAddress';\n\nexport const SECTION_HEADER_HEIGHT = 32;\n\ninterface Props {\n  expanded: boolean;\n  onClick: (e: React.MouseEvent) => void;\n  repoName: string;\n  repoLocation: string;\n  showLocation: boolean;\n  rightElement?: React.ReactNode;\n}\n\nexport const RepoSectionHeader = (props: Props) => {\n  const {expanded, onClick, repoName, repoLocation, showLocation, rightElement} = props;\n  const isDunderRepoName = repoName === DUNDER_REPO_NAME;\n  return (\n    <SectionHeaderButton $open={expanded} onClick={onClick}>\n      <Box\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"folder\" color={Colors.Dark} />\n          <div>\n            <RepoName>{isDunderRepoName ? repoLocation : repoName}</RepoName>\n            {showLocation && !isDunderRepoName ? (\n              <RepoLocation>{`@${repoLocation}`}</RepoLocation>\n            ) : null}\n          </div>\n        </Box>\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          {rightElement}\n          <Box margin={{top: 2}}>\n            <Icon name=\"arrow_drop_down\" />\n          </Box>\n        </Box>\n      </Box>\n    </SectionHeaderButton>\n  );\n};\n\nconst SectionHeaderButton = styled.button<{$open: boolean}>`\n  background-color: ${Colors.Gray50};\n  border: 0;\n  box-shadow: inset 0px -1px 0 ${Colors.KeylineGray}, inset 0px 1px 0 ${Colors.KeylineGray};\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  width: 100%;\n  margin: 0;\n  height: ${SECTION_HEADER_HEIGHT}px;\n  text-align: left;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  :hover {\n    background-color: ${Colors.Gray100};\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst RepoName = styled.span`\n  font-weight: 600;\n`;\n\nconst RepoLocation = styled.span`\n  font-weight: 400;\n  color: ${Colors.Gray700};\n`;\n","import {Box, Colors, FontFamily, Mono, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\nimport {RunStatus} from '../types/globalTypes';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunTimeFragment';\n\nconst RUN_STATUS_COLORS = {\n  QUEUED: Colors.Blue500,\n  NOT_STARTED: Colors.Blue500,\n  STARTING: Colors.Blue500,\n  MANAGED: Colors.Blue500,\n  STARTED: Colors.Blue500,\n  SUCCESS: Colors.Green500,\n  FAILURE: Colors.Red500,\n  CANCELING: Colors.Red500,\n  CANCELED: Colors.Red500,\n};\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.runId}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.runId}\n            runId={run.runId}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.runId}`}>\n            <Mono style={{fontSize: '14px'}}>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}} padding={{top: 2}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.KeylineGray};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.Dark};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  font-size: 12px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {useQuery} from '@apollo/client';\nimport {CursorPaginationProps} from '@dagster-io/ui';\nimport {DocumentNode} from 'graphql';\nimport * as React from 'react';\n\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\ninterface CursorPaginationQueryVariables {\n  cursor?: string | null;\n  limit?: number | null;\n}\n\n/**\n * This is a React hook that makes it easier to build paginated list views based on a GraphQL\n * query. It is intended to be used in place of Apollo's `useQuery` and assumes that the query\n * takes at least `cursor` and `limit` variables. It manages those two variables internally,\n * and you can pass additional variables via the options.\n *\n * The current pagination \"cursor\" is saved to the URL query string, which allows the user to\n * navigate \"back\" in their browser history to move to previous pages.\n *\n * The returned paginationProps expose methods for moving to the next / previous page and are\n * used by <CursorPaginationControls /> to render the pagination buttons.\n */\nexport function useCursorPaginatedQuery<T, TVars extends CursorPaginationQueryVariables>(options: {\n  query: DocumentNode;\n  nextCursorForResult: (result: T) => string | undefined;\n  variables: Omit<Omit<TVars, 'cusor'>, 'limit'>;\n  pageSize: number;\n  getResultArray: (result: T | undefined) => any[];\n}) {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = useQueryPersistedState<string | undefined>({queryKey: 'cursor'});\n\n  const queryVars: any = {\n    ...options.variables,\n    cursor,\n    limit: options.pageSize + 1,\n  };\n\n  const queryResult = useQuery<T, TVars>(options.query, {\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    variables: queryVars,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const resultArray = options.getResultArray(queryResult.data);\n  const paginationProps: CursorPaginationProps = {\n    hasPrevCursor: !!cursor,\n    hasNextCursor: resultArray.length === options.pageSize + 1,\n    popCursor: () => {\n      const nextStack = [...cursorStack];\n      setCursor(nextStack.pop());\n      setCursorStack(nextStack);\n    },\n    advanceCursor: () => {\n      if (cursor) {\n        setCursorStack((current) => [...current, cursor]);\n      }\n      const nextCursor = queryResult.data && options.nextCursorForResult(queryResult.data);\n      if (!nextCursor) {\n        return;\n      }\n      setCursor(nextCursor);\n    },\n    reset: () => {\n      setCursorStack([]);\n      setCursor(undefined);\n    },\n  };\n\n  return {queryResult, paginationProps};\n}\n","import {useMutation} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {showLaunchError} from '../launchpad/showLaunchError';\nimport {useRepositoryForRun} from '../workspace/useRepositoryForRun';\n\nimport {\n  getReexecutionVariables,\n  handleLaunchResult,\n  LAUNCH_PIPELINE_REEXECUTION_MUTATION,\n  ReExecutionStyle,\n} from './RunUtils';\nimport {\n  LaunchPipelineReexecution,\n  LaunchPipelineReexecutionVariables,\n} from './types/LaunchPipelineReexecution';\nimport {RunFragment} from './types/RunFragment';\n\nexport const useJobReExecution = (run: RunFragment | undefined | null) => {\n  const history = useHistory();\n  const [launchPipelineReexecution] = useMutation<\n    LaunchPipelineReexecution,\n    LaunchPipelineReexecutionVariables\n  >(LAUNCH_PIPELINE_REEXECUTION_MUTATION);\n  const repoMatch = useRepositoryForRun(run);\n\n  return React.useCallback(\n    async (style: ReExecutionStyle) => {\n      if (!run || !run.pipelineSnapshotId || !repoMatch) {\n        return;\n      }\n\n      const variables = getReexecutionVariables({\n        run,\n        style,\n        repositoryLocationName: repoMatch.match.repositoryLocation.name,\n        repositoryName: repoMatch.match.repository.name,\n      });\n\n      try {\n        const result = await launchPipelineReexecution({variables});\n        handleLaunchResult(run.pipelineName, result.data?.launchPipelineReexecution, history, {\n          preserveQuerystring: true,\n          behavior: 'open',\n        });\n      } catch (error) {\n        showLaunchError(error as Error);\n      }\n    },\n    [history, launchPipelineReexecution, repoMatch, run],\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {ButtonLink, Colors, Group, Caption} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assertUnreachable} from '../app/Util';\nimport {StatusTable} from '../instigation/InstigationUtils';\nimport {RunStatus} from '../types/globalTypes';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ScheduleFragment} from './types/ScheduleFragment';\nimport {\n  SchedulePartitionStatusFragment,\n  SchedulePartitionStatusFragment_partitionSet_partitionStatusesOrError_PartitionStatuses_results as Partition,\n} from './types/SchedulePartitionStatusFragment';\nimport {\n  SchedulePartitionStatusQuery,\n  SchedulePartitionStatusQueryVariables,\n} from './types/SchedulePartitionStatusQuery';\n\nconst RUN_STATUSES = ['Succeeded', 'Failed', 'Missing', 'Pending'];\n\nconst calculateDisplayStatus = (partition: Partition) => {\n  switch (partition.runStatus) {\n    case null:\n      return 'Missing';\n    case RunStatus.SUCCESS:\n      return 'Succeeded';\n    case RunStatus.FAILURE:\n    case RunStatus.CANCELED:\n    case RunStatus.CANCELING:\n      return 'Failed';\n    case RunStatus.MANAGED:\n    case RunStatus.QUEUED:\n    case RunStatus.NOT_STARTED:\n    case RunStatus.STARTED:\n    case RunStatus.STARTING:\n      return 'Pending';\n    default:\n      return assertUnreachable(partition.runStatus);\n  }\n};\n\nexport const SchedulePartitionStatus: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleFragment;\n}> = React.memo(({repoAddress, schedule}) => {\n  const repo = useRepository(repoAddress);\n  const {name: scheduleName, partitionSet, pipelineName} = schedule;\n\n  const partitionSetName = partitionSet?.name;\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const partitionPath = React.useMemo(() => {\n    const query = partitionSetName\n      ? qs.stringify(\n          {\n            partitionSet: partitionSetName,\n          },\n          {addQueryPrefix: true},\n        )\n      : '';\n    return `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/partitions${query}`;\n  }, [partitionSetName, isJob, pipelineName]);\n\n  const partitionURL = workspacePathFromAddress(repoAddress, partitionPath);\n\n  const [retrievePartitionStatus, {data, loading}] = useLazyQuery<\n    SchedulePartitionStatusQuery,\n    SchedulePartitionStatusQueryVariables\n  >(SCHEDULE_PARTITION_STATUS_QUERY, {\n    variables: {\n      scheduleSelector: {\n        scheduleName,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n    },\n  });\n\n  const onClick = React.useCallback(() => retrievePartitionStatus(), [retrievePartitionStatus]);\n\n  const loadable = () => {\n    if (loading) {\n      return <Caption style={{color: Colors.Gray400}}>Loading…</Caption>;\n    }\n\n    if (!data) {\n      return (\n        <ButtonLink onClick={onClick}>\n          <Caption>Show coverage</Caption>\n        </ButtonLink>\n      );\n    }\n\n    const partitionFragment = data.scheduleOrError;\n    if (partitionFragment.__typename === 'Schedule') {\n      return (\n        <RetrievedSchedulePartitionStatus\n          schedule={partitionFragment}\n          partitionURL={partitionURL}\n        />\n      );\n    }\n\n    return <Caption style={{color: Colors.Red700}}>Partition set not found!</Caption>;\n  };\n\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Link to={partitionURL}>{partitionSetName}</Link>\n      {loadable()}\n    </Group>\n  );\n});\n\nconst RetrievedSchedulePartitionStatus: React.FC<{\n  schedule: SchedulePartitionStatusFragment;\n  partitionURL: string;\n}> = ({schedule, partitionURL}) => {\n  const {partitionSet} = schedule;\n\n  if (!partitionSet || partitionSet.partitionStatusesOrError.__typename !== 'PartitionStatuses') {\n    return <span style={{color: Colors.Gray300}}>None</span>;\n  }\n\n  const partitions = partitionSet.partitionStatusesOrError.results;\n  const partitionsByType = {};\n  partitions.forEach((partition) => {\n    const displayStatus = calculateDisplayStatus(partition);\n    partitionsByType[displayStatus] = [...(partitionsByType[displayStatus] || []), partition];\n  });\n\n  return (\n    <StatusTable>\n      <tbody>\n        {RUN_STATUSES.map((status) => {\n          if (!(status in partitionsByType)) {\n            return null;\n          }\n          return (\n            <tr key={status}>\n              <td style={{width: '100px'}}>{status}</td>\n              <td>\n                {status === 'Failed' || status === 'Missing' ? (\n                  <Link\n                    to={`${partitionURL}?showFailuresAndGapsOnly=true`}\n                    style={{color: Colors.Gray900}}\n                  >\n                    {partitionsByType[status].length}\n                  </Link>\n                ) : (\n                  partitionsByType[status].length\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </StatusTable>\n  );\n};\n\nconst SCHEDULE_PARTITION_STATUS_FRAGMENT = gql`\n  fragment SchedulePartitionStatusFragment on Schedule {\n    id\n    mode\n    pipelineName\n    partitionSet {\n      id\n      name\n      partitionStatusesOrError {\n        ... on PartitionStatuses {\n          results {\n            id\n            partitionName\n            runStatus\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst SCHEDULE_PARTITION_STATUS_QUERY = gql`\n  query SchedulePartitionStatusQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...SchedulePartitionStatusFragment\n      }\n    }\n  }\n  ${SCHEDULE_PARTITION_STATUS_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonHealthFragment';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths) {\n      const schedulerHealth = schedulerHealths[0];\n      healthy = !!(schedulerHealth.required && schedulerHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {Box, Button, Colors, Icon, Menu, Popover, Table, Tag, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {TickTag} from '../instigation/InstigationTick';\nimport {InstigatedRunStatus} from '../instigation/InstigationUtils';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {MenuLink} from '../ui/MenuLink';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {SchedulePartitionStatus} from './SchedulePartitionStatus';\nimport {ScheduleSwitch} from './ScheduleSwitch';\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {humanCronString} from './humanCronString';\nimport {ScheduleFragment} from './types/ScheduleFragment';\n\nexport const SchedulesTable: React.FC<{\n  schedules: ScheduleFragment[];\n  repoAddress: RepoAddress;\n}> = ({repoAddress, schedules}) => {\n  const lastTick = 'Status of the last tick: One of `Started`, `Skipped`, `Requested`, `Failed`';\n  const lastRun = 'The status of the last run requested by this schedule';\n  const partitionStatus = (\n    <div style={{width: 300}}>\n      <p>The status of each partition in the partition set associated with this schedule.</p>\n      <p>\n        Partitions have a `Success` status if the last run for that partition completed\n        successfully.\n      </p>\n      <p>Partititons have a `Missing` status if no run has been executed for that partition.</p>\n    </div>\n  );\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '60px'}}></th>\n          <th>Schedule name</th>\n          <th style={{width: '15%'}}>Schedule</th>\n          <th style={{width: '10%'}}>Next tick</th>\n          <th style={{width: '10%'}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Last tick\n              <Tooltip position=\"top\" content={lastTick}>\n                <Icon name=\"info\" color={Colors.Gray400} />\n              </Tooltip>\n            </Box>\n          </th>\n          <th style={{width: 130}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Last run\n              <Tooltip position=\"top\" content={lastRun}>\n                <Icon name=\"info\" color={Colors.Gray400} />\n              </Tooltip>\n            </Box>\n          </th>\n          <th style={{width: '30%'}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Partition Set\n              <Tooltip position=\"top\" content={partitionStatus}>\n                <Icon name=\"info\" color={Colors.Gray400} />\n              </Tooltip>\n            </Box>\n          </th>\n          <th style={{width: 80}} />\n        </tr>\n      </thead>\n      <tbody>\n        {schedules.map((schedule) => (\n          <ScheduleRow repoAddress={repoAddress} schedule={schedule} key={schedule.name} />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp3-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n\nconst ScheduleRow: React.FC<{\n  schedule: ScheduleFragment;\n  repoAddress: RepoAddress;\n}> = (props) => {\n  const {repoAddress, schedule} = props;\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, schedule.pipelineName);\n\n  const {\n    name,\n    cronSchedule,\n    executionTimezone,\n    futureTicks,\n    pipelineName,\n    scheduleState,\n  } = schedule;\n  const {status, ticks, runningCount: runningScheduleCount} = scheduleState;\n\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n\n  return (\n    <tr key={name}>\n      <td>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <ScheduleSwitch repoAddress={repoAddress} schedule={schedule} />\n          {errorDisplay(status, runningScheduleCount)}\n        </Box>\n      </td>\n      <td>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <span style={{fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>{name}</Link>\n          </span>\n          <PipelineReference\n            showIcon\n            size=\"small\"\n            pipelineName={pipelineName}\n            pipelineHrefContext={repoAddress}\n            isJob={isJob}\n          />\n        </Box>\n      </td>\n      <td>\n        {cronSchedule ? (\n          <Tooltip position=\"bottom\" content={cronSchedule}>\n            <span>{humanCronString(cronSchedule, executionTimezone || 'UTC')}</span>\n          </Tooltip>\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        {futureTicks.results.length && status === InstigationStatus.RUNNING ? (\n          <TimestampDisplay\n            timestamp={futureTicks.results[0].timestamp}\n            timezone={executionTimezone}\n            timeFormat={{showSeconds: false, showTimezone: true}}\n          />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        {schedule.partitionSet ? (\n          <SchedulePartitionStatus schedule={schedule} repoAddress={repoAddress} />\n        ) : (\n          <div style={{color: Colors.Gray300}}>None</div>\n        )}\n      </td>\n      <td>\n        {schedule.partitionSet ? (\n          <Popover\n            content={\n              <Menu>\n                <MenuLink\n                  text=\"View Partition History...\"\n                  icon=\"dynamic_feed\"\n                  target=\"_blank\"\n                  to={workspacePathFromAddress(\n                    repoAddress,\n                    `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/partitions`,\n                  )}\n                />\n                <MenuLink\n                  text=\"Launch Partition Backfill...\"\n                  icon=\"add_circle\"\n                  target=\"_blank\"\n                  to={workspacePathFromAddress(\n                    repoAddress,\n                    `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/partitions`,\n                  )}\n                />\n              </Menu>\n            }\n            position=\"bottom-left\"\n          >\n            <Button icon={<Icon name=\"expand_more\" />} />\n          </Popover>\n        ) : null}\n      </td>\n    </tr>\n  );\n};\n","import {gql, useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {TextArea} from '@blueprintjs/core';\nimport {ButtonLink, Button, Colors, DialogBody, DialogFooter, Dialog, Group} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport 'chartjs-adapter-date-fns';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {SensorSelector} from '../types/globalTypes';\n\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from './types/SetSensorCursorMutation';\n\nexport const EditCursorDialog: React.FC<{\n  cursor: string;\n  sensorSelector: SensorSelector;\n  onClose: () => void;\n}> = ({sensorSelector, cursor, onClose}) => {\n  const [cursorValue, setCursorValue] = React.useState(cursor);\n  const [isSaving, setIsSaving] = React.useState(false);\n  const [requestSet] = useMutation<SetSensorCursorMutation, SetSensorCursorMutationVariables>(\n    SET_CURSOR_MUTATION,\n  );\n\n  const onSave = async () => {\n    setIsSaving(true);\n    const {data} = await requestSet({\n      variables: {sensorSelector, cursor: cursorValue},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      SharedToaster.show({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      SharedToaster.show({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.White}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog\n      isOpen={true}\n      onClose={onClose}\n      style={{\n        width: '50vw',\n      }}\n      title={`Edit ${sensorSelector.sensorName} cursor`}\n    >\n      <DialogBody>\n        <TextArea\n          value={cursorValue}\n          onChange={(e) => setCursorValue(e.target.value)}\n          style={{width: '100%'}}\n        />\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button intent=\"primary\" onClick={onSave} disabled={isSaving}>\n          Set cursor value\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst SET_CURSOR_MUTATION = gql`\n  mutation SetSensorCursorMutation($sensorSelector: SensorSelector!, $cursor: String) {\n    setSensorCursor(sensorSelector: $sensorSelector, cursor: $cursor) {\n      ... on Sensor {\n        id\n        sensorState {\n          id\n          status\n          typeSpecificData {\n            ... on SensorData {\n              lastCursor\n            }\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Box,\n  Button,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Heading,\n  FontFamily,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorFragment} from './types/SensorFragment';\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  minIntervalSeconds = Math.max(30, minIntervalSeconds);\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n}> = ({sensor, repoAddress, daemonHealth, refreshState}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    targets,\n    metadata,\n  } = sensor;\n\n  const [isCursorEditing, setCursorEditing] = React.useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n  const repo = useRepository(repoAddress);\n  const pipelinesAndJobs = repo?.repository.pipelines;\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const targetCount = targets?.length || 0;\n\n  const targetNames = React.useMemo(\n    () => new Set((targets || []).map((target) => target.pipelineName)),\n    [targets],\n  );\n\n  const anyPipelines = React.useMemo(() => {\n    return (pipelinesAndJobs || []).some(\n      (pipelineOrJob) => !pipelineOrJob.isJob && targetNames.has(pipelineOrJob.name),\n    );\n  }, [pipelinesAndJobs, targetNames]);\n\n  const pipelineOrJobLabel = React.useMemo(() => {\n    if (anyPipelines) {\n      return targetCount > 1 ? 'Jobs / Pipelines' : 'Pipeline';\n    }\n    return targetCount > 1 ? 'Jobs' : 'Job';\n  }, [anyPipelines, targetCount]);\n\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n          </Box>\n        }\n        icon=\"sensors\"\n        tags={\n          <>\n            <Tag icon=\"sensors\">\n              Sensor in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {sensor.nextTick && daemonHealth && status === InstigationStatus.RUNNING ? (\n              <Tag icon=\"timer\">\n                Next tick: <TimestampDisplay timestamp={sensor.nextTick.timestamp} />\n              </Tag>\n            ) : null}\n          </>\n        }\n        right={\n          <Box margin={{top: 4}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n          </Box>\n        }\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} />\n                    <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.targets && sensor.targets.length ? (\n            <tr>\n              <td>{pipelineOrJobLabel}</td>\n              <td>\n                <Group direction=\"column\" spacing={2}>\n                  {sensor.targets.map((target) =>\n                    target.pipelineName ? (\n                      <PipelineReference\n                        key={target.pipelineName}\n                        pipelineName={target.pipelineName}\n                        pipelineHrefContext={repoAddress}\n                        isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                      />\n                    ) : null,\n                  )}\n                </Group>\n              </td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Cursor</td>\n            <td>\n              {isCursorEditing ? (\n                <EditCursorDialog\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              ) : null}\n              <Box flex={{direction: 'row', alignItems: 'center'}}>\n                <Box style={{fontFamily: FontFamily.monospace, marginRight: 10}}>\n                  {cursor ? cursor : 'None'}\n                </Box>\n                <Button onClick={() => setCursorEditing(true)}>Edit</Button>\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored Assets</td>\n              <td>\n                <Box flex={{direction: 'column', gap: 2}}>\n                  {metadata.assetKeys.map((key) => (\n                    <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                  ))}\n                </Box>\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonHealthFragment';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SensorInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const sensorHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SENSOR',\n    );\n    if (sensorHealths) {\n      const sensorHealth = sensorHealths[0];\n      healthy = !!(sensorHealth.required && sensorHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The sensor daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a\n                href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {Box, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const HeaderCell: React.FC = ({children}) => (\n  <Box\n    padding={{vertical: 8, horizontal: 24}}\n    border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n    style={{whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden'}}\n  >\n    {children}\n  </Box>\n);\n\nexport const RowCell: React.FC = ({children}) => (\n  <Box\n    padding={{horizontal: 24, vertical: 12}}\n    flex={{direction: 'column', justifyContent: 'flex-start'}}\n    style={{color: Colors.Gray500, overflow: 'hidden'}}\n    border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n  >\n    {children}\n  </Box>\n);\n\nexport const Container = styled.div`\n  height: 100%;\n  overflow: auto;\n`;\n\ntype InnerProps = {\n  $totalHeight: number;\n};\n\nexport const Inner = styled.div.attrs<InnerProps>(({$totalHeight}) => ({\n  style: {\n    height: `${$totalHeight}px`,\n  },\n}))<InnerProps>`\n  position: relative;\n  width: 100%;\n`;\n\ntype RowProps = {$height: number; $start: number};\n\nexport const Row = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Button, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissions} from '../app/Permissions';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunFragments} from '../runs/RunFragments';\nimport {RunTimeFragment} from '../runs/types/RunTimeFragment';\nimport {useJobReExecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {RunReExecutionQuery} from './types/RunReExecutionQuery';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const {canLaunchPipelineReexecution} = usePermissions();\n  const [fetchHasExecutionPlan, {data}] = useLazyQuery<RunReExecutionQuery>(RUN_RE_EXECUTION_QUERY);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n\n  const fetchIfPossible = React.useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const onLaunch = useJobReExecution(run);\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => onLaunch({type: 'all'})}\n      disabled={!canLaunchPipelineReexecution.enabled || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => onLaunch({type: 'from-failure'})}\n      disabled={!canLaunchPipelineReexecution.enabled || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <Popover\n      onOpened={() => fetchIfPossible()}\n      content={\n        <Menu>\n          <MenuLink\n            to={workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: job.name,\n              isJob: job.isJob,\n            })}\n            icon=\"job\"\n            text=\"View job\"\n          />\n          <MenuLink\n            to={workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: job.name,\n              isJob: job.isJob,\n              path: '/runs',\n            })}\n            icon=\"checklist\"\n            text=\"View all recent runs\"\n          />\n          {canLaunchPipelineReexecution.enabled ? (\n            reExecuteAllItem\n          ) : (\n            <Tooltip content={canLaunchPipelineReexecution.disabledReason} display=\"block\">\n              {reExecuteAllItem}\n            </Tooltip>\n          )}\n          {canLaunchPipelineReexecution.enabled ? (\n            reExecuteFromFailureItem\n          ) : (\n            <Tooltip content={canLaunchPipelineReexecution.disabledReason} display=\"block\">\n              {reExecuteFromFailureItem}\n            </Tooltip>\n          )}\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunFragment\n      }\n    }\n  }\n\n  ${RunFragments.RunFragment}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/SingleJobQuery';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const {schedules, sensors} = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const {schedules, sensors} = data.pipelineOrError;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [data]);\n\n  const latestRuns = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const runs = data.pipelineOrError.runs;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>\n            {data?.pipelineOrError.__typename === 'Pipeline'\n              ? data.pipelineOrError.description\n              : ''}\n          </CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n              {/* {schedules.length ? <NextTick schedules={schedules} /> : null} */}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu job={{isJob, name, runs: latestRuns}} repoAddress={repoAddress} />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp3-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Caption,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {ScheduleSwitch, SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleScheduleQuery, SingleScheduleQueryVariables} from './types/SingleScheduleQuery';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '76px 1fr 1fr 148px 180px 80px';\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {name, repoAddress, start, height} = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySchedule, queryResult] = useLazyQuery<\n    SingleScheduleQuery,\n    SingleScheduleQueryVariables\n  >(SINGLE_SCHEDULE_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useDelayedRowQuery(querySchedule);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const cronString = scheduleData\n    ? humanCronString(scheduleData.cronSchedule, scheduleData.executionTimezone || 'UTC')\n    : '';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {scheduleData ? (\n              <Caption>\n                <PipelineReference\n                  showIcon\n                  size=\"small\"\n                  pipelineName={scheduleData.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={isJob}\n                />\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <ScheduleStringContainer style={{maxWidth: '100%'}}>\n                <Tooltip position=\"top-left\" content={scheduleData.cronSchedule} display=\"block\">\n                  <div\n                    style={{\n                      color: Colors.Dark,\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                    title={cronString}\n                  >\n                    {cronString}\n                  </div>\n                </Tooltip>\n              </ScheduleStringContainer>\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState.ticks.length ? (\n            <div>\n              <TickTag\n                tick={scheduleData.scheduleState.ticks[0]}\n                instigationType={InstigationType.SCHEDULE}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs.length > 0 ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell />\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell />\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleStringContainer = styled.div`\n  max-width: 100%;\n\n  .bp3-popover2-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n\nconst SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SensorSwitch, SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {InstigationType} from '../types/globalTypes';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/SingleSensorQuery';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '76px 1.5fr 1fr 120px 148px 180px';\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {name, repoAddress, start, height} = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySensor, queryResult] = useLazyQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(querySensor);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.Gray500,\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n            {sensorData?.targets && sensorData.targets.length ? (\n              <Box flex={{direction: 'column', gap: 2}}>\n                {sensorData.targets.map((target) => (\n                  <PipelineReference\n                    key={target.pipelineName}\n                    showIcon\n                    size=\"small\"\n                    pipelineName={target.pipelineName}\n                    pipelineHrefContext={repoAddress}\n                    isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                  />\n                ))}\n              </Box>\n            ) : null}\n            {sensorData?.metadata.assetKeys && sensorData.metadata.assetKeys.length ? (\n              <Box flex={{direction: 'column', gap: 2}}>\n                {sensorData.metadata.assetKeys.map((key) => (\n                  <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                ))}\n              </Box>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.Dark}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState.ticks.length ? (\n            <div>\n              <TickTag\n                tick={sensorData.sensorState.ticks[0]}\n                instigationType={InstigationType.SENSOR}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs.length > 0 ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell />\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Job / Asset</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${SENSOR_SWITCH_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {LazyQueryExecFunction, QueryResult} from '@apollo/client';\nimport {Caption, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {Row} from '../ui/VirtualizedTable';\n\nimport {RepoAddress} from './types';\n\nexport const RepoRow: React.FC<{\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n  showLocation: boolean;\n  rightElement: React.ReactNode;\n  expanded: boolean;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}> = ({\n  repoAddress,\n  height,\n  start,\n  expanded,\n  onToggle,\n  onToggleAll,\n  showLocation,\n  rightElement,\n}) => {\n  return (\n    <Row $height={height} $start={start}>\n      <RepoSectionHeader\n        repoName={repoAddress.name}\n        repoLocation={repoAddress.location}\n        expanded={expanded}\n        onClick={(e: React.MouseEvent) =>\n          e.getModifierState('Shift') ? onToggleAll(!expanded) : onToggle(repoAddress)\n        }\n        showLocation={showLocation}\n        rightElement={rightElement}\n      />\n    </Row>\n  );\n};\n\nexport const LoadingOrNone: React.FC<{queryResult: QueryResult<any, any>}> = ({queryResult}) => {\n  const {called, loading, data} = queryResult;\n  return (\n    <div style={{color: Colors.Gray500}}>{!called || (loading && !data) ? 'Loading' : 'None'}</div>\n  );\n};\n\nexport const CaptionText: React.FC = ({children}) => {\n  return (\n    <CaptionTextContainer>\n      <Caption>{children}</Caption>\n    </CaptionTextContainer>\n  );\n};\n\nconst CaptionTextContainer = styled.div`\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${Caption} {\n    color: ${Colors.Gray500};\n    white-space: nowrap;\n  }\n`;\n\nconst JOB_QUERY_DELAY = 100;\n\nexport const useDelayedRowQuery = <Q, V>(lazyQueryFn: LazyQueryExecFunction<Q, V>) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      lazyQueryFn();\n    }, JOB_QUERY_DELAY);\n\n    return () => clearTimeout(timer);\n  }, [lazyQueryFn]);\n};\n"],"names":["AssetLink","props","path","icon","url","isGroup","textStyle","linkUrl","assetDetailsPathForKey","assetPath","reduce","accum","elem","ii","join","flex","direction","alignItems","display","style","maxWidth","margin","right","top","name","color","Colors","to","overflow","wordBreak","text","BackfillPartitionsRequestedDialog","backfill","onClose","Dialog","isOpen","title","fontSize","fontFamily","FontFamily","backfillId","Box","gap","maxHeight","overflowY","partitionNames","map","partitionName","topBorder","Button","onClick","BackfillStepStatusDialog","partitionSet","width","repoAddress","buildRepoAddress","repositoryOrigin","repositoryName","repositoryLocationName","BackfillStepStatusDialogContent","content","React","pageSize","setPageSize","offset","setOffset","runsFilter","token","value","partitions","usePartitionStepQuery","partitionSetName","partitionTagName","DagsterTag","repositorySelector","repoAddressToSelector","jobName","pipelineName","skipQuery","BackfillTerminationDialog","onComplete","useMutation","CANCEL_BACKFILL_MUTATION","cancelBackfill","isSubmitting","setIsSubmitting","unfinishedMap","partitionStatuses","results","filter","partition","runStatus","runId","cancelableStatuses","numUnscheduled","numPartitions","numRequested","cancel","variables","status","BulkActionStatus","intent","disabled","TerminationDialog","Object","keys","length","selectedRuns","gql","PYTHON_ERROR_FRAGMENT","BackfillTable","showBackfillTarget","allPartitions","backfills","refetch","terminationBackfill","setTerminationBackfill","stepStatusBackfill","setStepStatusBackfill","partitionsRequestedBackfill","setPartitionsRequestedBackfill","RESUME_BACKFILL_MUTATION","resumeBackfill","canCancelPartitionBackfill","usePermissions","candidateId","enabled","resume","data","resumePartitionBackfill","__typename","SharedToaster","message","Group","spacing","error","action","showCustomAlert","body","PythonErrorInfo","Table","$monospaceFont","BackfillRow","onTerminateBackfill","onResumeBackfill","onShowStepStatus","onShowPartitionsRequested","undefined","history","useHistory","canLaunchPartitionBackfill","runsUrl","runsPathWithFilters","canCancelRuns","some","r","RunStatus","lineHeight","timestamp","TimestampDisplay","BackfillTarget","BackfillRequested","onExpand","BackfillStatus","BackfillRunStatus","Popover","Menu","push","position","Icon","TagButton","Tag","interactive","PartitionStatus","partitionStateForKey","PartitionState","small","hideStatusTooltip","bottom","statuses","inProgressStatuses","states","fromEntries","s","runStatusToPartitionState","key","splitPartitions","entry","find","assetSelection","repo","useRepository","fontWeight","isJob","isThisThingAJob","isHiddenAssetJob","isHiddenAssetGroupJob","repoLink","workspacePathFromAddress","repoAddressAsHumanString","AssetKeyTagCollection","assetKeys","modalTitle","workspacePipelinePath","repoName","repoLocation","encodeURIComponent","PipelineReference","showIcon","size","pipelineHrefContext","location","styled","BACKFILL_TABLE_FRAGMENT","LastRunSummary","run","showHover","showButton","showSummary","justifyContent","tagElement","interactionKind","hoverOpenDelay","tag","failedStatuses","id","A","StepSummaryForRun","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","pipelineRunOrError","relevantSteps","stepStats","step","StepEventStatus","stepCount","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","stepKey","TickTag","tick","instigationType","open","setOpen","InstigationTickStatus","runIds","underline","RunList","runKeys","skipReason","targetTagName","showError","InstigationType","LinkButton","minimal","marginLeft","assertUnreachable","LAUNCHED_RUN_LIST_QUERY","loading","padding","purpose","pipelineRunsOrError","description","runs","FailedRunList","originRunIds","border","side","TICK_TAG_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","InstigatedRunStatus","instigationState","RunStatusLink","target","rel","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","UnloadableSensors","sensorStates","showSubheading","vertical","horizontal","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","scheduleState","ScheduleStateRow","selectorId","ticks","canStopSensor","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","toggleOffInFlight","confirm","useConfirmation","onChangeSwitch","InstigationStatus","jobOriginId","jobSelectorId","lacksPermission","latestTick","element","format","checked","onChange","disabledReason","checkbox","instigatorState","canStopRunningSchedule","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","whiteSpace","humanCronString","RepositoryLink","showRefresh","canReloadRepositoryLocation","repoString","marginRight","RepositoryName","tryReload","reloading","ReloadTooltip","StyledButton","Link","Tooltip","IconWrapper","ScheduleOrSensorTag","schedules","sensors","showSwitch","scheduleCount","sensorCount","buttonText","MatchingSchedule","schedule","MatchingSensor","sensor","executionTimezone","running","textOverflow","placement","PartitionRunList","PARTITION_RUN_LIST_QUERY","tags","Spinner","NonIdealState","RunTable","getVisibleItemCount","viewportWidth","ceil","BOX_SIZE","PartitionPerAssetStatus","assetHealth","rangeDimension","rangeDimensionIdx","assetQueryItems","rest","healthByAssetKey","keyBy","a","tokenForAssetKey","assetKey","layoutBoxesWithRangeDimension","buildLayout","nodes","mode","GanttChartMode","boxes","b","node","dimensions","stepRows","box","x","totalFailurePercent","finalFailurePercent","partitionColumns","partitionKeys","partitionKey","idx","runsLoaded","steps","unix","partitionStateToStatusSquareColor","stateForSingleDimension","PartitionStepStatus","showLatestRun","state","PartitionPerOpStatus","pipelineSelector","pipeline","PARTITION_STEP_STATUS_PIPELINE_QUERY","solidHandles","pipelineSnapshotOrError","useMatrixData","stepQuery","useViewport","viewport","containerProps","hovered","setHovered","focused","setFocused","sortPartitionSteps","stepsByName","forEach","stepRow","visibleCount","visibleStart","max","visibleEnd","visibleColumns","slice","minUnix","Date","now","maxUnix","min","timeboundsOfPartitions","topLabelHeight","topLabelHeightForLabels","p","PartitionRunMatrixContainer","autoFocus","floating","flexShrink","height","paddingLeft","Divider","stepName","PagerControl","$direction","zIndex","$height","label","textAlign","PartitionSquare","PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT","TOOLTIP_STYLE","JSON","stringify","left","squareStatus","opened","setOpened","toLowerCase","className","onMouseEnter","onMouseLeave","onOpening","onClosed","MenuLink","linkToRunEvent","MISSING_STEP_STATUSES","Set","getStartTime","startTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","RegExp","match","inputs","cachedMatrixData","current","shallowCompareKeys","result","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","layout","options","partitionsByName","sort","blankState","previousRunStatus","lastRun","lastRunStepStatus","stats","has","currRunStatus","partitionsWithARun","totalFailures","includes","finalFailures","endsWith","round","showFailuresAndGapsOnly","splice","every","buildMatrixData","all","PARTITION_MATRIX_STEP_RUN_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","InitialDataState","loadingCursorIdx","client","useApolloClient","version","dataState","setDataState","_serializedRunTags","split","v","runTags","parse","stopIdx","nextCursorIdx","sliceNames","Promise","partitionSetTag","partitionTag","runTagsFilter","fetchRunsForFilter","limit","fetched","concat","timer","setInterval","clearInterval","recent","pending","relevant","t","updated","o","byName","assemblePartitions","fetchPolicy","PARTITION_STEP_LOADER_QUERY","SECTION_HEADER_HEIGHT","RepoSectionHeader","expanded","showLocation","rightElement","isDunderRepoName","DUNDER_REPO_NAME","SectionHeaderButton","$open","RepoName","RepoLocation","RUN_STATUS_COLORS","QUEUED","NOT_STARTED","STARTING","MANAGED","STARTED","SUCCESS","FAILURE","CANCELING","CANCELED","RunStatusPez","opacity","Pez","$color","$opacity","RunStatusPezList","fade","count","RunStatusOverlay","OverlayContainer","OverlayTitle","RunRow","SummaryContainer","useCursorPaginatedQuery","cursorStack","setCursorStack","useQueryPersistedState","queryKey","cursor","setCursor","queryVars","queryResult","partialRefetch","notifyOnNetworkStatusChange","resultArray","getResultArray","paginationProps","hasPrevCursor","hasNextCursor","popCursor","nextStack","pop","advanceCursor","nextCursor","nextCursorForResult","reset","useJobReExecution","LAUNCH_PIPELINE_REEXECUTION_MUTATION","launchPipelineReexecution","repoMatch","useRepositoryForRun","pipelineSnapshotId","getReexecutionVariables","repositoryLocation","repository","handleLaunchResult","preserveQuerystring","behavior","showLaunchError","RUN_STATUSES","SchedulePartitionStatus","scheduleName","partitionPath","partitionURL","useLazyQuery","SCHEDULE_PARTITION_STATUS_QUERY","scheduleSelector","retrievePartitionStatus","partitionFragment","scheduleOrError","RetrievedSchedulePartitionStatus","loadable","partitionStatusesOrError","partitionsByType","displayStatus","calculateDisplayStatus","SCHEDULE_PARTITION_STATUS_FRAGMENT","SchedulerInfo","daemonHealth","boxProps","healthy","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","href","SchedulesTable","partitionStatus","ScheduleRow","errorDisplay","runningScheduleCount","errors","popoverClassName","index","fill","futureTicks","runningCount","timezone","timeFormat","showSeconds","showTimezone","EditCursorDialog","sensorSelector","cursorValue","setCursorValue","isSaving","setIsSaving","SET_CURSOR_MUTATION","requestSet","onSave","setSensorCursor","ButtonLink","sensorName","e","humanizeSensorInterval","minIntervalSeconds","SensorDetails","refreshState","targets","metadata","isCursorEditing","setCursorEditing","pipelinesAndJobs","pipelines","targetCount","targetNames","anyPipelines","pipelineOrJob","pipelineOrJobLabel","lastCursor","PageHeader","SensorSwitch","nextTick","QueryRefresh","MetadataTable","marginTop","SensorInfo","sensorHealths","sensorHealth","HeaderCell","children","RowCell","Container","Inner","$totalHeight","Row","$start","transform","JobMenu","job","canLaunchPipelineReexecution","RUN_RE_EXECUTION_QUERY","fetchHasExecutionPlan","fetchIfPossible","onLaunch","reExecuteAllItem","type","canRunAllSteps","reExecuteFromFailureItem","canRunFromFailure","onOpened","RunFragments","TEMPLATE_COLUMNS","VirtualizedJobRow","start","SINGLE_JOB_QUERY","selector","buildPipelineSelector","queryJob","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","pipelineOrError","latestRuns","RowGrid","MiddleTruncate","ScheduleSensorTagContainer","reverse","VirtualizedJobHeader","gridTemplateColumns","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","VirtualizedScheduleRow","SINGLE_SCHEDULE_QUERY","querySchedule","scheduleData","cronString","ScheduleStringContainer","VirtualizedScheduleHeader","VirtualizedSensorRow","SINGLE_SENSOR_QUERY","querySensor","sensorData","sensorOrError","VirtualizedSensorHeader","RepoRow","onToggle","onToggleAll","getModifierState","LoadingOrNone","called","CaptionText","CaptionTextContainer","Caption","lazyQueryFn","setTimeout","clearTimeout"],"sourceRoot":""}