{"version":3,"file":"static/js/126.7ab42698.chunk.js","mappings":"kTAkBaA,EAAmC,SAACC,GAAW,IAAD,EAClDC,EAA8BD,EAA9BC,YAAaC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,OAC3B,GAAoDC,EAAAA,EAAAA,MAA7CC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,2BACfC,EAAQL,EAAMM,IAAdD,KAEP,GAA6CE,EAAAA,EAAAA,MAAtCC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,iBAEzB,OACE,iCACE,SAAC,IAAD,CACEC,SAAS,eACTC,SACE,UAAC,KAAD,YACE,SAAC,IAAD,CAASA,QAAQ,mCAAmCC,UAAU,OAAOC,QAAQ,QAA7E,UACE,SAAC,KAAD,CACEC,KAAK,cACLC,KAAMP,GAAU,SAAC,IAAD,CAASQ,QAAQ,cAAiB,kBAClDC,UAAWd,GAA8BK,EACzCD,QAAS,SAACW,GAAD,OAAOX,EAAQ,CAACR,EAAMM,KAAMa,SAGzC,SAAC,IAAD,CACEJ,KAAK,gBACLK,GACErB,GAAW,UAAIC,EAAMqB,kBAAV,OAAI,EAAkBC,WAC7BC,EAAAA,EAAAA,IACExB,EADsB,wBAELC,EAAMqB,WAAWC,YAEpC,GAENJ,WAAU,OAAClB,QAAD,IAACA,GAAAA,EAAOqB,YAClBL,KAAK,iBAEP,SAAC,IAAD,CACED,KAAK,iBACLK,IAAII,EAAAA,EAAAA,GAAuB,CAACnB,KAAAA,GAAO,CAACoB,KAAM,UAAWC,aAAc,cACnER,WAAU,OAAClB,QAAD,IAACA,GAAAA,EAAOqB,YAClBL,KAAK,qBAEP,SAAC,IAAD,CACED,KAAK,uBACLK,IAAII,EAAAA,EAAAA,GAAuB,CAACnB,KAAAA,GAAO,CAACoB,KAAM,UAAWC,aAAc,aACnER,WAAU,OAAClB,QAAD,IAACA,GAAAA,EAAOqB,YAClBL,KAAK,oBAEP,SAAC,IAAD,CACED,KAAK,yBACLK,IAAII,EAAAA,EAAAA,GAAuB,CAACnB,KAAAA,GAAO,CAACoB,KAAM,UAAWC,aAAc,eACnER,WAAU,OAAClB,QAAD,IAACA,GAAAA,EAAOqB,YAClBL,KAAK,sBAEP,SAAC,KAAD,CACED,KAAK,wBACLC,KAAK,SACLE,UAAWjB,IAAWE,EAAcwB,QACpCC,OAAO,SACPpB,QAAS,kBAAML,EAAcwB,SAAW1B,GAAUA,EAAO,CAACD,UAhDlE,UAqDE,SAAC,KAAD,CAAQgB,MAAM,SAAC,KAAD,CAAMa,KAAK,oBAE1BnB,O,8NCzEMoB,EAAmC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAaC,GAAW,YAClEC,EAAcC,EAAAA,SAAc,WAChC,IAAMC,EAA0B,CAAC,CAACpB,KAAM,SAAUqB,KAAM,YAQxD,OANAL,EAAS1B,KAAKgC,QAAO,SAACC,EAAeC,GACnC,IAAMH,EAAI,UAAME,EAAN,YAAeE,mBAAmBD,IAE5C,OADAJ,EAAKM,KAAK,CAAC1B,KAAMwB,EAAMH,KAAAA,IAChBA,IACN,WAEID,IACN,CAACJ,EAAS1B,OAEb,OACE,SAAC,KAAD,QACEqC,OACE,SAAC,IAAD,CACEC,KAAM,CAACC,WAAY,SAAUC,IAAK,GAClCC,MAAO,CAACC,SAAU,QAASC,SAAU,SAAUC,aAAc,GAF/D,UAIE,SAACC,EAAD,CACEC,MAAOlB,EACPmB,0BAA2B,gBAAErC,EAAF,EAAEA,KAAF,OAAY,SAAC,KAAD,UAAUA,KACjDsC,mBAAoB,gBAAEtC,EAAF,EAAEA,KAAMqB,EAAR,EAAQA,KAAR,OAClB,SAAC,KAAD,WACE,SAACkB,EAAD,CAAgBlC,GAAIgB,GAAQ,IAA5B,SAAkCrB,YAMxCiB,KAKGuB,EAAyB,kBACpC,SAAC,KAAD,CAAMnC,GAAG,gBAAT,UACE,UAAC,IAAD,CAAKuB,KAAM,CAACE,IAAK,GAAjB,WACE,SAAC,KAAD,CAAMW,MAAOC,EAAAA,EAAAA,KAAa5B,KAAK,WADjC,kCAOEqB,GAAyBQ,EAAAA,EAAAA,IAAOC,EAAAA,IAAV,8FAAGD,CAAH,0IAYtBJ,GAAiBI,EAAAA,EAAAA,IAAOE,EAAAA,IAAV,sFAAGF,CAAH,yCACTD,EAAAA,EAAAA,QAIEA,EAAAA,EAAAA,U,8hBC1DAI,EAMR,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QAC7C,GAAsBC,EAAAA,EAAAA,GACpBC,EACA,CACEC,UAAW,CAACP,UAAWA,EAAUQ,KAAI,SAAChE,GAAD,MAAU,CAACD,KAAMC,EAAID,MAAQ,QAClEkE,eAAgBL,IAJbM,GAAP,eAQMC,EAAI,mCAAG,iFACNX,EAAUY,OADJ,iEAILF,IAJK,OAKXP,EAAWH,GALA,2CAAH,qDAQV,OACE,UAACa,EAAA,GAAD,CAAQZ,OAAQA,EAAQrB,MAAM,wBAAwBsB,QAASA,EAASlB,MAAO,CAAC8B,MAAO,KAAvF,WACE,SAACD,EAAA,GAAD,WACE,UAACE,EAAA,EAAD,CAAOC,UAAU,SAASC,QAAS,GAAnC,WACE,+FACA,eAAIjC,MAAO,CAACkC,YAAa,GAAIC,OAAQ,GAArC,SACGnB,EAAUQ,KAAI,SAACvC,GACd,IAAMF,GAAOqD,EAAAA,EAAAA,IAAuBnD,GACpC,OACE,eAAIe,MAAO,CAACG,aAAc,GAA1B,SACGpB,GADgCA,SAMzC,2MAIA,oEAGJ,UAAC8C,EAAA,GAAD,CAAcQ,WAAS,EAAvB,WACE,SAACC,EAAA,GAAD,CAAQxD,OAAO,OAAOpB,QAASwD,EAA/B,qBAGA,SAACoB,EAAA,GAAD,CAAQxD,OAAO,SAASpB,QAASiE,EAAjC,yBAQFL,GAAsBiB,EAAAA,EAAAA,IAAH,4QAYrBC,EAAAA,I,sBCzCSC,EAAa,SAAC,GAoBpB,IAnBL9D,EAmBI,EAnBJA,KACA+D,EAkBI,EAlBJA,OACAC,EAiBI,EAjBJA,oBACAC,EAgBI,EAhBJA,aACAC,EAeI,EAfJA,eACAC,EAcI,EAdJA,WACAC,EAaI,EAbJA,oBACAC,EAYI,EAZJA,gBACA5B,EAWI,EAXJA,QAYA,EAA4BhC,EAAAA,WAA5B,eAAO6D,EAAP,KAAeC,EAAf,KAEMC,EAA8D,GAEpET,EAAOU,SAAQ,SAAClG,GACd,IAAMmG,EAAiBC,KAAKC,UAAUR,EAAoB7F,IAC1DiG,EAAwBE,GAAxB,kBACMF,EAAwBE,IAAmB,IADjD,CAEEnG,OAIJ,OAAqEsG,EAAAA,EAAAA,GACnEC,OAAOC,KAAKP,IADd,eAAoBQ,EAApB,KAAQC,WAAR,OAAoCC,EAApC,EAAoCA,gBAAiBC,EAArD,EAAqDA,YAI/CC,EAAyB,GACzBC,EAAiC,GAEjCC,EAAsBR,OAAOC,KAAKP,GAAyBe,OAAOC,MAAM,EAAGnB,GAQjF,OAPAiB,EAAoBb,SAAQ,SAACgB,GACvBT,EAAaU,IAAID,KACnBJ,EAAqBrE,KAAKyE,GAC1BL,EAAcpE,KAAd,MAAAoE,GAAa,OAAUZ,EAAwBiB,IAAY,UAK7D,UAACE,EAAA,EAAD,CAAKzE,KAAM,CAACmC,UAAW,UAAvB,WACE,UAACsC,EAAA,EAAD,CACEC,WAAY5D,EAAAA,EAAAA,MACZd,KAAM,CAACC,WAAY,SAAUC,IAAK,IAClCyE,QAAS,CAACC,SAAU,EAAGC,KAAM,GAAIC,MAAO,IACxC3E,MAAO,CAACnC,SAAU,SAAU+G,IAAK,EAAGC,OAAQ,GAJ9C,UAMGlC,GACD,gBAAK3C,MAAO,CAACH,KAAM,MACnB,SAACiF,EAAA,GAAD,CAAuBlC,aAAcA,KAErC,UAAC0B,EAAA,EAAD,CAAKzE,KAAM,CAACC,WAAY,SAAUC,IAAK,GAAvC,UACGgE,EAAcgB,MAAK,SAACC,GAAD,OAAQA,EAAEzG,eAC5B,SAAC0G,EAAA,EAAD,CAASnH,QAAQ,wFAAjB,UACE,SAACwE,EAAA,GAAD,CAAQxD,OAAO,UAAUZ,MAAM,SAACgH,EAAA,GAAD,CAAMnG,KAAK,oBAAsBX,UAAQ,EAAxE,SACG2F,EAAcnC,OAAS,EAAvB,uBAA2CmC,EAAcnC,OAAzD,KAAqE,mBAI1E,SAACuD,EAAA,GAAD,CACEC,MAAO,CAACC,SAAUtB,EAAcvC,KAAI,SAAC8D,GAAD,eAAC,UAAWA,EAAE/G,YAAd,IAA2BU,SAAUqG,EAAE9H,aAG/E,SAAC+H,EAAD,CAAqBF,SAAUtB,EAAeyB,eAAgB,kBAAM1B,GAAY,aAGpF,UAAC2B,EAAA,EAAD,YACE,4BACE,2BACE,eAAIzF,MAAO,CAAC8B,MAAO,GAAI4D,WAAY,EAAGC,cAAe,GAArD,UACE,SAACC,EAAA,EAAD,CACEC,cACE7B,EAAqBpC,OAAS,GAC9BoC,EAAqBpC,SAAWqC,EAAoBrC,OAEtDkE,QACE9B,EAAqBpC,OAAS,GAC9BoC,EAAqBpC,SAAWqC,EAAoBrC,OAEtDmE,SAAU,SAAC1H,GACLA,EAAE2H,kBAAkBC,kBACtBnC,EAAYE,EAAqBpC,SAAWqC,EAAoBrC,cAKxE,eAAI5B,MAAO,CAACkG,SAAU,KAAtB,SACY,cAATvH,EAAuB,mBAAqB,eAE/C,eAAIqB,MAAO,CAAC8B,MAAO,KAAnB,yBACA,eAAI9B,MAAO,CAAC8B,MAAO,KAAnB,2BACA,eAAI9B,MAAO,CAAC8B,MAAO,KAAnB,yBACA,eAAI9B,MAAO,CAAC8B,MAAO,IAAnB,2BAGJ,2BACGmC,EAAoBrC,OACnBqC,EAAoBzC,KAAI,SAAC2E,EAASC,GAChC,OACE,SAACC,EAAD,CAEEvD,WAAYA,EACZvF,KAAM+F,KAAKgD,MAAMH,GACjBzD,OAAQS,EAAwBgD,IAAY,GAC5CtD,eAAgBA,EAChB0D,WAAY5C,EAAaU,IAAI8B,GAC7BK,gBAAiB3C,EAAgBsC,GACjChJ,OAAQ,SAACuF,GAAD,OAAqBQ,EAAUR,EAAOlB,KAAI,SAACtE,GAAD,OAAWA,EAAMM,UAP9D4I,OAYX,SAACK,EAAD,UAIN,SAAC1F,EAAD,CACEC,UAAWiC,GAAU,GACrBhC,SAAUgC,EACV/B,QAAS,kBAAMgC,OAAUwD,IACzBvF,WAAY,kBAAM+B,OAAUwD,IAC5BtF,QAASA,QAMXqF,EAAgB,WACpB,OACE,yBACE,eAAIE,QAAS,EAAb,UACE,SAACrC,EAAA,EAAD,CAAKzE,KAAM,CAAC+G,eAAgB,SAAU9G,WAAY,UAAlD,UACE,SAACwE,EAAA,EAAD,CAAKnC,OAAQ,CAACuC,KAAM,GAApB,yCAOJ2B,EAQDjH,EAAAA,MACH,YAAsF,IAApF0D,EAAmF,EAAnFA,WAAYvF,EAAuE,EAAvEA,KAAMmF,EAAiE,EAAjEA,OAAQ6D,EAAyD,EAAzDA,WAAYC,EAA6C,EAA7CA,gBAAiBrJ,EAA4B,EAA5BA,OAAQ0F,EAAoB,EAApBA,eACzDgE,EAAQ,kBAAO/D,IAAP,OAAsBvF,IAC9BuJ,GAAUpI,EAAAA,EAAAA,GAAuB,CAACnB,KAAMsJ,IAExCE,EAAUrE,EAAOd,OAAS,GAAKiF,EAASG,KAAK,OAAStE,EAAO,GAAGlF,IAAID,KAAKyJ,KAAK,KAC9E9J,EAAS6J,EAAsB,KAAZrE,EAAO,GAW1BuE,EAAW/J,GAAS2F,GAAeqE,EAAAA,EAAAA,IAAUhK,EAAMM,MACnDP,EAAmB,OAALC,QAAK,IAALA,GAAAA,EAAOqB,YACvB4I,EAAAA,EAAAA,IACEjK,EAAMqB,WAAW6I,WAAWrI,KAC5B7B,EAAMqB,WAAW6I,WAAWC,SAAStI,MAEvC,KAEJ,OACE,2BACE,eAAIiB,MAAO,CAACsH,aAAc,GAA1B,UACE,SAAC1B,EAAA,EAAD,CAAUE,QAASS,EAAYR,SApBpB,SAAC1H,GAChB,GAAIA,EAAE2H,kBAAkBC,iBAAkB,CACxC,IAAOH,EAAWzH,EAAE2H,OAAbF,QACDyB,EACJlJ,EAAEmJ,uBAAuBC,YAAcpJ,EAAEmJ,YAAYE,iBAAiB,SACxElB,EAAgB,CAACV,QAAAA,EAASyB,SAAAA,WAiB1B,2BACE,SAACI,EAAA,EAAD,CACEpK,KAAMA,EACNqK,IAAKd,EACLC,QAASA,EACT7I,KAAM6I,EAAU,SAAgB,OAAL7J,QAAK,IAALA,GAAAA,EAAOqB,WAAa,QAAU,mBAE3D,SAACsJ,GAAD,WACQ,OAAL3K,QAAK,IAALA,OAAA,EAAAA,EAAOqB,aACNrB,EAAMqB,WAAWuJ,cACjBC,EAAAA,EAAAA,GAAoB7K,EAAMqB,WAAWuJ,aAAaE,MAAM,MAAM,SAGpE,wBACG/K,IACC,UAACqH,EAAA,EAAD,CAAKzE,KAAM,CAACmC,UAAW,SAAUjC,IAAK,GAAtC,WACE,SAACkI,EAAA,EAAD,CAAgBC,UAAQ,EAACC,aAAa,EAAOlL,YAAaA,IACpD,OAALC,QAAK,IAALA,GAAAA,EAAOqB,YAAP,OAAqBrB,QAArB,IAAqBA,GAAAA,EAAOqB,WAAWC,WACtC,SAAC,KAAD,CACEF,IAAIG,EAAAA,EAAAA,IACFxB,EAD0B,wBAETC,EAAMqB,WAAWC,YAHtC,UAME,UAAC8F,EAAA,EAAD,CAAKzE,KAAM,CAACmC,UAAW,MAAOjC,IAAK,EAAGD,WAAY,UAAlD,WACE,SAACoF,EAAA,GAAD,CAAMxE,MAAOC,EAAAA,EAAAA,QAAgB5B,KAAK,gBADpC,IACsD7B,EAAMqB,WAAWC,oBAGvEkI,QAIV,wBACGO,GACC,UAAC3C,EAAA,EAAD,CAAKzE,KAAM,CAACE,IAAK,EAAGD,WAAY,SAAU8G,eAAgB,iBAA1D,UACGK,EAASmB,qBACR,SAAC,KAAD,CAAMpI,MAAO,CAACH,KAAM,GAApB,UACE,SAAC,KAAD,CACEwI,MAAOpB,EAASmB,oBAAoBC,MACpCC,MAAO,CACLC,QAAStB,EAASsB,QAClBC,UAAWvB,EAASmB,oBAAoBI,WAJ5C,UAOE,SAACC,EAAA,EAAD,CACED,UAAWE,OAAOzB,EAASmB,oBAAoBI,WAAa,IAC5DG,WAAY,CAACC,aAAa,EAAOC,cAAc,UAKrD,sCAEF,SAACC,EAAA,GAAD,CAAU7B,SAAUA,YAEpBP,KAEN,wBACGO,IACC,SAAC,KAAD,CAA2BA,SAAUA,EAAU8B,kBAAgB,EAACC,kBAAgB,OAGpF,wBACG9L,GACC,UAACoH,EAAA,EAAD,CAAKzE,KAAM,CAACE,IAAK,EAAGD,WAAY,UAAhC,WACE,SAACmJ,EAAAC,EAAD,CAAc5K,IAAII,EAAAA,EAAAA,GAAuB,CAACnB,KAAAA,IAA1C,2BACA,SAACR,EAAA,EAAD,CAAiBE,YAAaA,EAAaC,MAAOA,EAAOC,OAAQA,QAGnE,4BAQNoI,EAIDnG,EAAAA,MAAW,YAA0C,IAAxCiG,EAAuC,EAAvCA,SAAUG,EAA6B,EAA7BA,eAAgBpE,EAAa,EAAbA,QAC1C,EAAoDhC,EAAAA,UAAwB,GAA5E,eAAO+J,EAAP,KAA2BC,EAA3B,KAGA,KAFwBhM,EAAAA,EAAAA,MAAjBC,cAEYwB,QACjB,OAAO,KAGT,IAAMT,EAA+B,IAApBiH,EAASzD,OAE1B,OACE,iCACE,SAACyH,EAAA,EAAD,CACExL,SAAS,eACTC,SACE,SAACwL,EAAA,GAAD,WACE,SAACA,EAAA,GAAD,CACErL,KAAK,wBACLP,QAAS,kBAAM0L,GAAsB,IACrClL,MAAM,SAACgH,EAAA,GAAD,CAAMnG,KAAK,SAAS2B,MAAOtC,EAAWuC,EAAAA,EAAAA,QAAiBA,EAAAA,EAAAA,SAC7DvC,SAAUA,EACVU,OAAO,aATf,UAcE,SAACwD,EAAA,GAAD,CAAQpE,MAAM,SAACgH,EAAA,GAAD,CAAMnG,KAAK,qBAE3B,SAACgC,EAAD,CACEC,UAAWqE,EAAS7D,KAAI,SAACtE,GAAD,OAAWA,EAAMM,OACzCyD,OAAQkI,EACRjI,QAAS,kBAAMkI,GAAsB,IACrCjI,WAAY,WACViI,GAAsB,GACtB5D,KAEFpE,QAASA,UAMJmI,IAAkChH,EAAAA,EAAAA,IAAH,oSAoB/BiH,IAAuBjH,EAAAA,EAAAA,IAAH,6MAY7BgH,IAGE1B,GAAcjH,EAAAA,GAAAA,IAAAA,WAAH,mEAAGA,CAAH,8BACND,EAAAA,EAAAA,U,8XC/XE8I,EAAmB,SAAC,GAAD,IAAE3G,EAAF,EAAEA,WAAF,OAC9B,SAAC4G,EAAA,EAAD,CACExL,KAAK,QACL0B,MAAM,SACNkI,aACE,yBACGhF,GAAcA,EAAWlB,OAAzB,sHADH,oDAIkD,mDAJlD,mDAKyC,KACvC,cAAGtC,KAAK,oEAAR,gDAEK,IARP,8B,sBCFAqK,EAAyB,SAACC,GAAD,MACb,SAAhBA,GAA0C,cAAhBA,EAA8BA,EAAc,QCoClEC,EAAY,GAiDX,IAAMC,EAAuD,SAAC,GAI9D,IAHLhH,EAGI,EAHJA,WACAiH,EAEI,EAFJA,cACAC,EACI,EADJA,cAEA,GDvFOC,EAAAA,EAAAA,GARc,sBAQqCN,GCuF1D,eAAOhL,EAAP,KAAauL,EAAb,KACA,GAA4BC,EAAAA,EAAAA,GAA2C,CAACC,SAAU,WAAlF,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BH,EAAAA,EAAAA,GAA2C,CAACC,SAAU,MAAlF,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAsCL,EAAAA,EAAAA,GAAkD,CACtFC,SAAU,IACVK,OAAQ,SAACC,GAAD,OAASA,EAAGC,MAAQrH,KAAKgD,MAAMoE,EAAGC,OAAS,MACnDC,OAAQ,SAACD,GAAD,MAAY,CAACA,MAAOA,EAAQrH,KAAKC,UAAUoH,QAASjE,MAH9D,eAAOmE,EAAP,KAAoBC,EAApB,KAMMC,GAAcR,GAAU,IAC3BS,QAAQ,mBAAoB,KAC5BC,cACAC,OAEH,EAhEF,SACElB,GAMA,IAAMmB,GAAcC,EAAAA,EAAAA,GAAiCC,EAA2B,CAC9EC,OAAQtB,EACRuB,6BAA6B,IAEzBC,GAAaJ,EAAAA,EAAAA,GACjBK,EACA,CACEH,MAAOtB,EACPzI,UAAW,CAACoJ,MAAOX,GACnBuB,6BAA6B,IAIjC,OAAOnM,EAAAA,SAAc,WACnB,GAAI4K,EAAe,CAAC,IAAD,EACX0B,EAAU,UAAGF,EAAWG,YAAd,aAAG,EAAiBD,WACpC,MAAO,CACLE,MAAOJ,EACPK,WAAOnF,EACPhE,OAAM,OAAEgJ,QAAF,IAAEA,OAAF,EAAEA,EAAYlK,IAAIsK,IAEpB,IAAD,EACCC,EAAa,UAAGZ,EAAYQ,YAAf,aAAG,EAAkBI,cACxC,MAAO,CACLH,MAAOT,EACPU,MAAqC,iBAAjB,OAAbE,QAAa,IAAbA,OAAA,EAAAA,EAAeC,YAA+BD,OAAgBrF,EACrEhE,OAAsC,qBAAjB,OAAbqJ,QAAa,IAAbA,OAAA,EAAAA,EAAeC,YAAmCD,EAAcE,WAAQvF,KAGnF,CAACyE,EAAaK,EAAYxB,IA4BEkC,CAAalC,GAArCtH,EAAP,EAAOA,OAAQkJ,EAAf,EAAeA,MAAOC,GAAtB,EAAsBA,MAChBM,IAAcC,EAAAA,EAAAA,GAAerB,EAAYrI,GAAU,IAEnD2J,GAAWjN,EAAAA,SACf,kBACE+M,GAAYG,QAAO,SAAChH,GAAD,OAAQuF,GAAe0B,GAAAA,CAAQC,EAAwBlH,GAAIuF,QAChF,CAACsB,GAAatB,IAGhB,GACW,SAATlM,EAoOJ,SAAwB+D,EAAiBI,EAAsBuH,GAC7D,IAAMoC,EAAc,SAACvP,GAAD,OAAkBoG,KAAKC,UAAL,kBAAmBT,IAAnB,OAAkC5F,EAAMM,IAAID,SAC5EmP,EAAcrC,EAAS3H,EAAOiK,WAAU,SAACC,GAAD,OAAQvC,GAAUoC,EAAYG,MAAO,EAC7EC,EAAgBC,KAAKC,IAAI,EAAGL,EAAc7C,GAC1CmD,EAAgBN,EAAc7C,EAEpC,MAAO,CACLoD,UAAWvK,EAAOyB,MAAMuI,EAAaA,EAAc7C,GACnD9G,oBAAqB,SAAC7F,GAAD,OAAkBA,EAAMM,IAAID,MACjD2P,WAAYR,EAAc,EAAID,EAAY/J,EAAOmK,SAAkBnG,EACnEyG,WAAYH,EAAgBtK,EAAOd,OAAS6K,EAAY/J,EAAOsK,SAAkBtG,GA7O7E0G,CAAef,GAAUvJ,EAAYuH,GAiP7C,SAA6B3H,EAAiBI,EAAsBuH,GAIlE,IAAMgD,EAAoB,SAACnQ,GACzB,OAAOA,EAAMM,IAAID,KAAK4G,MAAMrB,EAAWlB,OAAQkB,EAAWlB,OAAS,IAI/D0L,EAAuB5K,EAAO4J,QAAO,SAACpP,GAAD,OACzCA,EAAMM,IAAID,KAAKyJ,KAAK,KAAKuG,WAAWzK,EAAWkE,KAAK,SAGhDwG,EAAaC,MAAMC,KACvB,IAAIC,IAAIL,EAAqB9L,KAAI,SAACtE,GAAD,OAAWoG,KAAKC,UAAU8J,EAAkBnQ,SAE5EsE,KAAI,SAACoM,GAAD,OAAOtK,KAAKgD,MAAMsH,MACtB1J,OAEGuI,EAAc,SAACG,GAAD,OAAkBtJ,KAAKC,UAAL,kBAAmBT,IAAnB,OAAkC8J,MAClEF,EAAcrC,EAASmD,EAAWb,WAAU,SAACC,GAAD,OAAQvC,GAAUoC,EAAYG,MAAO,EAEvF,IAAqB,IAAjBF,EACF,MAAO,CACL3J,oBAAqBsK,EACrBJ,UAAW,GACXC,gBAAYxG,EACZyG,gBAAYzG,GAIhB,IAAMmH,EAAiBL,EAAWrJ,MAAMuI,EAAaA,EAAc7C,GAE7DgD,EAAgBC,KAAKC,IAAI,EAAGL,EAAc7C,GAC1CqD,EAA6B,IAAhBR,EAAoBD,EAAYe,EAAWX,SAAkBnG,EAC1EsG,EAAgBN,EAAc7C,EAIpC,MAAO,CACLsD,WAHAK,EAAW5L,OAASoL,EAAgBP,EAAYe,EAAWR,SAAkBtG,EAI7EwG,WAAAA,EACAnK,oBAAqBsK,EACrBJ,UAAWa,EACTR,EACAO,EAAerM,KAAI,SAACoL,GAAD,wBAAY9J,IAAZ,OAA2B8J,SA7R5CmB,CAAoB1B,GAAUvJ,EAAYuH,GAHzCtH,GAAP,GAAOA,oBAAqBkK,GAA5B,GAA4BA,UAAWE,GAAvC,GAAuCA,WAAYD,GAAnD,GAAmDA,WAK7Cc,GAAgB5O,EAAAA,SACpB,kBAAM6N,GAAUzL,KAAc,SAAC8D,GAAD,MAAQ,CAAC/H,KAAM+H,EAAE9H,IAAID,WACnD,CAAC0P,KAEH,IAA4DgB,EAAAA,EAAAA,GAC1DD,IADKnL,GAAP,GAAOA,eAAgBqL,GAAvB,GAAuBA,qBAAsBC,GAA7C,GAA6CA,YAIvCvL,IAAewL,EAAAA,EAAAA,KACnBC,EAAAA,EAAAA,IAA0BzC,EAAO0C,EAAAA,IACjCJ,IASF,GANA9O,EAAAA,WAAgB,WACD,cAATT,GAAwBmE,EAAWlB,QACrCsI,EAAQ,eAET,CAACvL,EAAMuL,EAASpH,IAEf+I,GACF,OAAO,SAAC0C,EAAA,GAAD,CAAiB1C,MAAOA,KAEjC,IAAKnJ,EACH,OAAO,SAAC8L,EAAA,EAAD,CAAgBrQ,QAAQ,SAEjC,IAAKuE,EAAOd,OACV,OACE,SAAC0C,EAAA,EAAD,CAAKE,QAAS,CAACC,SAAU,IAAzB,UACE,SAACgF,EAAD,CAAkB3G,WAAYA,MAKpC,IAAM2L,GAAyC,CAC7CC,gBAAiBxB,GACjByB,gBAAiBxB,GACjByB,UAAW,kBAAMtE,EAAU4C,KAC3B2B,cAAe,kBAAMvE,EAAU6C,KAC/B2B,MAAO,WACLxE,OAAU5D,KAId,OACE,UAACqI,EAAD,WACGZ,IAED,SAACa,EAAA,EAAD,CAAsBC,KAAM,GAA5B,UACE,SAACxM,EAAA,GAAD,CACE9D,KAAMA,EACN+D,OAAQuK,GACRpK,eAAgBA,GAChBF,qBACE,iCACE,SAACuM,EAAA,EAAD,CACEC,YAAa,IAAIxB,IAAI,CAAChP,IACtByQ,QAAS,CACP,CAACC,GAAI,OAAQnR,KAAM,YAAaoR,QAAS,aACzC,CAACD,GAAI,YAAanR,KAAM,SAAUoR,QAAS,gBAE7C5R,QAAS,SAACiB,GACRuL,EAAQvL,GACK,SAATA,GAAmBmE,EAAWlB,QAChCmI,EAAc,QAIpB,SAACwF,EAAA,GAAD,CACEC,MAAOjF,GAAU,GACjBvK,MAAO,CAAC8B,MAAO,OAAQoE,SAAU,IAAKjG,SAAU,KAChDwP,YACE3M,EAAWlB,OAAX,+BAC4BkB,EAAWkE,KAAK,KAD5C,oCAIFjB,SAAU,SAAC1H,GAAD,OAA+BmM,EAAUnM,EAAE2H,OAAOwJ,UAE5DxF,OAEEtD,GADF,SAACgJ,EAAD,CAAmBhN,OAAQA,EAAQ8M,MAAO3E,EAAa9E,SAAU+E,OAIvElI,aAAcA,GACdE,WAAYA,GAAc,GAC1BC,oBAAqBA,GACrBC,gBAAiB6G,EACjBzI,QAAS,SAACuO,GAAD,MAAO,CAAC,CAAC/D,MAAOP,UAG7B,SAAC/G,EAAA,EAAD,CAAKE,QAAS,CAACoL,OAAQ,IAAvB,UACE,SAAC,MAAD,UAA8BnB,WAMhCiB,EAID,SAAC,GAA+B,IAA9BhN,EAA6B,EAA7BA,OAAQ8M,EAAqB,EAArBA,MAAOzJ,EAAc,EAAdA,SACd8J,EAAczQ,EAAAA,SAClB,kBACE0Q,GAAAA,EACGpN,GAAU,IAAIlB,IAAIgL,GAAyBF,QAAO,SAAChH,GAAD,QAASA,MAC5D,SAACA,GAAD,OAAOhC,KAAKC,UAAU+B,MACtBpB,MAAK,SAACoB,EAAGyK,GAAJ,OAAUzK,EAAE9G,UAAUwR,cAAcD,EAAEvR,gBAC/C,CAACkE,IAGGuN,EAAoB7Q,EAAAA,SAAc,WAGtC,IAAM8Q,EAAyC,GAI/C,OAHAL,EAAYzM,SACV,SAACuH,GAAD,OAAYuF,EAAOvF,EAAMnM,WAAa0R,EAAOC,eAAexF,EAAMnM,cAE7D0R,IACN,CAACL,IAEJ,OACE,SAACO,EAAA,GAAD,CACEC,aAAcb,EACdnP,MAAOwP,EACPS,WAAY,CACVtQ,MAAO,CAAC8B,MAAO,KACf2N,YAAa,4BACbc,aAAcf,GACZ,SAACgB,EAAAC,EAAD,CAAa/S,QAAS,kBAAMqI,EAAS,OAAO/F,MAAO,CAAC0Q,UAAW,EAAGC,YAAa,GAA/E,UACE,SAACzL,EAAA,GAAD,CAAMnG,KAAK,kBAEX2H,GAENkK,mBAAoB,SAACC,GAAD,OAAeA,EAAUrS,WAC7CsS,cAAe,SAAClF,EAAOiF,GAAR,OACI,IAAjBjF,EAAMhK,QAAgBiP,EAAUrS,UAAUuS,SAASnF,IAErDoF,WAAYzE,IACZ0E,aAAc,SAACC,EAAYlU,GAAb,OACZ,SAACsM,EAAA,GAAD,CACE6H,OAAQnU,EAAMoU,UAAUD,OACxBzT,QAASV,EAAMqU,YAEfpT,MACE,gCACGiT,EAAW1S,UACXyR,EAAkBiB,EAAW1S,YAC5B,iBAAMwB,MAAO,CAACsR,QAAS,GAAKpP,YAAa,GAAzC,UACGqP,EAAAA,EAAAA,IACCL,EAAWM,eACXN,EAAWO,+BAGb/K,MAXHpD,KAAKC,UAAU2N,KAgBxBQ,WAAW,SAACpI,EAAA,GAAD,CAAUlL,UAAU,EAAMH,KAAK,oBAC1C0T,aAAc5L,KAIdgJ,EAAUnO,EAAAA,GAAAA,IAAAA,WAAH,mEAAGA,CAAH,iHAWPyK,GAA4B9I,EAAAA,EAAAA,IAAH,4QAa3BC,EAAAA,GACAgH,EAAAA,IAGEiC,GAAkClJ,EAAAA,EAAAA,IAAH,wOAUjCgH,EAAAA,IAOJ,SAASuC,EACPvN,GAEA,MAAO,CAACyN,WAAY,QAASqD,GAAI9Q,EAAW8Q,GAAI7R,IAAKe,EAAWU,SAAUV,WAAAA,GAG5E,SAASiO,EAAwBlH,GAC/B,OAAOA,EAAE/G,YAAc+G,EAAE/G,WAAWC,UAChC,CACEA,UAAW8G,EAAE/G,WAAWC,UACxBgT,eAAgBlM,EAAE/G,WAAW6I,WAAWrI,KACxC0S,uBAAwBnM,EAAE/G,WAAW6I,WAAWC,SAAStI,MAE3D,KAmEN,IAAM+O,EAA0B,SAACpL,EAAiBkP,GAChD,OAAOlP,EAAO4J,QAAO,SAACpP,GAAD,OACnB0U,EAAM7M,MAAK,SAACxH,GAAD,OAAUA,EAAKsU,OAAM,SAACC,EAAMC,GAAP,OAAaD,IAAS5U,EAAMM,IAAID,KAAKwU,c,qGC3ZnEC,EAA0B,SAACC,GAC/B,OAAO7S,EAAAA,SAAc,WACnB,OAAQ6S,GAAe,IACpBjH,QAAQ,mBAAoB,KAC5BC,cACAC,SACF,CAAC+G,KAGO7F,EAAiB,SAC5B6F,EACAvP,GAEA,IAAMwP,EAAkBF,EAAwBC,GAChD,OAAO7S,EAAAA,SAAc,WAEnB,OAAK8S,EAGExP,EAAO4J,QAAO,SAAChH,GAAD,OAAO6M,EAAAA,EAAAA,IAAiB7M,EAAE9H,KAAKyN,cAAc8F,SAASmB,MAFlExP,IAGR,CAACA,EAAQwP,KAGDE,EAAqB,SAChCH,EACAvG,GAEA,IAAMwG,EAAkBF,EAAwBC,GAEhD,OAAO7S,EAAAA,SAAc,WAEnB,OAAK8S,EAGExG,EAAWY,QAAO,SAAChH,GAAD,OACvB6M,EAAAA,EAAAA,IAAiB7M,EAAErG,UAAUgM,cAAc8F,SAASmB,MAH7CxG,IAKR,CAACA,EAAYwG,M,6EC5BLlD,EAAuBpO,EAAAA,GAAAA,IAAAA,WAAH,4DAAGA,CAAH,kOAGtB,qBAAEqO,OACWtO,EAAAA,EAAAA,MAqBAA,EAAAA,EAAAA,c,gLC1BX0R,EAA8C,SAAC,GAA4B,IAAD,IAA1BC,MAAAA,OAA0B,MAAlB,aAAkB,EAC9EC,GAAsBnV,EAAAA,EAAAA,MAAtBmV,mBACP,GAAuDC,EAAAA,EAAAA,IAA4B,CACjFpN,MAAO,YACPqN,SAAUC,EAAAA,KAFLC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,UAAW/G,EAA7B,EAA6BA,MAAOgH,EAApC,EAAoCA,gBAKpC,EAA4BzT,EAAAA,WAAiByM,GAA7C,eAAO5K,EAAP,KAAe6R,EAAf,KAGA,OAFA1T,EAAAA,WAAgB,kBAAM0T,IAAYjH,KAAQ,CAACA,IAEtC0G,EAAmB1T,SAWtB,iCACE,SAAC,KAAD,CAAQnB,QAASkV,EAAW1U,MAAM,SAAC,KAAD,CAAMa,KAAK,YAAcpB,QAASgV,EAAW7T,OAAO,OAAtF,SACGwT,IAEFO,GACC,SAAC,IAAD,CACEhH,MAAOA,EACPxE,SAAUwL,EACVF,UAAWA,EACXI,YAAaH,EACbI,UAAW,kBAAMF,GAAU,IAC3B7R,OAAQA,KAGV,UAAC,KAAD,CACE/C,KAAK,QACL0B,MAAM,eACNqT,mBAAmB,EACnBC,sBAAsB,EACtBlT,MAAO,CAAC8B,MAAO,OACfb,OAAQA,EANV,WAQE,SAAC,KAAD,UAAa4K,IAAS,SAAC,KAAD,CAAiBA,MAAOA,OAC9C,SAAC,KAAD,WACE,SAAC,KAAD,CAAQnO,QAAS,kBAAMoV,GAAU,IAAjC,8BAjCN,SAAC,IAAD,CAAShV,QAASyU,EAAmBY,eAArC,UACE,SAAC,KAAD,CAAQjV,MAAM,SAAC,KAAD,CAAMa,KAAK,YAAcX,UAAQ,EAACU,OAAO,OAAvD,SACGwT","sources":["../../core/src/assets/AssetActionMenu.tsx","../../core/src/assets/AssetPageHeader.tsx","../../core/src/assets/AssetWipeDialog.tsx","../../core/src/assets/AssetTable.tsx","../../core/src/assets/AssetsEmptyState.tsx","../../core/src/assets/useAssetView.tsx","../../core/src/assets/AssetsCatalogTable.tsx","../../core/src/assets/useAssetSearch.tsx","../../core/src/ui/StickyTableContainer.tsx","../../core/src/workspace/ReloadAllButton.tsx"],"sourcesContent":["import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissions} from '../app/Permissions';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {useMaterializationAction} from './LaunchAssetExecutionButton';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetTableFragment} from './types/AssetTableFragment';\n\ninterface Props {\n  repoAddress: RepoAddress | null;\n  asset: AssetTableFragment;\n  onWipe?: (assets: AssetTableFragment[]) => void;\n}\n\nexport const AssetActionMenu: React.FC<Props> = (props) => {\n  const {repoAddress, asset, onWipe} = props;\n  const {canWipeAssets, canLaunchPipelineExecution} = usePermissions();\n  const {path} = asset.key;\n\n  const {onClick, loading, launchpadElement} = useMaterializationAction();\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <Tooltip content=\"Shift+click to add configuration\" placement=\"left\" display=\"block\">\n              <MenuItem\n                text=\"Materialize\"\n                icon={loading ? <Spinner purpose=\"body-text\" /> : 'materialization'}\n                disabled={!canLaunchPipelineExecution || loading}\n                onClick={(e) => onClick([asset.key], e)}\n              />\n            </Tooltip>\n            <MenuLink\n              text=\"Show in group\"\n              to={\n                repoAddress && asset.definition?.groupName\n                  ? workspacePathFromAddress(\n                      repoAddress,\n                      `/asset-groups/${asset.definition.groupName}`,\n                    )\n                  : ''\n              }\n              disabled={!asset?.definition}\n              icon=\"asset_group\"\n            />\n            <MenuLink\n              text=\"View neighbors\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'neighbors'})}\n              disabled={!asset?.definition}\n              icon=\"graph_neighbors\"\n            />\n            <MenuLink\n              text=\"View upstream assets\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'upstream'})}\n              disabled={!asset?.definition}\n              icon=\"graph_upstream\"\n            />\n            <MenuLink\n              text=\"View downstream assets\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'downstream'})}\n              disabled={!asset?.definition}\n              icon=\"graph_downstream\"\n            />\n            <MenuItem\n              text=\"Wipe materializations\"\n              icon=\"delete\"\n              disabled={!onWipe || !canWipeAssets.enabled}\n              intent=\"danger\"\n              onClick={() => canWipeAssets.enabled && onWipe && onWipe([asset])}\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      {launchpadElement}\n    </>\n  );\n};\n","// eslint-disable-next-line no-restricted-imports\nimport {BreadcrumbProps, Breadcrumbs} from '@blueprintjs/core';\nimport {Box, Colors, PageHeader, Heading, Icon} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ntype Props = {assetKey: {path: string[]}} & Partial<React.ComponentProps<typeof PageHeader>>;\n\nexport const AssetPageHeader: React.FC<Props> = ({assetKey, ...extra}) => {\n  const breadcrumbs = React.useMemo(() => {\n    const list: BreadcrumbProps[] = [{text: 'Assets', href: '/assets'}];\n\n    assetKey.path.reduce((accum: string, elem: string) => {\n      const href = `${accum}/${encodeURIComponent(elem)}`;\n      list.push({text: elem, href});\n      return href;\n    }, '/assets');\n\n    return list;\n  }, [assetKey.path]);\n\n  return (\n    <PageHeader\n      title={\n        <Box\n          flex={{alignItems: 'center', gap: 4}}\n          style={{maxWidth: '600px', overflow: 'hidden', marginBottom: 4}}\n        >\n          <BreadcrumbsWithSlashes\n            items={breadcrumbs}\n            currentBreadcrumbRenderer={({text}) => <Heading>{text}</Heading>}\n            breadcrumbRenderer={({text, href}) => (\n              <Heading>\n                <BreadcrumbLink to={href || '#'}>{text}</BreadcrumbLink>\n              </Heading>\n            )}\n          />\n        </Box>\n      }\n      {...extra}\n    />\n  );\n};\n\nexport const AssetGlobalLineageLink = () => (\n  <Link to=\"/asset-groups\">\n    <Box flex={{gap: 4}}>\n      <Icon color={Colors.Link} name=\"schema\" />\n      View global asset lineage\n    </Box>\n  </Link>\n);\n\nconst BreadcrumbsWithSlashes = styled(Breadcrumbs)`\n  & li:not(:first-child)::after {\n    background: none;\n    font-size: 20px;\n    font-weight: bold;\n    color: #5c7080;\n    content: '/';\n    width: 8px;\n    line-height: 16px;\n  }\n`;\n\nconst BreadcrumbLink = styled(Link)`\n  color: ${Colors.Gray800};\n\n  :hover,\n  :active {\n    color: ${Colors.Gray800};\n  }\n`;\n","import {gql, RefetchQueriesFunction, useMutation} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog, Group} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\n\nimport {AssetWipeMutation, AssetWipeMutationVariables} from './types/AssetWipeMutation';\n\ninterface AssetKey {\n  path: string[];\n}\n\nexport const AssetWipeDialog: React.FC<{\n  assetKeys: AssetKey[];\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (assetKeys: AssetKey[]) => void;\n  requery?: RefetchQueriesFunction;\n}> = ({assetKeys, isOpen, onClose, onComplete, requery}) => {\n  const [requestWipe] = useMutation<AssetWipeMutation, AssetWipeMutationVariables>(\n    ASSET_WIPE_MUTATION,\n    {\n      variables: {assetKeys: assetKeys.map((key) => ({path: key.path || []}))},\n      refetchQueries: requery,\n    },\n  );\n\n  const wipe = async () => {\n    if (!assetKeys.length) {\n      return;\n    }\n    await requestWipe();\n    onComplete(assetKeys);\n  };\n\n  return (\n    <Dialog isOpen={isOpen} title=\"Wipe materializations\" onClose={onClose} style={{width: 600}}>\n      <DialogBody>\n        <Group direction=\"column\" spacing={16}>\n          <div>Are you sure you want to wipe materializations for these assets?</div>\n          <ul style={{paddingLeft: 32, margin: 0}}>\n            {assetKeys.map((assetKey) => {\n              const name = displayNameForAssetKey(assetKey);\n              return (\n                <li style={{marginBottom: 4}} key={name}>\n                  {name}\n                </li>\n              );\n            })}\n          </ul>\n          <div>\n            Assets defined only by their historical materializations will disappear from the Asset\n            Catalog. Software-defined assets will remain unless their definition is also deleted.\n          </div>\n          <strong>This action cannot be undone.</strong>\n        </Group>\n      </DialogBody>\n      <DialogFooter topBorder>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button intent=\"danger\" onClick={wipe}>\n          Wipe\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ASSET_WIPE_MUTATION = gql`\n  mutation AssetWipeMutation($assetKeys: [AssetKeyInput!]!) {\n    wipeAssets(assetKeys: $assetKeys) {\n      ... on AssetWipeSuccess {\n        assetKeys {\n          path\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, RefetchQueriesFunction} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Colors,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n  Table,\n  Mono,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {usePermissions} from '../app/Permissions';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AssetLatestRunWithNotices, AssetRunLink} from '../asset-graph/AssetRunLinking';\nimport {LiveData, toGraphId} from '../asset-graph/Utils';\nimport {StaleTag} from '../assets/StaleTag';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {markdownToPlaintext} from '../ui/markdownToPlaintext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {AssetActionMenu} from './AssetActionMenu';\nimport {AssetLink} from './AssetLink';\nimport {AssetWipeDialog} from './AssetWipeDialog';\nimport {LaunchAssetExecutionButton} from './LaunchAssetExecutionButton';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetTableFragment as Asset} from './types/AssetTableFragment';\nimport {AssetViewType} from './useAssetView';\n\ntype AssetKey = {path: string[]};\n\nexport const AssetTable = ({\n  view,\n  assets,\n  actionBarComponents,\n  refreshState,\n  liveDataByNode,\n  prefixPath,\n  displayPathForAsset,\n  maxDisplayCount,\n  requery,\n}: {\n  view: AssetViewType;\n  assets: Asset[];\n  refreshState: QueryRefreshState;\n  actionBarComponents: React.ReactNode;\n  liveDataByNode: LiveData;\n  prefixPath: string[];\n  displayPathForAsset: (asset: Asset) => string[];\n  maxDisplayCount?: number;\n  requery?: RefetchQueriesFunction;\n}) => {\n  const [toWipe, setToWipe] = React.useState<AssetKey[] | undefined>();\n\n  const groupedByFirstComponent: {[pathComponent: string]: Asset[]} = {};\n\n  assets.forEach((asset) => {\n    const displayPathKey = JSON.stringify(displayPathForAsset(asset));\n    groupedByFirstComponent[displayPathKey] = [\n      ...(groupedByFirstComponent[displayPathKey] || []),\n      asset,\n    ];\n  });\n\n  const [{checkedIds: checkedPaths}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    Object.keys(groupedByFirstComponent),\n  );\n\n  const checkedAssets: Asset[] = [];\n  const checkedPathsOnscreen: string[] = [];\n\n  const pageDisplayPathKeys = Object.keys(groupedByFirstComponent).sort().slice(0, maxDisplayCount);\n  pageDisplayPathKeys.forEach((pathKey) => {\n    if (checkedPaths.has(pathKey)) {\n      checkedPathsOnscreen.push(pathKey);\n      checkedAssets.push(...(groupedByFirstComponent[pathKey] || []));\n    }\n  });\n\n  return (\n    <Box flex={{direction: 'column'}}>\n      <Box\n        background={Colors.White}\n        flex={{alignItems: 'center', gap: 12}}\n        padding={{vertical: 8, left: 24, right: 12}}\n        style={{position: 'sticky', top: 0, zIndex: 1}}\n      >\n        {actionBarComponents}\n        <div style={{flex: 1}} />\n        <QueryRefreshCountdown refreshState={refreshState} />\n\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          {checkedAssets.some((c) => !c.definition) ? (\n            <Tooltip content=\"One or more selected assets are not software-defined and cannot be launched directly.\">\n              <Button intent=\"primary\" icon={<Icon name=\"materialization\" />} disabled>\n                {checkedAssets.length > 1 ? `Materialize (${checkedAssets.length})` : 'Materialize'}\n              </Button>\n            </Tooltip>\n          ) : (\n            <LaunchAssetExecutionButton\n              scope={{selected: checkedAssets.map((a) => ({...a.definition!, assetKey: a.key}))}}\n            />\n          )}\n          <MoreActionsDropdown selected={checkedAssets} clearSelection={() => onToggleAll(false)} />\n        </Box>\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{width: 42, paddingTop: 0, paddingBottom: 0}}>\n              <Checkbox\n                indeterminate={\n                  checkedPathsOnscreen.length > 0 &&\n                  checkedPathsOnscreen.length !== pageDisplayPathKeys.length\n                }\n                checked={\n                  checkedPathsOnscreen.length > 0 &&\n                  checkedPathsOnscreen.length === pageDisplayPathKeys.length\n                }\n                onChange={(e) => {\n                  if (e.target instanceof HTMLInputElement) {\n                    onToggleAll(checkedPathsOnscreen.length !== pageDisplayPathKeys.length);\n                  }\n                }}\n              />\n            </th>\n            <th style={{minWidth: 300}}>\n              {view === 'directory' ? 'Asset key prefix' : 'Asset key'}\n            </th>\n            <th style={{width: 340}}>Defined in</th>\n            <th style={{width: 265}}>Materialized</th>\n            <th style={{width: 215}}>Latest run</th>\n            <th style={{width: 80}}>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {pageDisplayPathKeys.length ? (\n            pageDisplayPathKeys.map((pathStr, idx) => {\n              return (\n                <AssetEntryRow\n                  key={idx}\n                  prefixPath={prefixPath}\n                  path={JSON.parse(pathStr)}\n                  assets={groupedByFirstComponent[pathStr] || []}\n                  liveDataByNode={liveDataByNode}\n                  isSelected={checkedPaths.has(pathStr)}\n                  onToggleChecked={onToggleFactory(pathStr)}\n                  onWipe={(assets: Asset[]) => setToWipe(assets.map((asset) => asset.key))}\n                />\n              );\n            })\n          ) : (\n            <AssetEmptyRow />\n          )}\n        </tbody>\n      </Table>\n      <AssetWipeDialog\n        assetKeys={toWipe || []}\n        isOpen={!!toWipe}\n        onClose={() => setToWipe(undefined)}\n        onComplete={() => setToWipe(undefined)}\n        requery={requery}\n      />\n    </Box>\n  );\n};\n\nconst AssetEmptyRow = () => {\n  return (\n    <tr>\n      <td colSpan={6}>\n        <Box flex={{justifyContent: 'center', alignItems: 'center'}}>\n          <Box margin={{left: 8}}>No assets to display</Box>\n        </Box>\n      </td>\n    </tr>\n  );\n};\n\nconst AssetEntryRow: React.FC<{\n  prefixPath: string[];\n  path: string[];\n  isSelected: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  assets: Asset[];\n  liveDataByNode: LiveData;\n  onWipe: (assets: Asset[]) => void;\n}> = React.memo(\n  ({prefixPath, path, assets, isSelected, onToggleChecked, onWipe, liveDataByNode}) => {\n    const fullPath = [...prefixPath, ...path];\n    const linkUrl = assetDetailsPathForKey({path: fullPath});\n\n    const isGroup = assets.length > 1 || fullPath.join('/') !== assets[0].key.path.join('/');\n    const asset = !isGroup ? assets[0] : null;\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const liveData = asset && liveDataByNode[toGraphId(asset.key)];\n    const repoAddress = asset?.definition\n      ? buildRepoAddress(\n          asset.definition.repository.name,\n          asset.definition.repository.location.name,\n        )\n      : null;\n\n    return (\n      <tr>\n        <td style={{paddingRight: 8}}>\n          <Checkbox checked={isSelected} onChange={onChange} />\n        </td>\n        <td>\n          <AssetLink\n            path={path}\n            url={linkUrl}\n            isGroup={isGroup}\n            icon={isGroup ? 'folder' : asset?.definition ? 'asset' : 'asset_non_sda'}\n          />\n          <Description>\n            {asset?.definition &&\n              asset.definition.description &&\n              markdownToPlaintext(asset.definition.description).split('\\n')[0]}\n          </Description>\n        </td>\n        <td>\n          {repoAddress && (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <RepositoryLink showIcon showRefresh={false} repoAddress={repoAddress} />\n              {asset?.definition && asset?.definition.groupName ? (\n                <Link\n                  to={workspacePathFromAddress(\n                    repoAddress,\n                    `/asset-groups/${asset.definition.groupName}`,\n                  )}\n                >\n                  <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                    <Icon color={Colors.Gray400} name=\"asset_group\" /> {asset.definition.groupName}\n                  </Box>\n                </Link>\n              ) : undefined}\n            </Box>\n          )}\n        </td>\n        <td>\n          {liveData ? (\n            <Box flex={{gap: 8, alignItems: 'center', justifyContent: 'space-between'}}>\n              {liveData.lastMaterialization ? (\n                <Mono style={{flex: 1}}>\n                  <AssetRunLink\n                    runId={liveData.lastMaterialization.runId}\n                    event={{\n                      stepKey: liveData.stepKey,\n                      timestamp: liveData.lastMaterialization.timestamp,\n                    }}\n                  >\n                    <TimestampDisplay\n                      timestamp={Number(liveData.lastMaterialization.timestamp) / 1000}\n                      timeFormat={{showSeconds: false, showTimezone: false}}\n                    />\n                  </AssetRunLink>\n                </Mono>\n              ) : (\n                <span>–</span>\n              )}\n              <StaleTag liveData={liveData} />\n            </Box>\n          ) : undefined}\n        </td>\n        <td>\n          {liveData && (\n            <AssetLatestRunWithNotices liveData={liveData} includeFreshness includeRunStatus />\n          )}\n        </td>\n        <td>\n          {asset ? (\n            <Box flex={{gap: 8, alignItems: 'center'}}>\n              <AnchorButton to={assetDetailsPathForKey({path})}>View details</AnchorButton>\n              <AssetActionMenu repoAddress={repoAddress} asset={asset} onWipe={onWipe} />\n            </Box>\n          ) : (\n            <span />\n          )}\n        </td>\n      </tr>\n    );\n  },\n);\n\nconst MoreActionsDropdown: React.FC<{\n  selected: Asset[];\n  clearSelection: () => void;\n  requery?: RefetchQueriesFunction;\n}> = React.memo(({selected, clearSelection, requery}) => {\n  const [showBulkWipeDialog, setShowBulkWipeDialog] = React.useState<boolean>(false);\n  const {canWipeAssets} = usePermissions();\n\n  if (!canWipeAssets.enabled) {\n    return null;\n  }\n\n  const disabled = selected.length === 0;\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <MenuItem\n              text=\"Wipe materializations\"\n              onClick={() => setShowBulkWipeDialog(true)}\n              icon={<Icon name=\"delete\" color={disabled ? Colors.Gray600 : Colors.Red500} />}\n              disabled={disabled}\n              intent=\"danger\"\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <AssetWipeDialog\n        assetKeys={selected.map((asset) => asset.key)}\n        isOpen={showBulkWipeDialog}\n        onClose={() => setShowBulkWipeDialog(false)}\n        onComplete={() => {\n          setShowBulkWipeDialog(false);\n          clearSelection();\n        }}\n        requery={requery}\n      />\n    </>\n  );\n});\n\nexport const ASSET_TABLE_DEFINITION_FRAGMENT = gql`\n  fragment AssetTableDefinitionFragment on AssetNode {\n    id\n    groupName\n    isSource\n    partitionDefinition {\n      description\n    }\n    description\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ASSET_TABLE_FRAGMENT = gql`\n  fragment AssetTableFragment on Asset {\n    __typename\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      ...AssetTableDefinitionFragment\n    }\n  }\n  ${ASSET_TABLE_DEFINITION_FRAGMENT}\n`;\n\nconst Description = styled.div`\n  color: ${Colors.Gray800};\n  font-size: 14px;\n`;\n","import {NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\n\nexport const AssetsEmptyState = ({prefixPath}: {prefixPath: string[]}) => (\n  <NonIdealState\n    icon=\"asset\"\n    title=\"Assets\"\n    description={\n      <p>\n        {prefixPath && prefixPath.length\n          ? `There are no matching materialized assets with the specified asset key. `\n          : `There are no known materialized assets. `}\n        Any asset keys that have been specified with an <code>AssetMaterialization</code> during a\n        pipeline run will appear here. See the{' '}\n        <a href=\"https://docs.dagster.io/_apidocs/ops#dagster.AssetMaterialization\">\n          AssetMaterialization documentation\n        </a>{' '}\n        for more information.\n      </p>\n    }\n  />\n);\n","import {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst ASSET_VIEW_KEY = 'AssetViewPreference';\n\nexport type AssetViewType = 'flat' | 'directory';\n\nconst validateSavedAssetView = (storedValue: any) =>\n  storedValue === 'flat' || storedValue === 'directory' ? storedValue : 'flat';\n\nexport const useAssetView = () => {\n  return useStateWithStorage<AssetViewType>(ASSET_VIEW_KEY, validateSavedAssetView);\n};\n","import {gql, QueryResult, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  CursorPaginationProps,\n  TextInput,\n  Suggest,\n  MenuItem,\n  Icon,\n  ButtonGroup,\n} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport uniqBy from 'lodash/uniqBy';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useMergedRefresh, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment';\nimport {useLiveDataForAssetKeys} from '../asset-graph/useLiveDataForAssetKeys';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {AssetGroupSelector} from '../types/globalTypes';\nimport {ClearButton} from '../ui/ClearButton';\nimport {LoadingSpinner} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\n\nimport {AssetTable, ASSET_TABLE_DEFINITION_FRAGMENT, ASSET_TABLE_FRAGMENT} from './AssetTable';\nimport {AssetsEmptyState} from './AssetsEmptyState';\nimport {AssetKey} from './types';\nimport {\n  AssetCatalogGroupTableQuery,\n  AssetCatalogGroupTableQueryVariables,\n  AssetCatalogGroupTableQuery_assetNodes,\n} from './types/AssetCatalogGroupTableQuery';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQuery_assetsOrError_AssetConnection_nodes,\n} from './types/AssetCatalogTableQuery';\nimport {AssetTableFragment} from './types/AssetTableFragment';\nimport {useAssetSearch} from './useAssetSearch';\nimport {AssetViewType, useAssetView} from './useAssetView';\n\nconst PAGE_SIZE = 50;\n\ntype Asset = AssetCatalogTableQuery_assetsOrError_AssetConnection_nodes;\n\nfunction useAllAssets(\n  groupSelector?: AssetGroupSelector,\n): {\n  query: QueryResult;\n  assets: AssetTableFragment[] | undefined;\n  error: PythonErrorFragment | undefined;\n} {\n  const assetsQuery = useQuery<AssetCatalogTableQuery>(ASSET_CATALOG_TABLE_QUERY, {\n    skip: !!groupSelector,\n    notifyOnNetworkStatusChange: true,\n  });\n  const groupQuery = useQuery<AssetCatalogGroupTableQuery, AssetCatalogGroupTableQueryVariables>(\n    ASSET_CATALOG_GROUP_TABLE_QUERY,\n    {\n      skip: !groupSelector,\n      variables: {group: groupSelector},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  return React.useMemo(() => {\n    if (groupSelector) {\n      const assetNodes = groupQuery.data?.assetNodes;\n      return {\n        query: groupQuery,\n        error: undefined,\n        assets: assetNodes?.map(definitionToAssetTableFragment),\n      };\n    } else {\n      const assetsOrError = assetsQuery.data?.assetsOrError;\n      return {\n        query: assetsQuery,\n        error: assetsOrError?.__typename === 'PythonError' ? assetsOrError : undefined,\n        assets: assetsOrError?.__typename === 'AssetConnection' ? assetsOrError.nodes : undefined,\n      };\n    }\n  }, [assetsQuery, groupQuery, groupSelector]);\n}\n\ninterface AssetCatalogTableProps {\n  prefixPath: string[];\n  setPrefixPath: (prefixPath: string[]) => void;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport const AssetsCatalogTable: React.FC<AssetCatalogTableProps> = ({\n  prefixPath,\n  setPrefixPath,\n  groupSelector,\n}) => {\n  const [view, setView] = useAssetView();\n  const [cursor, setCursor] = useQueryPersistedState<string | undefined>({queryKey: 'cursor'});\n  const [search, setSearch] = useQueryPersistedState<string | undefined>({queryKey: 'q'});\n  const [searchGroup, setSearchGroup] = useQueryPersistedState<AssetGroupSelector | null>({\n    queryKey: 'g',\n    decode: (qs) => (qs.group ? JSON.parse(qs.group) : null),\n    encode: (group) => ({group: group ? JSON.stringify(group) : undefined}),\n  });\n\n  const searchPath = (search || '')\n    .replace(/(( ?> ?)|\\.|\\/)/g, '/')\n    .toLowerCase()\n    .trim();\n\n  const {assets, query, error} = useAllAssets(groupSelector);\n  const pathMatches = useAssetSearch(searchPath, assets || []);\n\n  const filtered = React.useMemo(\n    () =>\n      pathMatches.filter((a) => !searchGroup || isEqual(buildAssetGroupSelector(a), searchGroup)),\n    [pathMatches, searchGroup],\n  );\n\n  const {displayPathForAsset, displayed, nextCursor, prevCursor} =\n    view === 'flat'\n      ? buildFlatProps(filtered, prefixPath, cursor)\n      : buildNamespaceProps(filtered, prefixPath, cursor);\n\n  const displayedKeys = React.useMemo(\n    () => displayed.map<AssetKey>((a) => ({path: a.key.path})),\n    [displayed],\n  );\n  const {liveDataByNode, liveDataRefreshState, runWatchers} = useLiveDataForAssetKeys(\n    displayedKeys,\n  );\n\n  const refreshState = useMergedRefresh(\n    useQueryRefreshAtInterval(query, FIFTEEN_SECONDS),\n    liveDataRefreshState,\n  );\n\n  React.useEffect(() => {\n    if (view !== 'directory' && prefixPath.length) {\n      setView('directory');\n    }\n  }, [view, setView, prefixPath]);\n\n  if (error) {\n    return <PythonErrorInfo error={error} />;\n  }\n  if (!assets) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n  if (!assets.length) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <AssetsEmptyState prefixPath={prefixPath} />\n      </Box>\n    );\n  }\n\n  const paginationProps: CursorPaginationProps = {\n    hasPrevCursor: !!prevCursor,\n    hasNextCursor: !!nextCursor,\n    popCursor: () => setCursor(prevCursor),\n    advanceCursor: () => setCursor(nextCursor),\n    reset: () => {\n      setCursor(undefined);\n    },\n  };\n\n  return (\n    <Wrapper>\n      {runWatchers}\n      {/* 48px allows for the toolbar to be sticky as well */}\n      <StickyTableContainer $top={48}>\n        <AssetTable\n          view={view}\n          assets={displayed}\n          liveDataByNode={liveDataByNode}\n          actionBarComponents={\n            <>\n              <ButtonGroup<AssetViewType>\n                activeItems={new Set([view])}\n                buttons={[\n                  {id: 'flat', icon: 'view_list', tooltip: 'List view'},\n                  {id: 'directory', icon: 'folder', tooltip: 'Folder view'},\n                ]}\n                onClick={(view) => {\n                  setView(view);\n                  if (view === 'flat' && prefixPath.length) {\n                    setPrefixPath([]);\n                  }\n                }}\n              />\n              <TextInput\n                value={search || ''}\n                style={{width: '30vw', minWidth: 150, maxWidth: 400}}\n                placeholder={\n                  prefixPath.length\n                    ? `Filter asset keys in ${prefixPath.join('/')}…`\n                    : `Filter asset keys…`\n                }\n                onChange={(e: React.ChangeEvent<any>) => setSearch(e.target.value)}\n              />\n              {!groupSelector ? (\n                <AssetGroupSuggest assets={assets} value={searchGroup} onChange={setSearchGroup} />\n              ) : undefined}\n            </>\n          }\n          refreshState={refreshState}\n          prefixPath={prefixPath || []}\n          displayPathForAsset={displayPathForAsset}\n          maxDisplayCount={PAGE_SIZE}\n          requery={(_) => [{query: ASSET_CATALOG_TABLE_QUERY}]}\n        />\n      </StickyTableContainer>\n      <Box padding={{bottom: 64}}>\n        <CursorPaginationControls {...paginationProps} />\n      </Box>\n    </Wrapper>\n  );\n};\n\nconst AssetGroupSuggest: React.FC<{\n  assets: Asset[];\n  value: AssetGroupSelector | null;\n  onChange: (g: AssetGroupSelector | null) => void;\n}> = ({assets, value, onChange}) => {\n  const assetGroups = React.useMemo(\n    () =>\n      uniqBy(\n        (assets || []).map(buildAssetGroupSelector).filter((a) => !!a) as AssetGroupSelector[],\n        (a) => JSON.stringify(a),\n      ).sort((a, b) => a.groupName.localeCompare(b.groupName)),\n    [assets],\n  );\n\n  const repoContextNeeded = React.useMemo(() => {\n    // This is a bit tricky - the first time we find a groupName it sets the key to `false`.\n    // The second time, it sets the value to `true` + tells use we need to show the repo name\n    const result: {[groupName: string]: boolean} = {};\n    assetGroups.forEach(\n      (group) => (result[group.groupName] = result.hasOwnProperty(group.groupName)),\n    );\n    return result;\n  }, [assetGroups]);\n\n  return (\n    <Suggest<AssetGroupSelector>\n      selectedItem={value}\n      items={assetGroups}\n      inputProps={{\n        style: {width: 220},\n        placeholder: 'Filter asset groups…',\n        rightElement: value ? (\n          <ClearButton onClick={() => onChange(null)} style={{marginTop: 5, marginRight: 4}}>\n            <Icon name=\"cancel\" />\n          </ClearButton>\n        ) : undefined,\n      }}\n      inputValueRenderer={(partition) => partition.groupName}\n      itemPredicate={(query, partition) =>\n        query.length === 0 || partition.groupName.includes(query)\n      }\n      itemsEqual={isEqual}\n      itemRenderer={(assetGroup, props) => (\n        <MenuItem\n          active={props.modifiers.active}\n          onClick={props.handleClick}\n          key={JSON.stringify(assetGroup)}\n          text={\n            <>\n              {assetGroup.groupName}\n              {repoContextNeeded[assetGroup.groupName] ? (\n                <span style={{opacity: 0.5, paddingLeft: 4}}>\n                  {buildRepoPathForHuman(\n                    assetGroup.repositoryName,\n                    assetGroup.repositoryLocationName,\n                  )}\n                </span>\n              ) : undefined}\n            </>\n          }\n        />\n      )}\n      noResults={<MenuItem disabled={true} text=\"No asset groups\" />}\n      onItemSelect={onChange}\n    />\n  );\n};\nconst Wrapper = styled.div`\n  flex: 1 1;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  min-width: 0;\n  position: relative;\n  z-index: 0;\n`;\n\nconst ASSET_CATALOG_TABLE_QUERY = gql`\n  query AssetCatalogTableQuery {\n    assetsOrError {\n      __typename\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${ASSET_TABLE_FRAGMENT}\n`;\n\nconst ASSET_CATALOG_GROUP_TABLE_QUERY = gql`\n  query AssetCatalogGroupTableQuery($group: AssetGroupSelector) {\n    assetNodes(group: $group) {\n      id\n      assetKey {\n        path\n      }\n      ...AssetTableDefinitionFragment\n    }\n  }\n  ${ASSET_TABLE_DEFINITION_FRAGMENT}\n`;\n\n// When we load the AssetCatalogTable for a particular asset group, we retrieve `assetNodes`,\n// not `assets`. To narrow the scope of this difference we coerce the nodes to look like\n// AssetCatalogTableQuery results.\n//\nfunction definitionToAssetTableFragment(\n  definition: AssetCatalogGroupTableQuery_assetNodes,\n): AssetTableFragment {\n  return {__typename: 'Asset', id: definition.id, key: definition.assetKey, definition};\n}\n\nfunction buildAssetGroupSelector(a: Asset) {\n  return a.definition && a.definition.groupName\n    ? {\n        groupName: a.definition.groupName,\n        repositoryName: a.definition.repository.name,\n        repositoryLocationName: a.definition.repository.location.name,\n      }\n    : null;\n}\n\nfunction buildFlatProps(assets: Asset[], prefixPath: string[], cursor: string | undefined) {\n  const cursorValue = (asset: Asset) => JSON.stringify([...prefixPath, ...asset.key.path]);\n  const cursorIndex = cursor ? assets.findIndex((ns) => cursor <= cursorValue(ns)) : 0;\n  const prevPageIndex = Math.max(0, cursorIndex - PAGE_SIZE);\n  const nextPageIndex = cursorIndex + PAGE_SIZE;\n\n  return {\n    displayed: assets.slice(cursorIndex, cursorIndex + PAGE_SIZE),\n    displayPathForAsset: (asset: Asset) => asset.key.path,\n    prevCursor: cursorIndex > 0 ? cursorValue(assets[prevPageIndex]) : undefined,\n    nextCursor: nextPageIndex < assets.length ? cursorValue(assets[nextPageIndex]) : undefined,\n  };\n}\n\nfunction buildNamespaceProps(assets: Asset[], prefixPath: string[], cursor: string | undefined) {\n  // Return all assets from the next PAGE_SIZE namespaces - the AssetTable component will later\n  // group them by namespace\n\n  const namespaceForAsset = (asset: Asset) => {\n    return asset.key.path.slice(prefixPath.length, prefixPath.length + 1);\n  };\n\n  // Only consider assets that start with the prefix path\n  const assetsWithPathPrefix = assets.filter((asset) =>\n    asset.key.path.join(',').startsWith(prefixPath.join(',')),\n  );\n\n  const namespaces = Array.from(\n    new Set(assetsWithPathPrefix.map((asset) => JSON.stringify(namespaceForAsset(asset)))),\n  )\n    .map((x) => JSON.parse(x))\n    .sort();\n\n  const cursorValue = (ns: string[]) => JSON.stringify([...prefixPath, ...ns]);\n  const cursorIndex = cursor ? namespaces.findIndex((ns) => cursor <= cursorValue(ns)) : 0;\n\n  if (cursorIndex === -1) {\n    return {\n      displayPathForAsset: namespaceForAsset,\n      displayed: [],\n      prevCursor: undefined,\n      nextCursor: undefined,\n    };\n  }\n\n  const namespaceSlice = namespaces.slice(cursorIndex, cursorIndex + PAGE_SIZE);\n\n  const prevPageIndex = Math.max(0, cursorIndex - PAGE_SIZE);\n  const prevCursor = cursorIndex !== 0 ? cursorValue(namespaces[prevPageIndex]) : undefined;\n  const nextPageIndex = cursorIndex + PAGE_SIZE;\n  const nextCursor =\n    namespaces.length > nextPageIndex ? cursorValue(namespaces[nextPageIndex]) : undefined;\n\n  return {\n    nextCursor,\n    prevCursor,\n    displayPathForAsset: namespaceForAsset,\n    displayed: filterAssetsByNamespace(\n      assetsWithPathPrefix,\n      namespaceSlice.map((ns) => [...prefixPath, ...ns]),\n    ),\n  };\n}\n\nconst filterAssetsByNamespace = (assets: Asset[], paths: string[][]) => {\n  return assets.filter((asset) =>\n    paths.some((path) => path.every((part, i) => part === asset.key.path[i])),\n  );\n};\n","import * as React from 'react';\n\nimport {tokenForAssetKey} from '../asset-graph/Utils';\n\nconst useSanitizedAssetSearch = (searchValue: string) => {\n  return React.useMemo(() => {\n    return (searchValue || '')\n      .replace(/(( ?> ?)|\\.|\\/)/g, '/')\n      .toLowerCase()\n      .trim();\n  }, [searchValue]);\n};\n\nexport const useAssetSearch = <A extends {key: {path: string[]}}>(\n  searchValue: string,\n  assets: A[],\n): A[] => {\n  const sanitizedSearch = useSanitizedAssetSearch(searchValue);\n  return React.useMemo(() => {\n    // If there is no search value, match everything.\n    if (!sanitizedSearch) {\n      return assets;\n    }\n    return assets.filter((a) => tokenForAssetKey(a.key).toLowerCase().includes(sanitizedSearch));\n  }, [assets, sanitizedSearch]);\n};\n\nexport const useAssetNodeSearch = <A extends {assetKey: {path: string[]}}>(\n  searchValue: string,\n  assetNodes: A[],\n): A[] => {\n  const sanitizedSearch = useSanitizedAssetSearch(searchValue);\n\n  return React.useMemo(() => {\n    // If there is no search value, match everything.\n    if (!sanitizedSearch) {\n      return assetNodes;\n    }\n    return assetNodes.filter((a) =>\n      tokenForAssetKey(a.assetKey).toLowerCase().includes(sanitizedSearch),\n    );\n  }, [assetNodes, sanitizedSearch]);\n};\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\ninterface Props {\n  $top: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top}) => $top}px;\n    background-color: ${Colors.White};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.KeylineGray};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n","import {Button, Dialog, DialogBody, DialogFooter, Icon, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissions} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  reloadFnForWorkspace,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationErrorDialog} from './RepositoryLocationErrorDialog';\n\nexport const ReloadAllButton: React.FC<{label?: string}> = ({label = 'Reload all'}) => {\n  const {canReloadWorkspace} = usePermissions();\n  const {reloading, tryReload, error, errorLocationId} = useRepositoryLocationReload({\n    scope: 'workspace',\n    reloadFn: reloadFnForWorkspace,\n  });\n\n  const [isOpen, setIsOpen] = React.useState(!!error);\n  React.useEffect(() => setIsOpen(!!error), [error]);\n\n  if (!canReloadWorkspace.enabled) {\n    return (\n      <Tooltip content={canReloadWorkspace.disabledReason}>\n        <Button icon={<Icon name=\"refresh\" />} disabled intent=\"none\">\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={tryReload} icon={<Icon name=\"refresh\" />} loading={reloading} intent=\"none\">\n        {label}\n      </Button>\n      {errorLocationId ? (\n        <RepositoryLocationErrorDialog\n          error={error}\n          location={errorLocationId}\n          reloading={reloading}\n          onTryReload={tryReload}\n          onDismiss={() => setIsOpen(false)}\n          isOpen={isOpen}\n        />\n      ) : (\n        <Dialog\n          icon=\"error\"\n          title=\"Reload error\"\n          canEscapeKeyClose={false}\n          canOutsideClickClose={false}\n          style={{width: '90%'}}\n          isOpen={isOpen}\n        >\n          <DialogBody>{error && <PythonErrorInfo error={error} />}</DialogBody>\n          <DialogFooter>\n            <Button onClick={() => setIsOpen(false)}>Dismiss</Button>\n          </DialogFooter>\n        </Dialog>\n      )}\n    </>\n  );\n};\n"],"names":["AssetActionMenu","props","repoAddress","asset","onWipe","usePermissions","canWipeAssets","canLaunchPipelineExecution","path","key","useMaterializationAction","onClick","loading","launchpadElement","position","content","placement","display","text","icon","purpose","disabled","e","to","definition","groupName","workspacePathFromAddress","assetDetailsPathForKey","view","lineageScope","enabled","intent","name","AssetPageHeader","assetKey","extra","breadcrumbs","React","list","href","reduce","accum","elem","encodeURIComponent","push","title","flex","alignItems","gap","style","maxWidth","overflow","marginBottom","BreadcrumbsWithSlashes","items","currentBreadcrumbRenderer","breadcrumbRenderer","BreadcrumbLink","AssetGlobalLineageLink","color","Colors","styled","Breadcrumbs","Link","AssetWipeDialog","assetKeys","isOpen","onClose","onComplete","requery","useMutation","ASSET_WIPE_MUTATION","variables","map","refetchQueries","requestWipe","wipe","length","Dialog","width","Group","direction","spacing","paddingLeft","margin","displayNameForAssetKey","topBorder","Button","gql","PYTHON_ERROR_FRAGMENT","AssetTable","assets","actionBarComponents","refreshState","liveDataByNode","prefixPath","displayPathForAsset","maxDisplayCount","toWipe","setToWipe","groupedByFirstComponent","forEach","displayPathKey","JSON","stringify","useSelectionReducer","Object","keys","checkedPaths","checkedIds","onToggleFactory","onToggleAll","checkedAssets","checkedPathsOnscreen","pageDisplayPathKeys","sort","slice","pathKey","has","Box","background","padding","vertical","left","right","top","zIndex","QueryRefresh","some","c","Tooltip","Icon","LaunchAssetExecutionButton","scope","selected","a","MoreActionsDropdown","clearSelection","Table","paddingTop","paddingBottom","Checkbox","indeterminate","checked","onChange","target","HTMLInputElement","minWidth","pathStr","idx","AssetEntryRow","parse","isSelected","onToggleChecked","AssetEmptyRow","undefined","colSpan","justifyContent","fullPath","linkUrl","isGroup","join","liveData","toGraphId","buildRepoAddress","repository","location","paddingRight","shiftKey","nativeEvent","MouseEvent","getModifierState","AssetLink","url","Description","description","markdownToPlaintext","split","RepositoryLink","showIcon","showRefresh","lastMaterialization","runId","event","stepKey","timestamp","TimestampDisplay","Number","timeFormat","showSeconds","showTimezone","StaleTag","includeFreshness","includeRunStatus","AnchorButton","A","showBulkWipeDialog","setShowBulkWipeDialog","Popover","Menu","ASSET_TABLE_DEFINITION_FRAGMENT","ASSET_TABLE_FRAGMENT","AssetsEmptyState","NonIdealState","validateSavedAssetView","storedValue","PAGE_SIZE","AssetsCatalogTable","setPrefixPath","groupSelector","useStateWithStorage","setView","useQueryPersistedState","queryKey","cursor","setCursor","search","setSearch","decode","qs","group","encode","searchGroup","setSearchGroup","searchPath","replace","toLowerCase","trim","assetsQuery","useQuery","ASSET_CATALOG_TABLE_QUERY","skip","notifyOnNetworkStatusChange","groupQuery","ASSET_CATALOG_GROUP_TABLE_QUERY","assetNodes","data","query","error","definitionToAssetTableFragment","assetsOrError","__typename","nodes","useAllAssets","pathMatches","useAssetSearch","filtered","filter","isEqual","buildAssetGroupSelector","cursorValue","cursorIndex","findIndex","ns","prevPageIndex","Math","max","nextPageIndex","displayed","prevCursor","nextCursor","buildFlatProps","namespaceForAsset","assetsWithPathPrefix","startsWith","namespaces","Array","from","Set","x","namespaceSlice","filterAssetsByNamespace","buildNamespaceProps","displayedKeys","useLiveDataForAssetKeys","liveDataRefreshState","runWatchers","useMergedRefresh","useQueryRefreshAtInterval","FIFTEEN_SECONDS","PythonErrorInfo","Loading","paginationProps","hasPrevCursor","hasNextCursor","popCursor","advanceCursor","reset","Wrapper","StickyTableContainer","$top","ButtonGroup","activeItems","buttons","id","tooltip","TextInput","value","placeholder","AssetGroupSuggest","_","bottom","assetGroups","uniqBy","b","localeCompare","repoContextNeeded","result","hasOwnProperty","Suggest","selectedItem","inputProps","rightElement","ClearButton","C","marginTop","marginRight","inputValueRenderer","partition","itemPredicate","includes","itemsEqual","itemRenderer","assetGroup","active","modifiers","handleClick","opacity","buildRepoPathForHuman","repositoryName","repositoryLocationName","noResults","onItemSelect","paths","every","part","i","useSanitizedAssetSearch","searchValue","sanitizedSearch","tokenForAssetKey","useAssetNodeSearch","ReloadAllButton","label","canReloadWorkspace","useRepositoryLocationReload","reloadFn","reloadFnForWorkspace","reloading","tryReload","errorLocationId","setIsOpen","onTryReload","onDismiss","canEscapeKeyClose","canOutsideClickClose","disabledReason"],"sourceRoot":""}