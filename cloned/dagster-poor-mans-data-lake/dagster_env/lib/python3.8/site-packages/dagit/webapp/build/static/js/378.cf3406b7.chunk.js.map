{"version":3,"file":"static/js/378.cf3406b7.chunk.js","mappings":"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","sources":["../../core/src/instance/RepoFilterButton.tsx","../../core/src/overview/OverviewTabs.tsx","../../core/src/instance/InstanceBackfills.tsx","../../core/src/ui/findDuplicateRepoNames.tsx","../../core/src/ui/useRepoExpansionState.tsx","../../core/src/overview/OverviewExpansionKey.tsx","../../core/src/overview/OverviewJobsTable.tsx","../../core/src/overview/sortRepoBuckets.tsx","../../core/src/overview/visibleRepoKeys.tsx","../../core/src/overview/OverviewJobsRoot.tsx","../../core/src/overview/OverviewSchedulesTable.tsx","../../core/src/overview/OverviewSchedulesRoot.tsx","../../core/src/overview/OverviewSensorsTable.tsx","../../core/src/overview/OverviewSensorsRoot.tsx","../../core/src/runs/batchRunsForTimeline.tsx","../../core/src/runs/mergeStatusToBackground.tsx","../../core/src/runs/RunTimeline.tsx","../../core/src/instance/NextTick.tsx","../../core/src/runs/useRunsForTimeline.tsx","../../core/src/overview/OverviewTimelineRoot.tsx","../../core/src/runs/useHourWindow.tsx","../../core/src/overview/OverviewRoot.tsx"],"sourcesContent":["import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton: React.FC = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"timeline\" title=\"Timeline\" to=\"/overview/timeline\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\n\nimport {BACKFILL_TABLE_FRAGMENT, BackfillTable} from './BackfillTable';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n} from './types/InstanceBackfillsQuery';\nimport {InstanceHealthForBackfillsQuery} from './types/InstanceHealthForBackfillsQuery';\n\nconst PAGE_SIZE = 10;\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n\n  const queryData = useQuery<InstanceHealthForBackfillsQuery>(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {},\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.backfillId\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  useDocumentTitle('Backfills');\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({partitionBackfillsOrError}) => {\n          if (partitionBackfillsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={partitionBackfillsOrError} />;\n          }\n\n          if (!partitionBackfillsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"no-results\"\n                  title=\"No backfills found\"\n                  description={<p>This instance does not have any backfill jobs.</p>}\n                />\n              </Box>\n            );\n          }\n\n          const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n          const backfillHealths = daemonHealths\n            .filter((daemon) => daemon.daemonType === 'BACKFILL')\n            .map((daemon) => daemon.required && daemon.healthy);\n          const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n          return (\n            <div>\n              {isBackfillHealthy ? null : (\n                <Box padding={{horizontal: 24, vertical: 16}}>\n                  <Alert\n                    intent=\"warning\"\n                    title=\"The backfill daemon is not running.\"\n                    description={\n                      <div>\n                        See the{' '}\n                        <a\n                          href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          dagster-daemon documentation\n                        </a>{' '}\n                        for more information on how to deploy the dagster-daemon process.\n                      </div>\n                    }\n                  />\n                </Box>\n              )}\n              <BackfillTable\n                backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n                refetch={queryResult.refetch}\n              />\n              {partitionBackfillsOrError.results.length > 0 ? (\n                <div style={{marginTop: '16px'}}>\n                  <CursorPaginationControls {...paginationProps} />\n                </div>\n              ) : null}\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($cursor: String, $limit: Int) {\n    partitionBackfillsOrError(cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          backfillId\n          status\n          backfillStatus\n          numRequested\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${BACKFILL_TABLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import * as React from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagit.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = React.useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = React.useCallback(\n    (repoAddress: RepoAddress) => {\n      const key = repoAddressAsHumanString(repoAddress);\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = React.useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = React.useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return React.useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, NonIdealState, PageHeader, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery} from './types/OverviewJobsQuery';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery>(OVERVIEW_JOBS_QUERY, {\n    fetchPolicy: 'network-only',\n    notifyOnNetworkStatusChange: true,\n  });\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nexport const OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; name: string};\n\nexport const OverviewScheduleTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((name) => {\n          flat.push({type: 'schedule', repoAddress, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.scheduleCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewSchedulesQuery} from './types/OverviewSchedulesQuery';\nimport {UnloadableSchedulesQuery} from './types/UnloadableSchedulesQuery';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery>(OVERVIEW_SCHEDULES_QUERY, {\n    fetchPolicy: 'network-only',\n    notifyOnNetworkStatusChange: true,\n  });\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter((name) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No schedules were found in the selected code locations'\n                : 'No schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewScheduleTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 0 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by schedule name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <Box\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          >\n            <SchedulerInfo daemonHealth={data?.instance.daemonHealth} />\n          </Box>\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery>(UNLOADABLE_SCHEDULES_QUERY);\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name}) => name);\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; name: string};\n\nexport const OverviewSensorTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((name) => {\n          flat.push({type: 'sensor', repoAddress, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.sensorCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewSensorsQuery} from './types/OverviewSensorsQuery';\nimport {UnloadableSensorsQuery} from './types/UnloadableSensorsQuery';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery>(OVERVIEW_SENSORS_QUERY, {\n    fetchPolicy: 'network-only',\n    notifyOnNetworkStatusChange: true,\n  });\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter((name) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewSensorTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 0 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by sensor name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSensorsQuery>(UNLOADABLE_SENSORS_QUERY);\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: string[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const sensorNames = sensors.map(({name}) => name);\n\n      if (sensorNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors: sensorNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","export interface RunWithTime {\n  startTime: number;\n  endTime: number;\n}\n\nexport type RunBatch<R extends RunWithTime> = {\n  runs: R[];\n  startTime: number;\n  endTime: number;\n  left: number;\n  width: number;\n};\n\ntype Config<R extends RunWithTime> = {\n  runs: R[];\n  start: number;\n  end: number;\n  width: number;\n  minChunkWidth: number;\n  minMultipleWidth: number;\n};\n\nexport const overlap = (a: {start: number; end: number}, b: {start: number; end: number}) =>\n  !(a.end < b.start || b.end < a.start);\n\n/**\n * Given a list of runs, batch any that overlap. Calculate `left` and `width` values for rendering\n * purposes, using minimum widths for very brief runs and overlapping batches.\n */\nexport const batchRunsForTimeline = <R extends RunWithTime>(config: Config<R>) => {\n  const {runs, start, end, width, minChunkWidth, minMultipleWidth} = config;\n  const rangeLength = end - start;\n\n  const now = Date.now();\n  const nowLeft = ((now - start) / (end - start)) * width;\n\n  const batches: RunBatch<R>[] = runs\n    .map((run) => {\n      const startTime = run.startTime;\n      const endTime = run.endTime || Date.now();\n      const left = Math.max(0, Math.floor(((startTime - start) / rangeLength) * width));\n      const runWidth = Math.max(\n        minChunkWidth,\n        Math.min(\n          Math.ceil(((endTime - startTime) / rangeLength) * width),\n          Math.ceil(((endTime - start) / rangeLength) * width),\n        ),\n      );\n\n      return {\n        runs: [run],\n        startTime,\n        endTime,\n        left,\n        width: runWidth,\n      };\n    })\n    .sort((a, b) => b.left - a.left);\n\n  const consolidated = [];\n\n  while (batches.length) {\n    const current = batches.shift();\n    const next = batches[0];\n    if (current) {\n      if (next && canBatch(current, next, minMultipleWidth, nowLeft)) {\n        // Remove `next`, consolidate it with `current`, and unshift it back on.\n        // This way, we keep looking for batches to consolidate with.\n        batches.shift();\n        current.runs = [...current.runs, ...next.runs];\n        current.startTime = Math.min(current.startTime, next.startTime);\n        current.endTime = Math.max(current.endTime, next.endTime);\n\n        // Identify the rightmost point for these two items.\n        const right = Math.max(\n          current.left + minMultipleWidth,\n          current.left + current.width,\n          next.left + next.width,\n        );\n\n        // Using the leftmost point, calculate the new width using the rightmost point\n        // determined above.\n        const minLeft = Math.min(current.left, next.left);\n        current.width = right - minLeft;\n        current.left = minLeft;\n\n        batches.unshift(current);\n      } else {\n        // If the next batch doesn't overlap, we've consolidated this batch\n        // all we can. Move on!\n        consolidated.push(current);\n      }\n    }\n  }\n\n  return consolidated;\n};\n\nconst canBatch = (\n  current: RunBatch<RunWithTime>,\n  next: RunBatch<RunWithTime>,\n  minMultipleWidth: number,\n  nowLeft: number,\n) => {\n  const currentStart = current.left;\n  const currentEnd = current.left + Math.max(current.width, minMultipleWidth);\n  const nextStart = next.left;\n  const nextEnd = next.left + Math.max(next.width, minMultipleWidth);\n\n  const minStart = Math.min(current.left, next.left);\n  const maxEnd = Math.max(\n    current.left + Math.max(current.width, minMultipleWidth),\n    next.left + Math.max(next.width, minMultipleWidth),\n  );\n\n  // If the batches overlap with each other but do NOT visually overlap with the \"now\"\n  // time marker, they can be batched.\n  return (\n    overlap({start: currentStart, end: currentEnd}, {start: nextStart, end: nextEnd}) &&\n    // ...and they do not combine to cross over the \"now\" marker\n    (minStart > nowLeft || maxEnd < nowLeft)\n  );\n};\n","import {Colors} from '@dagster-io/ui';\n\nimport {queuedStatuses, inProgressStatuses, failedStatuses, successStatuses} from './RunStatuses';\nimport {TimelineRun} from './RunTimeline';\n\ntype BackgroundStatus = 'inProgress' | 'queued' | 'failed' | 'succeeded' | 'scheduled';\n\nconst statusToColor = (status: BackgroundStatus) => {\n  switch (status) {\n    case 'queued':\n      return Colors.Blue200;\n    case 'inProgress':\n      return Colors.Blue500;\n    case 'failed':\n      return Colors.Red500;\n    case 'succeeded':\n      return Colors.Green500;\n    case 'scheduled':\n      return Colors.Blue200;\n  }\n};\n\nexport const mergeStatusToBackground = (runs: TimelineRun[]) => {\n  const counts = {\n    scheduled: 0,\n    queued: 0,\n    inProgress: 0,\n    failed: 0,\n    succeeded: 0,\n  };\n\n  runs.forEach(({status}) => {\n    if (status === 'SCHEDULED') {\n      counts.scheduled++;\n    } else if (queuedStatuses.has(status)) {\n      counts.queued++;\n    } else if (inProgressStatuses.has(status)) {\n      counts.inProgress++;\n    } else if (failedStatuses.has(status)) {\n      counts.failed++;\n    } else if (successStatuses.has(status)) {\n      counts.succeeded++;\n    }\n  });\n\n  const statusArr = Object.keys(counts).filter(\n    (status) => counts[status] > 0,\n  ) as BackgroundStatus[];\n\n  if (statusArr.length === 1) {\n    const [element] = statusArr;\n    return statusToColor(element);\n  }\n\n  // const colorList = statusArr.map(statusToColor);\n  const runCount = runs.length;\n\n  const colors = [\n    counts.failed > 0 ? {status: 'failed', pct: (counts.failed * 100) / runCount} : null,\n    counts.succeeded > 0 ? {status: 'succeeded', pct: (counts.succeeded * 100) / runCount} : null,\n    counts.inProgress > 0\n      ? {status: 'inProgress', pct: (counts.inProgress * 100) / runCount}\n      : null,\n    counts.queued > 0 ? {status: 'queued', pct: (counts.queued * 100) / runCount} : null,\n    counts.scheduled > 0 ? {status: 'scheduled', pct: (counts.scheduled * 100) / runCount} : null,\n  ].filter(Boolean);\n\n  let colorString = '';\n  let nextPct = 0;\n  let pctSoFar = 0;\n\n  for (let ii = 0; ii < colors.length; ii++) {\n    const value = colors[ii];\n    if (!value) {\n      continue;\n    }\n\n    const {status, pct} = value;\n    pctSoFar = nextPct;\n    nextPct += pct;\n    const colorForStatus = statusToColor(status as BackgroundStatus);\n    if (ii === 0) {\n      colorString += `${colorForStatus} ${pct.toFixed(1)}%, `;\n    } else if (ii === colors.length - 1) {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}%`;\n    } else {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}% ${nextPct.toFixed(1)}%, `;\n    }\n  }\n\n  return `linear-gradient(to right, ${colorString})`;\n};\n","import {\n  Box,\n  Colors,\n  Popover,\n  Mono,\n  FontFamily,\n  Tooltip,\n  Tag,\n  Icon,\n  Spinner,\n  MiddleTruncate,\n} from '@dagster-io/ui';\nimport moment from 'moment-timezone';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {TimezoneContext} from '../app/time/TimezoneContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {RunStatus} from '../types/globalTypes';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {repoAddressAsURLString} from '../workspace/repoAddressAsString';\nimport {repoAddressFromPath} from '../workspace/repoAddressFromPath';\nimport {RepoAddress} from '../workspace/types';\n\nimport {RepoSectionHeader, SECTION_HEADER_HEIGHT} from './RepoSectionHeader';\nimport {RunStatusDot} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses, successStatuses} from './RunStatuses';\nimport {TimeElapsed} from './TimeElapsed';\nimport {batchRunsForTimeline, RunBatch} from './batchRunsForTimeline';\nimport {mergeStatusToBackground} from './mergeStatusToBackground';\n\nconst ROW_HEIGHT = 32;\nconst TIME_HEADER_HEIGHT = 32;\nconst DATE_TIME_HEIGHT = TIME_HEADER_HEIGHT * 2;\nconst EMPTY_STATE_HEIGHT = 110;\nconst LEFT_SIDE_SPACE_ALLOTTED = 320;\nconst LABEL_WIDTH = 268;\nconst MIN_DATE_WIDTH_PCT = 10;\n\nconst ONE_HOUR_MSEC = 60 * 60 * 1000;\n\nexport type TimelineRun = {\n  id: string;\n  status: RunStatus | 'SCHEDULED';\n  startTime: number;\n  endTime: number;\n};\n\nexport type TimelineJob = {\n  key: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  jobType: 'job' | 'asset';\n  path: string;\n  runs: TimelineRun[];\n};\n\ninterface Props {\n  loading?: boolean;\n  jobs: TimelineJob[];\n  range: [number, number];\n}\n\nexport const RunTimeline = (props: Props) => {\n  const {loading = false, jobs, range} = props;\n  const [width, setWidth] = React.useState<number | null>(null);\n\n  const now = Date.now();\n  const [_, end] = range;\n  const includesTicks = now <= end;\n\n  const buckets = jobs.reduce((accum, job) => {\n    const {repoAddress} = job;\n    const repoKey = repoAddressAsURLString(repoAddress);\n    const jobsForRepo = accum[repoKey] || [];\n    return {...accum, [repoKey]: [...jobsForRepo, job]};\n  }, {});\n\n  const allKeys = Object.keys(buckets);\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const observer = React.useRef<ResizeObserver | null>(null);\n\n  const containerRef = React.useCallback((node) => {\n    if (node) {\n      observer.current = new ResizeObserver((entries) => {\n        const entry = entries[0];\n        setWidth(entry.contentRect.width);\n      });\n      observer.current.observe(node);\n    } else {\n      observer.current?.disconnect();\n    }\n  }, []);\n\n  if (!width) {\n    return (\n      <Timeline $height={DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT} ref={containerRef}>\n        <div />\n      </Timeline>\n    );\n  }\n\n  const repoOrder = Object.keys(buckets).sort((a, b) => a.localeCompare(b));\n\n  let nextTop = DATE_TIME_HEIGHT;\n  const expandedRepos = repoOrder.filter((repoKey) => expandedKeys.includes(repoKey));\n  const expandedJobCount = expandedRepos.reduce(\n    (accum, repoKey) => accum + buckets[repoKey].length,\n    0,\n  );\n  const height = repoOrder.length * SECTION_HEADER_HEIGHT + ROW_HEIGHT * expandedJobCount;\n  const duplicateRepoNames = findDuplicateRepoNames(\n    repoOrder.map((repoKey) => repoAddressFromPath(repoKey)?.name || ''),\n  );\n  const anyJobs = repoOrder.length > 0;\n  const timelineHeight = DATE_TIME_HEIGHT + (anyJobs ? height : EMPTY_STATE_HEIGHT);\n\n  return (\n    <Timeline $height={timelineHeight} ref={containerRef}>\n      <Box\n        padding={{left: 24}}\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{fontSize: '16px', height: DATE_TIME_HEIGHT}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        Jobs\n      </Box>\n      <TimeDividers interval={ONE_HOUR_MSEC} range={range} height={anyJobs ? height : 0} />\n      {repoOrder.length ? (\n        repoOrder.map((repoKey) => {\n          const name = repoAddressFromPath(repoKey)?.name;\n          const jobs = buckets[repoKey];\n          const top = nextTop;\n          const expanded = expandedKeys.includes(repoKey);\n          nextTop = top + SECTION_HEADER_HEIGHT + (expanded ? jobs.length * ROW_HEIGHT : 0);\n          return (\n            <TimelineSection\n              expanded={expanded}\n              range={range}\n              top={top}\n              key={repoKey}\n              repoKey={repoKey}\n              isDuplicateRepoName={!!(name && duplicateRepoNames.has(name))}\n              jobs={buckets[repoKey]}\n              onToggle={onToggle}\n              onToggleAll={onToggleAll}\n              width={width}\n            />\n          );\n        })\n      ) : (\n        <RunsEmptyOrLoading loading={loading} includesTicks={includesTicks} />\n      )}\n    </Timeline>\n  );\n};\n\ninterface TimelineSectionProps {\n  expanded: boolean;\n  repoKey: string;\n  isDuplicateRepoName: boolean;\n  jobs: TimelineJob[];\n  top: number;\n  range: [number, number];\n  width: number;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}\n\nconst TimelineSection = (props: TimelineSectionProps) => {\n  const {\n    expanded,\n    onToggle,\n    onToggleAll,\n    repoKey,\n    isDuplicateRepoName,\n    jobs,\n    range,\n    top,\n    width,\n  } = props;\n  const repoAddress = repoAddressFromPath(repoKey);\n  const repoName = repoAddress?.name || 'Unknown repo';\n  const repoLocation = repoAddress?.location || 'Unknown location';\n\n  const onClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.getModifierState('Shift')) {\n        onToggleAll(!expanded);\n      } else {\n        repoAddress && onToggle(repoAddress);\n      }\n    },\n    [expanded, onToggle, onToggleAll, repoAddress],\n  );\n\n  return (\n    <div>\n      <SectionHeaderContainer $top={top}>\n        <RepoSectionHeader\n          expanded={expanded}\n          repoName={repoName}\n          repoLocation={repoLocation}\n          onClick={onClick}\n          showLocation={isDuplicateRepoName}\n          rightElement={<RunStatusTags jobs={jobs} />}\n        />\n      </SectionHeaderContainer>\n      {expanded\n        ? jobs.map((job, ii) => (\n            <RunTimelineRow\n              key={job.key}\n              job={job}\n              top={top + SECTION_HEADER_HEIGHT + ii * ROW_HEIGHT}\n              range={range}\n              width={width}\n            />\n          ))\n        : null}\n    </div>\n  );\n};\n\nconst RunStatusTags = React.memo(({jobs}: {jobs: TimelineJob[]}) => {\n  const {inProgressCount, failedCount, succeededCount} = React.useMemo(() => {\n    let inProgressCount = 0;\n    let failedCount = 0;\n    let succeededCount = 0;\n    jobs.forEach(({runs}) => {\n      runs.forEach(({status}) => {\n        // Refine `SCHEDULED` out so that our Set checks below pass TypeScript.\n        if (status === 'SCHEDULED') {\n          return;\n        }\n        if (inProgressStatuses.has(status)) {\n          inProgressCount++;\n        } else if (failedStatuses.has(status)) {\n          failedCount++;\n        } else if (successStatuses.has(status)) {\n          succeededCount++;\n        }\n      });\n    });\n    return {inProgressCount, failedCount, succeededCount};\n  }, [jobs]);\n\n  const inProgressText =\n    inProgressCount === 1 ? '1 run in progress' : `${inProgressCount} runs in progress`;\n  const succeededText =\n    succeededCount === 1 ? '1 run succeeded' : `${succeededCount} runs succeeded`;\n  const failedText = failedCount === 1 ? '1 run failed' : `${failedCount} runs failed`;\n\n  return (\n    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n      {inProgressCount > 0 ? (\n        <Tooltip content={<StatusSpan>{inProgressText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"primary\">{inProgressCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {succeededCount > 0 ? (\n        <Tooltip content={<StatusSpan>{succeededText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"success\">{succeededCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {failedCount > 0 ? (\n        <Tooltip content={<StatusSpan>{failedText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"danger\">{failedCount}</Tag>\n        </Tooltip>\n      ) : null}\n    </Box>\n  );\n});\n\nconst StatusSpan = styled.span`\n  white-space: nowrap;\n`;\n\nconst SectionHeaderContainer = styled.div<{$top: number}>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n\n  ${({$top}) => `transform: translateY(${$top}px);`}\n`;\n\ntype DateMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n  width: number;\n};\n\ntype TimeMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n};\n\ninterface TimeDividersProps {\n  height: number;\n  interval: number;\n  range: [number, number];\n}\n\nconst TimeDividers = (props: TimeDividersProps) => {\n  const {interval, range, height} = props;\n  const [start, end] = range;\n  const locale = navigator.language;\n  const [tz] = React.useContext(TimezoneContext);\n  const timeZone = tz === 'Automatic' ? browserTimezone() : tz;\n\n  const dateFormat = React.useMemo(() => {\n    return new Intl.DateTimeFormat(locale, {\n      month: 'numeric',\n      day: 'numeric',\n      year: 'numeric',\n      timeZone,\n    });\n  }, [locale, timeZone]);\n\n  const timeFormat = React.useMemo(() => {\n    return new Intl.DateTimeFormat(locale, {\n      hour: 'numeric',\n      timeZone,\n    });\n  }, [locale, timeZone]);\n\n  const dateMarkers: DateMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startAtTimezone = moment.tz(start, timeZone);\n\n    const dayBoundaries = [];\n    const cursor = startAtTimezone.startOf('day');\n\n    while (cursor.valueOf() < end) {\n      const dayStart = cursor.valueOf();\n      cursor.add(1, 'day');\n      const dayEnd = cursor.valueOf();\n      dayBoundaries.push({dayStart, dayEnd});\n    }\n\n    return dayBoundaries.map(({dayStart, dayEnd}) => {\n      const date = new Date(dayStart);\n      const startLeftMsec = dayStart - start;\n      const dayLength = dayEnd - dayStart; // This can vary with DST\n      const endRight = startLeftMsec + dayLength;\n\n      const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n      const right = Math.min(100, (endRight / totalTime) * 100);\n\n      return {\n        label: dateFormat.format(date),\n        key: date.toString(),\n        left,\n        width: right - left,\n      };\n    });\n  }, [dateFormat, end, start, timeZone]);\n\n  const timeMarkers: TimeMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startGap = start % interval;\n    const firstMarker = start - startGap;\n    const markerCount = Math.ceil(totalTime / interval) + 1;\n    return [...new Array(markerCount)]\n      .map((_, ii) => {\n        const time = firstMarker + ii * interval;\n        const date = new Date(time);\n        const label = timeFormat.format(date).replace(' ', '');\n        return {\n          label,\n          key: date.toString(),\n          left: ((time - start) / totalTime) * 100,\n        };\n      })\n      .filter((marker) => marker.left > 0);\n  }, [end, start, interval, timeFormat]);\n\n  const now = Date.now();\n  const nowLeft = `${(((now - start) / (end - start)) * 100).toPrecision(3)}%`;\n\n  return (\n    <DividerContainer style={{height: `${height}px`}}>\n      <DividerLabels>\n        {dateMarkers.map((marker) => (\n          <DateLabel\n            key={marker.key}\n            style={{\n              left: `${marker.left.toPrecision(3)}%`,\n              width: `${marker.width.toPrecision(3)}%`,\n            }}\n          >\n            {marker.width > MIN_DATE_WIDTH_PCT ? (\n              <Box flex={{justifyContent: 'center'}}>{marker.label}</Box>\n            ) : null}\n          </DateLabel>\n        ))}\n      </DividerLabels>\n      <DividerLabels>\n        {timeMarkers.map((marker) => (\n          <TimeLabel key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}}>\n            {marker.label}\n          </TimeLabel>\n        ))}\n      </DividerLabels>\n      <DividerLines>\n        <DividerLine style={{left: 0, backgroundColor: Colors.Gray200}} />\n        {timeMarkers.map((marker) => (\n          <DividerLine key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}} />\n        ))}\n        {now >= start && now <= end ? (\n          <>\n            <NowMarker style={{left: nowLeft}}>Now</NowMarker>\n            <DividerLine style={{left: nowLeft, backgroundColor: Colors.Blue500, zIndex: 1}} />\n          </>\n        ) : null}\n      </DividerLines>\n    </DividerContainer>\n  );\n};\n\nconst DividerContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n  right: 0;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Gray800};\n`;\n\nconst DividerLabels = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray}, inset 0 1px 0 ${Colors.KeylineGray},\n    inset -1px 0 0 ${Colors.KeylineGray};\n  height: ${TIME_HEADER_HEIGHT}px;\n  position: relative;\n  user-select: none;\n  font-size: 12px;\n  width: 100%;\n  overflow: hidden;\n`;\n\nconst DateLabel = styled.div`\n  position: absolute;\n  padding: 8px 0;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray};\n  white-space: nowrap;\n`;\n\nconst TimeLabel = styled.div`\n  position: absolute;\n  padding: 8px;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray};\n  white-space: nowrap;\n`;\n\nconst DividerLines = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray}, inset -1px 0 0 ${Colors.KeylineGray};\n`;\n\nconst DividerLine = styled.div`\n  background-color: ${Colors.KeylineGray};\n  height: 100%;\n  position: absolute;\n  top: 0;\n  width: 1px;\n`;\n\nconst NowMarker = styled.div`\n  background-color: ${Colors.Blue500};\n  border-radius: 1px;\n  color: ${Colors.White};\n  cursor: default;\n  font-size: 12px;\n  line-height: 12px;\n  margin-left: -12px;\n  padding: 1px 4px;\n  position: absolute;\n  top: -14px;\n  user-select: none;\n`;\n\nconst MIN_CHUNK_WIDTH = 2;\nconst MIN_WIDTH_FOR_MULTIPLE = 12;\n\nconst RunTimelineRow = ({\n  job,\n  top,\n  range,\n  width: containerWidth,\n}: {\n  job: TimelineJob;\n  top: number;\n  range: [number, number];\n  width: number;\n}) => {\n  const [start, end] = range;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n  const {runs} = job;\n\n  // Batch overlapping runs in this row.\n  const batched = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs,\n      start,\n      end,\n      width,\n      minChunkWidth: MIN_CHUNK_WIDTH,\n      minMultipleWidth: MIN_WIDTH_FOR_MULTIPLE,\n    });\n\n    return batches;\n  }, [runs, start, end, width]);\n\n  if (!job.runs.length) {\n    return null;\n  }\n\n  return (\n    <Row $top={top}>\n      <JobName>\n        <Icon name={job.jobType === 'asset' ? 'asset' : 'job'} />\n        <div style={{width: LABEL_WIDTH}}>\n          {job.jobType === 'asset' ? (\n            <span style={{color: Colors.Gray900}}>\n              <MiddleTruncate text={job.jobName} />\n            </span>\n          ) : (\n            <Link to={job.path}>\n              <MiddleTruncate text={job.jobName} />\n            </Link>\n          )}\n        </div>\n      </JobName>\n      <RunChunks>\n        {batched.map((batch) => {\n          const {left, width, runs} = batch;\n          const runCount = runs.length;\n          return (\n            <RunChunk\n              key={batch.runs[0].id}\n              $background={mergeStatusToBackground(batch.runs)}\n              $multiple={runCount > 1}\n              style={{\n                left: `${left}px`,\n                width: `${width}px`,\n              }}\n            >\n              <Popover\n                content={<RunHoverContent job={job} batch={batch} />}\n                position=\"top\"\n                interactionKind=\"hover\"\n                className=\"chunk-popover-target\"\n              >\n                <Box\n                  flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n                  style={{height: '100%'}}\n                >\n                  {runCount > 1 ? <BatchCount>{batch.runs.length}</BatchCount> : null}\n                </Box>\n              </Popover>\n            </RunChunk>\n          );\n        })}\n      </RunChunks>\n    </Row>\n  );\n};\n\nconst RunsEmptyOrLoading = (props: {loading: boolean; includesTicks: boolean}) => {\n  const {loading, includesTicks} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          {includesTicks ? 'Loading runs and scheduled ticks' : 'Loading runs'}\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>\n          {includesTicks\n            ? 'No runs or scheduled ticks in this time period.'\n            : 'No runs in this time period.'}\n        </div>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n            Launch a run\n          </AnchorButton>\n          <span>or</span>\n          <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n            Materialize an asset\n          </AnchorButton>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={Colors.White}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n    >\n      {content()}\n    </Box>\n  );\n};\n\nconst Timeline = styled.div<{$height: number}>`\n  ${({$height}) => `height: ${$height}px;`}\n  position: relative;\n`;\n\nconst Row = styled.div<{$top: number}>`\n  align-items: center;\n  box-shadow: inset 0 -1px 0 ${Colors.KeylineGray};\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: ${ROW_HEIGHT + 1}px;\n  padding: 1px 0;\n  position: absolute;\n  left: 0;\n  top: 0;\n\n  ${({$top}) => `transform: translateY(${$top}px);`}\n\n  :first-child, :hover {\n    box-shadow: inset 0 1px 0 ${Colors.KeylineGray}, inset 0 -1px 0 ${Colors.KeylineGray};\n  }\n\n  :hover {\n    background-color: ${Colors.Gray10};\n  }\n`;\n\nconst JobName = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: flex-start;\n  gap: 8px;\n  line-height: 16px;\n  overflow: hidden;\n  padding: 0 12px 0 24px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n`;\n\nconst RunChunks = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n`;\n\ninterface ChunkProps {\n  $background: string;\n  $multiple: boolean;\n}\n\nconst RunChunk = styled.div<ChunkProps>`\n  align-items: center;\n  background: ${({$background}) => $background};\n  border-radius: 2px;\n  height: ${ROW_HEIGHT - 4}px;\n  position: absolute;\n  top: 2px;\n  ${({$multiple}) => ($multiple ? `min-width: ${MIN_WIDTH_FOR_MULTIPLE}px` : null)};\n\n  transition: background-color 300ms linear, width 300ms ease-in-out;\n\n  .chunk-popover-target {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst BatchCount = styled.div`\n  color: ${Colors.White};\n  cursor: default;\n  font-family: ${FontFamily.monospace};\n  font-size: 14px;\n  font-weight: 600;\n  user-select: none;\n`;\n\ninterface RunHoverContentProps {\n  job: TimelineJob;\n  batch: RunBatch<TimelineRun>;\n}\n\nconst RunHoverContent = (props: RunHoverContentProps) => {\n  const {job, batch} = props;\n  const sliced = batch.runs.slice(0, 50);\n  const remaining = batch.runs.length - sliced.length;\n\n  return (\n    <Box style={{width: '260px'}}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <HoverContentJobName>{job.jobName}</HoverContentJobName>\n      </Box>\n      <div style={{maxHeight: '240px', overflowY: 'auto'}}>\n        {sliced.map((run, ii) => (\n          <Box\n            key={run.id}\n            border={ii > 0 ? {side: 'top', width: 1, color: Colors.KeylineGray} : null}\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            padding={{vertical: 8, horizontal: 12}}\n          >\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusDot status={run.status} size={8} />\n              {run.status === 'SCHEDULED' ? (\n                'Scheduled'\n              ) : (\n                <Link to={`/runs/${run.id}`}>\n                  <Mono>{run.id.slice(0, 8)}</Mono>\n                </Link>\n              )}\n            </Box>\n            <Mono>\n              {run.status === 'SCHEDULED' ? (\n                <TimestampDisplay timestamp={run.startTime / 1000} />\n              ) : (\n                <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n              )}\n            </Mono>\n          </Box>\n        ))}\n      </div>\n      {remaining > 0 ? (\n        <Box padding={12} border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n          <Link to={`${job.path}runs`}>+ {remaining} more</Link>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst HoverContentJobName = styled.strong`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, CaptionMono} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationStatus} from '../types/globalTypes';\n\nimport {ScheduleFutureTicksFragment} from './types/ScheduleFutureTicksFragment';\n\nconst TIME_FORMAT = {\n  showTimezone: true,\n  showSeconds: true,\n};\n\ninterface Props {\n  schedules: ScheduleFutureTicksFragment[];\n}\n\nexport const NextTick = (props: Props) => {\n  const {schedules} = props;\n\n  const nextTick = React.useMemo(() => {\n    const timestamps = schedules.map((schedule) => {\n      const {executionTimezone, futureTicks, scheduleState} = schedule;\n      if (scheduleState.status === InstigationStatus.RUNNING) {\n        return {\n          executionTimezone,\n          earliest: Math.min(...futureTicks.results.map(({timestamp}) => timestamp)),\n        };\n      }\n      return null;\n    });\n\n    return timestamps.reduce((earliestOverall, timestamp) => {\n      if (\n        !earliestOverall ||\n        (timestamp?.earliest && timestamp.earliest < earliestOverall?.earliest)\n      ) {\n        return timestamp;\n      }\n      return earliestOverall;\n    }, null);\n  }, [schedules]);\n\n  if (nextTick) {\n    return (\n      <CaptionMono color={Colors.Gray500}>\n        Next tick:{' '}\n        <TimestampDisplay\n          timestamp={nextTick.earliest}\n          timezone={nextTick.executionTimezone}\n          timeFormat={TIME_FORMAT}\n        />\n      </CaptionMono>\n    );\n  }\n\n  return null;\n};\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../types/globalTypes';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/RunTimelineQuery';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (jobTicks.length || jobRuns.length) {\n            jobs.push({\n              key: jobKey,\n              jobName,\n              jobType: isAdHoc ? 'asset' : 'job',\n              repoAddress,\n              path: workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: pipeline.name,\n                isJob: pipeline.isJob,\n              }),\n              runs: [...jobRuns, ...jobTicks],\n            } as TimelineJob);\n          }\n        }\n      }\n    }\n\n    const earliest = jobs.reduce((accum, job) => {\n      const startTimes = job.runs.map((job) => job.startTime);\n      return {...accum, [job.key]: Math.min(...startTimes)};\n    }, {} as {[jobKey: string]: number});\n\n    return jobs.sort((a, b) => earliest[a.key] - earliest[b.key]);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Page, PageHeader, Heading, Box, TextInput, Button, ButtonGroup} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {OverviewTabs} from './OverviewTabs';\n\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\nexport const OverviewTimelineRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Runs');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(() => jobs.filter(({key}) => visibleJobKeys.has(key)), [\n    jobs,\n    visibleJobKeys,\n  ]);\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"timeline\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n    </Page>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagit.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(() => [hourWindow, setHourWindowWithDefault], [\n    hourWindow,\n    setHourWindowWithDefault,\n  ]);\n};\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\n\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/timeline\">\n        <OverviewTimelineRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/backfills\">\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/timeline\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["RepoFilterButton","React","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","icon","label","options","onBrowse","onToggle","selected","padding","top","intent","onClick","name","rightIcon","length","OverviewTabs","props","refreshState","tab","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","TabLink","id","title","to","bottom","QueryRefresh","InstanceBackfills","useTrackPageView","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","useCursorPaginatedQuery","query","BACKFILLS_QUERY","variables","pageSize","nextCursorForResult","result","partitionBackfillsOrError","__typename","results","PAGE_SIZE","backfillId","undefined","getResultArray","queryResult","paginationProps","useQueryRefreshAtInterval","FIFTEEN_SECONDS","useDocumentTitle","Page","PageHeader","tabs","Loading","allowStaleData","PythonErrorInfo","error","vertical","NonIdealState","description","backfillHealths","data","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","map","required","healthy","isBackfillHealthy","every","x","horizontal","Alert","href","target","rel","BackfillTable","backfills","slice","refetch","marginTop","gql","INSTANCE_HEALTH_FRAGMENT","BACKFILL_TABLE_FRAGMENT","PYTHON_ERROR_FRAGMENT","findDuplicateRepoNames","repoNames","uniques","Set","duplicates","forEach","repoName","has","add","validateExpandedKeys","parsed","Array","isArray","useRepoExpansionState","collapsedKey","allKeys","collapsedStorageKey","basePath","key","buildStorageKey","AppContext","useStateWithStorage","collapsedKeys","setCollapsedKeys","repoAddress","repoAddressAsHumanString","current","nextCollapsedKeys","delete","from","onToggleAll","expand","expandedKeys","collapsedSet","OVERVIEW_COLLAPSED_KEY","OverviewJobsTable","repos","parentRef","flattened","flat","jobs","push","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","overflow","ref","$totalHeight","index","size","start","height","expanded","showLocation","rightElement","Tooltip","content","placement","Tag","VirtualizedJobRow","sortRepoBuckets","buckets","sort","a","b","aString","bString","localeCompare","visibleRepoKeys","option","buildRepoAddress","repository","repositoryLocation","OverviewJobsRoot","searchValue","setSearchValue","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","loading","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","gap","grow","TextInput","value","onChange","e","placeholder","Spinner","purpose","paddingTop","color","Colors","anyReposHidden","workspaceOrError","entries","locationEntries","entry","locationOrLoadError","repositories","repo","pipelines","isHiddenAssetGroupJob","pipeline","OverviewScheduleTable","schedules","scheduleCount","VirtualizedScheduleRow","OverviewSchedulesRoot","OVERVIEW_SCHEDULES_QUERY","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","border","side","SchedulerInfo","setIsOpen","Button","Dialog","maxWidth","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","Unloadable","scheduleStates","showSubheading","scheduleNames","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","sensorStates","sensorNames","overlap","end","canBatch","next","minMultipleWidth","nowLeft","currentStart","left","currentEnd","Math","max","nextStart","nextEnd","minStart","min","maxEnd","statusToColor","status","mergeStatusToBackground","runs","counts","scheduled","queued","inProgress","failed","succeeded","queuedStatuses","inProgressStatuses","failedStatuses","successStatuses","statusArr","Object","keys","element","runCount","colors","pct","Boolean","colorString","nextPct","pctSoFar","colorForStatus","toFixed","ROW_HEIGHT","RunTimeline","range","setWidth","now","Date","includesTicks","reduce","accum","job","repoAddressAsURLString","jobsForRepo","observer","containerRef","node","ResizeObserver","contentRect","observe","disconnect","Timeline","$height","DATE_TIME_HEIGHT","repoOrder","nextTop","TIME_HEADER_HEIGHT","expandedJobCount","SECTION_HEADER_HEIGHT","repoAddressFromPath","anyJobs","timelineHeight","fontSize","TimeDividers","interval","TimelineSection","isDuplicateRepoName","RunsEmptyOrLoading","repoLocation","location","getModifierState","SectionHeaderContainer","$top","RepoSectionHeader","RunStatusTags","RunTimelineRow","inProgressCount","failedCount","succeededCount","inProgressText","succeededText","failedText","StatusSpan","styled","locale","navigator","language","TimezoneContext","tz","timeZone","browserTimezone","dateFormat","Intl","DateTimeFormat","month","day","year","timeFormat","hour","dateMarkers","totalTime","dayBoundaries","cursor","moment","startOf","valueOf","dayStart","dayEnd","date","startLeftMsec","endRight","right","format","toString","timeMarkers","firstMarker","markerCount","ceil","_","time","replace","marker","toPrecision","DividerContainer","DividerLabels","DateLabel","TimeLabel","DividerLines","DividerLine","backgroundColor","NowMarker","zIndex","FontFamily","containerWidth","batched","batches","config","minChunkWidth","rangeLength","run","startTime","endTime","floor","consolidated","shift","minLeft","unshift","batchRunsForTimeline","Row","JobName","Icon","jobType","MiddleTruncate","text","jobName","path","RunChunks","batch","RunChunk","$background","$multiple","Popover","RunHoverContent","position","interactionKind","className","BatchCount","background","AnchorButton","A","sliced","remaining","HoverContentJobName","maxHeight","overflowY","timestamp","TimeElapsed","startUnix","endUnix","SCHEDULE_FUTURE_TICKS_FRAGMENT","makeJobKey","RUN_TIMELINE_QUERY","RUN_TIME_FRAGMENT","ONE_HOUR","hourWindowToOffset","hourWindow","OverviewTimelineRoot","defaultValue","validate","setHourWindow","setHourWindowWithDefault","useHourWindow","setNow","offsetMsec","setOffsetMsec","timer","setInterval","clearInterval","onPageEarlier","onPageLater","onPageNow","Number","LOOKAHEAD_HOURS","runsFilter","startSec","endSec","inProgressFilter","statuses","RunStatus","createdBefore","terminatedFilter","doneStatuses","updatedAfter","tickCursor","ticksUntil","previousData","initialLoading","unterminated","terminated","runsByJobKey","repositoryOrigin","runJobKey","repositoryName","repositoryLocationName","pipelineName","jobsWithRuns","locationEntry","schedule","jobTicks","scheduleState","InstigationStatus","futureTicks","isAdHoc","jobKey","jobRuns","workspacePipelinePath","earliest","startTimes","useRunsForTimeline","visibleJobKeys","searchLower","flatMap","visibleJobs","ButtonGroup","activeItems","buttons","hrWindow","OverviewRoot","render"],"sourceRoot":""}