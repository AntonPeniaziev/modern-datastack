{"version":3,"file":"static/js/960.c5862beb.chunk.js","mappings":"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","sources":["../../core/src/asset-graph/AssetEdges.tsx","../../core/src/assets/LaunchAssetObservationButton.tsx","../../core/src/asset-graph/AssetGraphJobSidebar.tsx","../../core/src/assets/LastMaterializationMetadata.tsx","../../core/src/assets/AssetSidebarActivitySummary.tsx","../../core/src/asset-graph/SidebarAssetInfo.tsx","../../core/src/asset-graph/useFindAssetLocation.tsx","../../core/src/asset-graph/AssetGraphExplorer.tsx","../../core/src/asset-graph/AssetGroupNode.tsx","../../core/src/asset-graph/AssetNode.tsx","../../core/src/asset-graph/AssetRunLinking.tsx","../../core/src/asset-graph/ForeignNode.tsx","../../core/src/asset-graph/useAssetGraphData.tsx","../../core/src/asset-graph/useLiveDataForAssetKeys.tsx","../../core/src/assets/AssetConfig.tsx","../../core/src/assets/AssetDefinedInMultipleReposNotice.tsx","../../core/src/assets/AssetLineageElements.tsx","../../core/src/assets/AssetMaterializationGraphs.tsx","../../core/src/assets/AssetMetadata.tsx","../../core/src/assets/CurrentMinutesLateTag.tsx","../../core/src/assets/CurrentRunsBanner.tsx","../../core/src/assets/DependsOnSelfBanner.tsx","../../core/src/assets/FailedRunsSinceMaterializationBanner.tsx","../../core/src/partitions/PartitionsBackfill.tsx","../../core/src/assets/RunningBackfillsNotice.tsx","../../core/src/assets/LaunchAssetChoosePartitionsDialog.tsx","../../core/src/assets/LaunchAssetExecutionButton.tsx","../../core/src/assets/MultipartitioningSupport.tsx","../../core/src/assets/PartitionHealthSummary.tsx","../../core/src/assets/StaleTag.tsx","../../core/src/assets/groupByPartition.tsx","../../core/src/assets/usePartitionDimensionRanges.tsx","../../core/src/assets/usePartitionHealthData.tsx","../../core/src/assets/usePartitionNameForPipeline.tsx","../../core/src/assets/useRecentAssetEvents.tsx","../../core/src/launchpad/ConfigEditorConfigPicker.tsx","../../core/src/launchpad/LaunchRootExecutionButton.tsx","../../core/src/launchpad/useLaunchWithTelemetry.ts","../../core/src/launchpad/LaunchpadHooksContext.tsx","../../ui/src/components/ConfigEditorWithSchema.tsx","../../core/src/launchpad/LaunchpadTransientSessionContainer.tsx","../../core/src/launchpad/LaunchpadRoot.tsx","../../ui/src/components/configeditor/codemirror-yaml/lint.js","../../ui/src/components/ConfigEditor.tsx","../../ui/src/components/configeditor/isHelpContextEqual.ts","../../ui/src/components/configeditor/ConfigEditorHelp.tsx","../../core/src/configeditor/ConfigEditorUtils.tsx","../../core/src/launchpad/ConfigEditorModePicker.tsx","../../core/src/launchpad/OpSelector.tsx","../../core/src/launchpad/RunPreview.tsx","../../core/src/launchpad/scaffoldType.ts","../../core/src/launchpad/LaunchpadSession.tsx","../../core/src/launchpad/LaunchpadSessionError.tsx","../../core/src/launchpad/LaunchpadSessionLoading.tsx","../../core/src/launchpad/LoadingOverlay.tsx","../../core/src/launchpad/SessionSettingsBar.tsx","../../core/src/launchpad/TagEditor.tsx","../../core/src/partitions/PartitionRangeInput.tsx","../../core/src/partitions/PartitionRangeWizard.tsx","../../core/src/partitions/PartitionStateCheckboxes.tsx","../../core/src/pipelines/NonIdealPipelineQueryResult.tsx","../../core/src/pipelines/useJobTitle.tsx","../../core/src/ui/ClearButton.tsx","../../core/src/ui/markdownToPlaintext.ts","../../core/src/versions/Version.tsx","../../ui/src/components/Select.tsx"],"sourcesContent":["import {Colors} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {buildSVGPath} from './Utils';\nimport {AssetLayoutEdge} from './layout';\n\nexport const AssetEdges: React.FC<{\n  edges: AssetLayoutEdge[];\n  highlighted: string | null;\n  strokeWidth?: number;\n  baseColor?: string;\n}> = ({edges, highlighted, strokeWidth = 4, baseColor = Colors.KeylineGray}) => {\n  // Note: we render the highlighted edges twice, but it's so that the first item with\n  // all the edges in it can remain memoized.\n  return (\n    <React.Fragment>\n      <AssetEdgeSet color={baseColor} edges={edges} strokeWidth={strokeWidth} />\n      <AssetEdgeSet\n        color={Colors.Blue500}\n        edges={edges.filter(({fromId, toId}) => highlighted === fromId || highlighted === toId)}\n        strokeWidth={strokeWidth}\n      />\n    </React.Fragment>\n  );\n};\n\nexport const AssetEdgeSet: React.FC<{\n  edges: AssetLayoutEdge[];\n  color: string;\n  strokeWidth: number;\n}> = React.memo(({edges, color, strokeWidth}) => (\n  <>\n    <defs>\n      <marker\n        id={`arrow${btoa(color)}`}\n        viewBox=\"0 0 8 10\"\n        refX=\"1\"\n        refY=\"5\"\n        markerUnits=\"strokeWidth\"\n        markerWidth={strokeWidth}\n        orient=\"auto\"\n      >\n        <path d=\"M 0 0 L 8 5 L 0 10 z\" fill={color} />\n      </marker>\n    </defs>\n    {edges.map((edge, idx) => (\n      <path\n        key={idx}\n        d={buildSVGPath({source: edge.from, target: edge.to})}\n        stroke={color}\n        strokeWidth={strokeWidth}\n        fill=\"none\"\n        markerEnd={`url(#arrow${btoa(color)})`}\n      />\n    ))}\n  </>\n));\n","import {ApolloClient, useApolloClient} from '@apollo/client';\nimport {Button, Spinner, Tooltip, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {usePermissions} from '../app/Permissions';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {LaunchPipelineExecutionVariables} from '../runs/types/LaunchPipelineExecution';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nimport {\n  buildAssetCollisionsAlert,\n  executionParamsForAssetJob,\n  getCommonJob,\n  LAUNCH_ASSET_LOADER_QUERY,\n} from './LaunchAssetExecutionButton';\nimport {AssetKey} from './types';\nimport {LaunchAssetExecutionAssetNodeFragment} from './types/LaunchAssetExecutionAssetNodeFragment';\nimport {\n  LaunchAssetLoaderQuery,\n  LaunchAssetLoaderQueryVariables,\n} from './types/LaunchAssetLoaderQuery';\n\ntype ObserveAssetsState =\n  | {type: 'none'}\n  | {type: 'loading'}\n  | {type: 'error'; error: string}\n  | {\n      type: 'single-run';\n      executionParams: LaunchPipelineExecutionVariables['executionParams'];\n    };\n\nexport const LaunchAssetObservationButton: React.FC<{\n  assetKeys: AssetKey[]; // Memoization not required\n  intent?: 'primary' | 'none';\n  preferredJobName?: string;\n}> = ({assetKeys, preferredJobName, intent = 'none'}) => {\n  const {canLaunchPipelineExecution} = usePermissions();\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const [state, setState] = React.useState<ObserveAssetsState>({type: 'none'});\n  const client = useApolloClient();\n\n  const count = assetKeys.length > 1 ? ` (${assetKeys.length})` : '';\n  const label = `Observe sources ${count}`;\n\n  if (!assetKeys.length) {\n    return <span />;\n  }\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return (\n      <Tooltip content=\"You do not have permission to observe source assets\">\n        <Button intent={intent} icon={<Icon name=\"observation\" />} disabled>\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  const onClick = async (e: React.MouseEvent<any>) => {\n    if (state.type === 'loading') {\n      return;\n    }\n    setState({type: 'loading'});\n\n    const result = await client.query<LaunchAssetLoaderQuery, LaunchAssetLoaderQueryVariables>({\n      query: LAUNCH_ASSET_LOADER_QUERY,\n      variables: {assetKeys: assetKeys.map(({path}) => ({path}))},\n    });\n\n    if (result.data.assetNodeDefinitionCollisions.length) {\n      showCustomAlert(buildAssetCollisionsAlert(result.data));\n      setState({type: 'none'});\n      return;\n    }\n\n    const assets = result.data.assetNodes;\n    const forceLaunchpad = e.shiftKey;\n\n    const next = await stateForObservingAssets(client, assets, forceLaunchpad, preferredJobName);\n\n    if (next.type === 'error') {\n      showCustomAlert({\n        title: 'Unable to observe',\n        body: next.error,\n      });\n      setState({type: 'none'});\n      return;\n    }\n\n    if (next.type === 'single-run') {\n      await launchWithTelemetry({executionParams: next.executionParams}, 'toast');\n      setState({type: 'none'});\n    } else {\n      setState(next);\n    }\n  };\n\n  return (\n    <Button\n      intent={intent}\n      onClick={onClick}\n      icon={\n        state.type === 'loading' ? <Spinner purpose=\"body-text\" /> : <Icon name=\"observation\" />\n      }\n    >\n      {label}\n    </Button>\n  );\n};\n\nasync function stateForObservingAssets(\n  _client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  _forceLaunchpad: boolean,\n  preferredJobName?: string,\n): Promise<ObserveAssetsState> {\n  if (assets.some((x) => !x.isSource)) {\n    return {\n      type: 'error',\n      error: 'One or more non-source assets are selected and cannot be observed.',\n    };\n  }\n\n  if (assets.some((x) => !x.isObservable)) {\n    return {\n      type: 'error',\n      error: 'One or more of the selected source assets are unversioned and cannot be observed.',\n    };\n  }\n  const repoAddress = buildRepoAddress(\n    assets[0]?.repository.name || '',\n    assets[0]?.repository.location.name || '',\n  );\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (\n    !assets.every(\n      (a) =>\n        a.repository.name === repoAddress.name &&\n        a.repository.location.name === repoAddress.location,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: `Assets must be in ${repoName} to be materialized together.`,\n    };\n  }\n\n  const jobName = getCommonJob(assets, preferredJobName);\n  if (!jobName) {\n    return {\n      type: 'error',\n      error: 'Assets must be in the same job to be observed together.',\n    };\n  }\n\n  return {\n    type: 'single-run',\n    executionParams: executionParamsForAssetJob(repoAddress, jobName, assets, []),\n  };\n}\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {NonIdealPipelineQueryResult} from '../pipelines/NonIdealPipelineQueryResult';\nimport {\n  SidebarContainerOverview,\n  SIDEBAR_ROOT_CONTAINER_FRAGMENT,\n} from '../pipelines/SidebarContainerOverview';\nimport {PipelineSelector} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {\n  AssetGraphSidebarQuery,\n  AssetGraphSidebarQueryVariables,\n} from './types/AssetGraphSidebarQuery';\n\nexport const AssetGraphJobSidebar: React.FC<{\n  pipelineSelector: PipelineSelector;\n}> = ({pipelineSelector}) => {\n  const queryResult = useQuery<AssetGraphSidebarQuery, AssetGraphSidebarQueryVariables>(\n    ASSET_GRAPH_JOB_SIDEBAR,\n    {\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n      variables: {pipelineSelector},\n    },\n  );\n\n  const {repositoryName, repositoryLocationName} = pipelineSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({pipelineSnapshotOrError}) => {\n        if (pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph\n              result={pipelineSnapshotOrError}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n        return (\n          <SidebarContainerOverview container={pipelineSnapshotOrError} repoAddress={repoAddress} />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst ASSET_GRAPH_JOB_SIDEBAR = gql`\n  query AssetGraphSidebarQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        ...SidebarRootContainerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${SIDEBAR_ROOT_CONTAINER_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Box, Colors, Group, Icon, Mono, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {isHiddenAssetGroupJob, LiveDataForNode} from '../asset-graph/Utils';\nimport {StaleTag} from '../assets/StaleTag';\nimport {MetadataEntry, METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {linkToRunEvent, titleForRun} from '../runs/RunUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {AssetLineageElements} from './AssetLineageElements';\nimport {LatestMaterializationMetadataFragment} from './types/LatestMaterializationMetadataFragment';\n\nexport const LatestMaterializationMetadata: React.FC<{\n  latest: LatestMaterializationMetadataFragment | undefined;\n  liveData: LiveDataForNode | undefined;\n}> = ({latest, liveData}) => {\n  const latestRun = latest?.runOrError.__typename === 'Run' ? latest?.runOrError : null;\n  const repositoryOrigin = latestRun?.repositoryOrigin;\n  const repoAddress = repositoryOrigin\n    ? buildRepoAddress(repositoryOrigin.repositoryName, repositoryOrigin.repositoryLocationName)\n    : null;\n  const repo = useRepository(repoAddress);\n\n  if (!latest) {\n    return (\n      <Box padding={{top: 16, bottom: 32}}>\n        <NonIdealState\n          icon=\"materialization\"\n          title=\"No materializations\"\n          description=\"No materializations were found for this asset.\"\n        />\n      </Box>\n    );\n  }\n\n  const latestEvent = latest;\n  const latestAssetLineage = latestEvent?.assetLineage;\n\n  return (\n    <MetadataTable>\n      <tbody>\n        <tr>\n          <td>Run</td>\n          <td>\n            {latestRun ? (\n              <div>\n                <Box>\n                  {'Run '}\n                  <Link to={`/runs/${latestEvent.runId}?timestamp=${latestEvent.timestamp}`}>\n                    <Mono>{titleForRun({runId: latestEvent.runId})}</Mono>\n                  </Link>\n                </Box>\n                {!isHiddenAssetGroupJob(latestRun.pipelineName) && (\n                  <>\n                    <Box padding={{left: 8, top: 4}}>\n                      <PipelineReference\n                        showIcon\n                        pipelineName={latestRun.pipelineName}\n                        pipelineHrefContext={repoAddress || 'repo-unknown'}\n                        snapshotId={latestRun.pipelineSnapshotId}\n                        isJob={isThisThingAJob(repo, latestRun.pipelineName)}\n                      />\n                    </Box>\n                    <Group direction=\"row\" padding={{left: 8}} spacing={8} alignItems=\"center\">\n                      <Icon name=\"linear_scale\" color={Colors.Gray400} />\n                      <Link to={linkToRunEvent(latestRun, latestEvent)}>{latestEvent.stepKey}</Link>\n                    </Group>\n                  </>\n                )}\n              </div>\n            ) : (\n              'No materialization events'\n            )}\n          </td>\n        </tr>\n        {latest?.partition ? (\n          <tr>\n            <td>Latest partition</td>\n            <td>{latest ? latest.partition : 'No materialization events'}</td>\n          </tr>\n        ) : null}\n        <tr>\n          <td>Timestamp</td>\n          <td>\n            <Box flex={{gap: 8, alignItems: 'center'}}>\n              {latestEvent ? (\n                <Timestamp timestamp={{ms: Number(latestEvent.timestamp)}} />\n              ) : (\n                'No materialization events'\n              )}\n              {liveData && <StaleTag liveData={liveData} />}\n            </Box>\n          </td>\n        </tr>\n        {latestAssetLineage?.length ? (\n          <tr>\n            <td>Parent assets</td>\n            <td>\n              <AssetLineageElements\n                elements={latestAssetLineage}\n                timestamp={latestEvent.timestamp}\n              />\n            </td>\n          </tr>\n        ) : null}\n        {latestEvent?.metadataEntries.map((entry) => (\n          <tr key={`metadata-${entry.label}`}>\n            <td>{entry.label}</td>\n            <td>\n              <MetadataEntry\n                entry={entry}\n                expandSmallValues={true}\n                repoLocation={repoAddress?.location}\n              />\n            </td>\n            <td>{entry.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </MetadataTable>\n  );\n};\n\nconst MetadataTable = styled(Table)`\n  td:first-child {\n    white-space: nowrap;\n    width: 1px;\n    max-width: 400px;\n    word-break: break-word;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\nexport const LATEST_MATERIALIZATION_METADATA_FRAGMENT = gql`\n  fragment LatestMaterializationMetadataFragment on MaterializationEvent {\n    partition\n    runOrError {\n      ... on PipelineRun {\n        id\n        runId\n        mode\n        pipelineName\n        pipelineSnapshotId\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    assetLineage {\n      assetKey {\n        path\n      }\n      partitions\n    }\n  }\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n","import {Body, Box, Colors, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\n\nimport {AssetMaterializationGraphs} from './AssetMaterializationGraphs';\nimport {CurrentMinutesLateTag, freshnessPolicyDescription} from './CurrentMinutesLateTag';\nimport {CurrentRunsBanner} from './CurrentRunsBanner';\nimport {FailedRunsSinceMaterializationBanner} from './FailedRunsSinceMaterializationBanner';\nimport {LatestMaterializationMetadata} from './LastMaterializationMetadata';\nimport {useGroupedEvents} from './groupByPartition';\nimport {AssetKey} from './types';\nimport {useRecentAssetEvents} from './useRecentAssetEvents';\n\ninterface Props {\n  assetKey: AssetKey;\n  liveData?: LiveDataForNode;\n\n  // This timestamp is a \"hint\", when it changes this component will refetch\n  // to retrieve new data. Just don't want to poll the entire table query.\n  assetLastMaterializedAt: string | undefined;\n\n  // This is passed in because we need to know whether to default to partition\n  // grouping /before/ loading all the data.\n  assetHasDefinedPartitions: boolean;\n}\n\nexport const AssetSidebarActivitySummary: React.FC<Props> = ({\n  assetKey,\n  assetLastMaterializedAt,\n  assetHasDefinedPartitions,\n  liveData,\n}) => {\n  const {\n    materializations,\n    observations,\n    loadedPartitionKeys,\n    loading,\n    refetch,\n    xAxis,\n  } = useRecentAssetEvents(assetKey, {}, {assetHasDefinedPartitions});\n\n  const grouped = useGroupedEvents(xAxis, materializations, observations, loadedPartitionKeys);\n\n  React.useEffect(() => {\n    refetch();\n  }, [assetLastMaterializedAt, refetch]);\n\n  if (loading) {\n    return (\n      <Box padding={{vertical: 20}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n  return (\n    <>\n      <FailedRunsSinceMaterializationBanner\n        liveData={liveData}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      />\n      <CurrentRunsBanner\n        liveData={liveData}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      />\n\n      {liveData?.freshnessPolicy && (\n        <SidebarSection title=\"Freshness Policy\">\n          <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12, alignItems: 'center'}}>\n            <CurrentMinutesLateTag liveData={liveData} />\n            <Body>{freshnessPolicyDescription(liveData.freshnessPolicy)}</Body>\n          </Box>\n        </SidebarSection>\n      )}\n\n      <SidebarSection title=\"Materialization in Last Run\">\n        {materializations[0] ? (\n          <div style={{margin: -1, maxWidth: '100%', overflowX: 'auto'}}>\n            <LatestMaterializationMetadata latest={materializations[0]} liveData={liveData} />\n          </div>\n        ) : (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            No materializations found\n          </Box>\n        )}\n      </SidebarSection>\n      <SidebarSection title=\"Metadata Plots\">\n        <AssetMaterializationGraphs\n          xAxis={xAxis}\n          asSidebarSection\n          groups={grouped}\n          columnCount={1}\n        />\n      </SidebarSection>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, ConfigTypeSchema, Icon, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from '../assets/AssetConfig';\nimport {AssetDefinedInMultipleReposNotice} from '../assets/AssetDefinedInMultipleReposNotice';\nimport {\n  AssetMetadataTable,\n  ASSET_NODE_OP_METADATA_FRAGMENT,\n  metadataForAssetNode,\n} from '../assets/AssetMetadata';\nimport {AssetSidebarActivitySummary} from '../assets/AssetSidebarActivitySummary';\nimport {DependsOnSelfBanner} from '../assets/DependsOnSelfBanner';\nimport {PartitionHealthSummary} from '../assets/PartitionHealthSummary';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetKey} from '../assets/types';\nimport {usePartitionHealthData} from '../assets/usePartitionHealthData';\nimport {DagsterTypeSummary} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterTypeFragment';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Description} from '../pipelines/Description';\nimport {SidebarSection, SidebarTitle} from '../pipelines/SidebarComponents';\nimport {pluginForMetadata} from '../plugins';\nimport {Version} from '../versions/Version';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {LiveDataForNode, displayNameForAssetKey, GraphNode, nodeDependsOnSelf} from './Utils';\nimport {SidebarAssetQuery, SidebarAssetQueryVariables} from './types/SidebarAssetQuery';\n\nexport const SidebarAssetInfo: React.FC<{\n  assetNode: GraphNode;\n  liveData: LiveDataForNode;\n}> = ({assetNode, liveData}) => {\n  const assetKey = assetNode.assetKey;\n  const partitionHealthData = usePartitionHealthData([assetKey]);\n  const {data} = useQuery<SidebarAssetQuery, SidebarAssetQueryVariables>(SIDEBAR_ASSET_QUERY, {\n    variables: {assetKey: {path: assetKey.path}},\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const {lastMaterialization} = liveData || {};\n  const asset = data?.assetNodeOrError.__typename === 'AssetNode' ? data.assetNodeOrError : null;\n  if (!asset) {\n    return (\n      <>\n        <Header assetKey={assetKey} />\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  const repoAddress = buildRepoAddress(asset.repository.name, asset.repository.location.name);\n  const {assetMetadata, assetType} = metadataForAssetNode(asset);\n  const hasAssetMetadata = assetType || assetMetadata.length > 0;\n  const assetConfigSchema = asset.configField?.configType;\n\n  const OpMetadataPlugin = asset.op?.metadata && pluginForMetadata(asset.op.metadata);\n\n  return (\n    <>\n      <Header assetKey={assetKey} opName={asset.op?.name} />\n\n      <AssetDefinedInMultipleReposNotice\n        assetKey={assetKey}\n        loadedFromRepo={repoAddress}\n        padded={false}\n      />\n\n      <AssetSidebarActivitySummary\n        assetKey={assetKey}\n        assetLastMaterializedAt={lastMaterialization?.timestamp}\n        assetHasDefinedPartitions={!!asset.partitionDefinition}\n        liveData={liveData}\n      />\n\n      <div style={{borderBottom: `2px solid ${Colors.Gray300}`}} />\n\n      {nodeDependsOnSelf(assetNode) && <DependsOnSelfBanner />}\n\n      {(asset.description || OpMetadataPlugin?.SidebarComponent || !hasAssetMetadata) && (\n        <SidebarSection title=\"Description\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Description description={asset.description || 'No description provided.'} />\n          </Box>\n          {asset.op && OpMetadataPlugin?.SidebarComponent && (\n            <Box padding={{bottom: 16, horizontal: 24}}>\n              <OpMetadataPlugin.SidebarComponent definition={asset.op} repoAddress={repoAddress} />\n            </Box>\n          )}\n        </SidebarSection>\n      )}\n\n      {asset.opVersion && (\n        <SidebarSection title=\"Code Version\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Version>{asset.opVersion}</Version>\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetConfigSchema && (\n        <SidebarSection title=\"Config\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <ConfigTypeSchema\n              type={assetConfigSchema}\n              typesInScope={assetConfigSchema.recursiveConfigTypes}\n            />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetMetadata.length > 0 && (\n        <SidebarSection title=\"Metadata\">\n          <AssetMetadataTable assetMetadata={assetMetadata} repoLocation={repoAddress?.location} />\n        </SidebarSection>\n      )}\n\n      {assetType && <TypeSidebarSection assetType={assetType} />}\n\n      {asset.partitionDefinition && (\n        <SidebarSection title=\"Partitions\">\n          <Box padding={{vertical: 16, horizontal: 24}} flex={{direction: 'column', gap: 16}}>\n            <p>{asset.partitionDefinition.description}</p>\n            <PartitionHealthSummary assetKey={asset.assetKey} data={partitionHealthData} />\n          </Box>\n        </SidebarSection>\n      )}\n    </>\n  );\n};\n\nconst TypeSidebarSection: React.FC<{\n  assetType: DagsterTypeFragment;\n}> = ({assetType}) => {\n  return (\n    <SidebarSection title=\"Type\">\n      <DagsterTypeSummary type={assetType} />\n    </SidebarSection>\n  );\n};\n\nconst Header: React.FC<{assetKey: AssetKey; opName?: string}> = ({assetKey, opName}) => {\n  const displayName = displayNameForAssetKey(assetKey);\n\n  return (\n    <Box flex={{gap: 4, direction: 'column'}} margin={{left: 24, right: 12, vertical: 16}}>\n      <SidebarTitle\n        style={{\n          marginBottom: 0,\n          display: 'flex',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        <Box>{displayName}</Box>\n        {displayName !== opName ? (\n          <Box style={{opacity: 0.5}} flex={{gap: 6, alignItems: 'center'}}>\n            <Icon name=\"op\" size={16} />\n            {opName}\n          </Box>\n        ) : undefined}\n      </SidebarTitle>\n      <AssetCatalogLink to={assetDetailsPathForKey(assetKey)}>\n        {'View in Asset Catalog '}\n        <Icon name=\"open_in_new\" color={Colors.Link} />\n      </AssetCatalogLink>\n    </Box>\n  );\n};\nconst AssetCatalogLink = styled(Link)`\n  display: flex;\n  gap: 5px;\n  padding: 6px;\n  margin: -6px;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nexport const SIDEBAR_ASSET_FRAGMENT = gql`\n  fragment SidebarAssetFragment on AssetNode {\n    id\n    description\n    ...AssetNodeConfigFragment\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    partitionDefinition {\n      description\n    }\n    assetKey {\n      path\n    }\n    op {\n      name\n      description\n      metadata {\n        key\n        value\n      }\n    }\n    opVersion\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n\n    ...AssetNodeOpMetadataFragment\n  }\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n  ${ASSET_NODE_OP_METADATA_FRAGMENT}\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n\nconst SIDEBAR_ASSET_QUERY = gql`\n  query SidebarAssetQuery($assetKey: AssetKeyInput!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      __typename\n      ... on AssetNode {\n        id\n        ...SidebarAssetFragment\n      }\n    }\n  }\n  ${SIDEBAR_ASSET_FRAGMENT}\n`;\n","import {gql, useApolloClient} from '@apollo/client';\nimport React from 'react';\n\nimport {AssetKey} from '../assets/types';\nimport {AssetKeyInput} from '../types/globalTypes';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\n\nimport {isHiddenAssetGroupJob} from './Utils';\nimport {\n  AssetForNavigationQuery,\n  AssetForNavigationQueryVariables,\n} from './types/AssetForNavigationQuery';\n\nexport interface AssetLocation {\n  assetKey: AssetKey;\n  opNames: string[];\n  jobName: string | null;\n  groupName: string | null;\n  repoAddress: RepoAddress | null;\n}\n\nexport function useFindAssetLocation() {\n  const apollo = useApolloClient();\n\n  return React.useCallback(\n    async (key: AssetKeyInput): Promise<AssetLocation> => {\n      const {data} = await apollo.query<AssetForNavigationQuery, AssetForNavigationQueryVariables>({\n        query: ASSET_FOR_NAVIGATION_QUERY,\n        variables: {key},\n      });\n      if (data?.assetOrError.__typename === 'Asset' && data?.assetOrError.definition) {\n        const def = data.assetOrError.definition;\n        return {\n          assetKey: key,\n          opNames: def.opNames,\n          jobName: def.jobNames.find((jobName) => !isHiddenAssetGroupJob(jobName)) || null,\n          groupName: def.groupName,\n          repoAddress: def.repository\n            ? buildRepoAddress(def.repository.name, def.repository.location.name)\n            : null,\n        };\n      }\n      return {assetKey: key, opNames: [], jobName: null, groupName: null, repoAddress: null};\n    },\n    [apollo],\n  );\n}\n\nconst ASSET_FOR_NAVIGATION_QUERY = gql`\n  query AssetForNavigationQuery($key: AssetKeyInput!) {\n    assetOrError(assetKey: $key) {\n      __typename\n      ... on Asset {\n        id\n        definition {\n          id\n          opNames\n          jobNames\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Box, Checkbox, Colors, NonIdealState, SplitPanelContainer} from '@dagster-io/ui';\nimport pickBy from 'lodash/pickBy';\nimport uniq from 'lodash/uniq';\nimport without from 'lodash/without';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {LaunchAssetExecutionButton} from '../assets/LaunchAssetExecutionButton';\nimport {LaunchAssetObservationButton} from '../assets/LaunchAssetObservationButton';\nimport {AssetKey} from '../assets/types';\nimport {SVGViewport} from '../graph/SVGViewport';\nimport {useAssetLayout} from '../graph/asyncGraphLayout';\nimport {closestNodeInDirection} from '../graph/common';\nimport {\n  GraphExplorerOptions,\n  OptionsOverlay,\n  QueryOverlay,\n  RightInfoPanel,\n  RightInfoPanelContent,\n} from '../pipelines/GraphExplorer';\nimport {\n  EmptyDAGNotice,\n  EntirelyFilteredDAGNotice,\n  LargeDAGNotice,\n  LoadingNotice,\n} from '../pipelines/GraphNotices';\nimport {ExplorerPath} from '../pipelines/PipelinePathUtils';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {Loading} from '../ui/Loading';\n\nimport {AssetEdges} from './AssetEdges';\nimport {AssetGraphJobSidebar} from './AssetGraphJobSidebar';\nimport {AssetGroupNode} from './AssetGroupNode';\nimport {AssetNode, AssetNodeMinimal} from './AssetNode';\nimport {AssetNodeLink} from './ForeignNode';\nimport {SidebarAssetInfo} from './SidebarAssetInfo';\nimport {GraphData, graphHasCycles, LiveData, GraphNode, tokenForAssetKey} from './Utils';\nimport {AssetGraphLayout} from './layout';\nimport {AssetGraphQuery_assetNodes} from './types/AssetGraphQuery';\nimport {AssetGraphFetchScope, useAssetGraphData} from './useAssetGraphData';\nimport {AssetLocation, useFindAssetLocation} from './useFindAssetLocation';\nimport {useLiveDataForAssetKeys} from './useLiveDataForAssetKeys';\n\ntype AssetNode = AssetGraphQuery_assetNodes;\n\ninterface Props {\n  options: GraphExplorerOptions;\n  setOptions?: (options: GraphExplorerOptions) => void;\n\n  fetchOptions: AssetGraphFetchScope;\n  fetchOptionFilters?: React.ReactNode;\n\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n}\n\nexport const MINIMAL_SCALE = 0.6;\nexport const GROUPS_ONLY_SCALE = 0.15;\n\nexport const AssetGraphExplorer: React.FC<Props> = (props) => {\n  const {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = useAssetGraphData(props.explorerPath.opsQuery, props.fetchOptions);\n\n  const {liveDataByNode, liveDataRefreshState, runWatchers} = useLiveDataForAssetKeys(\n    graphAssetKeys,\n  );\n\n  return (\n    <Loading allowStaleData queryResult={fetchResult}>\n      {() => {\n        if (!assetGraphData || !allAssetKeys) {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" />;\n        }\n\n        const hasCycles = graphHasCycles(assetGraphData);\n\n        if (hasCycles) {\n          return (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Cycle detected\"\n              description=\"Assets dependencies form a cycle\"\n            />\n          );\n        }\n        return (\n          <>\n            <AssetGraphExplorerWithData\n              key={props.explorerPath.pipelineName}\n              assetGraphData={assetGraphData}\n              allAssetKeys={allAssetKeys}\n              graphQueryItems={graphQueryItems}\n              applyingEmptyDefault={applyingEmptyDefault}\n              liveDataRefreshState={liveDataRefreshState}\n              liveDataByNode={liveDataByNode}\n              {...props}\n            />\n            {runWatchers}\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const AssetGraphExplorerWithData: React.FC<\n  {\n    allAssetKeys: AssetKey[];\n    assetGraphData: GraphData;\n    graphQueryItems: GraphQueryItem[];\n    liveDataByNode: LiveData;\n    liveDataRefreshState: QueryRefreshState;\n    applyingEmptyDefault: boolean;\n  } & Props\n> = (props) => {\n  const {\n    options,\n    setOptions,\n    explorerPath,\n    onChangeExplorerPath,\n    onNavigateToSourceAssetNode: onNavigateToSourceAssetNode,\n    liveDataRefreshState,\n    liveDataByNode,\n    assetGraphData,\n    graphQueryItems,\n    applyingEmptyDefault,\n    fetchOptions,\n  } = props;\n\n  const findAssetLocation = useFindAssetLocation();\n\n  const [highlighted, setHighlighted] = React.useState<string | null>(null);\n\n  const selectedAssetValues = explorerPath.opNames[explorerPath.opNames.length - 1].split(',');\n  const selectedGraphNodes = Object.values(assetGraphData.nodes).filter((node) =>\n    selectedAssetValues.includes(tokenForAssetKey(node.definition.assetKey)),\n  );\n  const lastSelectedNode = selectedGraphNodes[selectedGraphNodes.length - 1];\n\n  const {layout, loading, async} = useAssetLayout(assetGraphData);\n\n  const viewportEl = React.useRef<SVGViewport>();\n\n  const onSelectNode = React.useCallback(\n    async (\n      e: React.MouseEvent<any> | React.KeyboardEvent<any>,\n      assetKey: {path: string[]},\n      node: GraphNode | null,\n    ) => {\n      e.stopPropagation();\n\n      const token = tokenForAssetKey(assetKey);\n      const nodeIsInDisplayedGraph = node?.definition;\n\n      if (!nodeIsInDisplayedGraph) {\n        // The asset's definition was not provided in our query for job.assetNodes. It's either\n        // in another job or asset group, or is a source asset not defined in any repository.\n        return onNavigateToSourceAssetNode(await findAssetLocation(assetKey));\n      }\n\n      // This asset is in a job and we can stay in the job graph explorer!\n      // If it's in our current job, allow shift / meta multi-selection.\n      let nextOpsNameSelection = token;\n\n      if (e.shiftKey || e.metaKey) {\n        let tokensToAdd = [token];\n        if (e.shiftKey && lastSelectedNode && node) {\n          const tokensInRange = opsInRange({\n            graph: assetGraphData,\n            from: lastSelectedNode,\n            to: node,\n          });\n          if (tokensInRange.length) {\n            tokensToAdd = tokensInRange;\n          }\n        }\n\n        const existing = explorerPath.opNames[0].split(',');\n        nextOpsNameSelection = (existing.includes(token)\n          ? without(existing, token)\n          : uniq([...existing, ...tokensToAdd])\n        ).join(',');\n      }\n\n      const nextCenter = layout?.nodes[nextOpsNameSelection[nextOpsNameSelection.length - 1]];\n      if (nextCenter) {\n        viewportEl.current?.zoomToSVGCoords(nextCenter.bounds.x, nextCenter.bounds.y, true);\n      }\n\n      onChangeExplorerPath(\n        {\n          ...explorerPath,\n          opNames: [nextOpsNameSelection],\n          opsQuery: nodeIsInDisplayedGraph\n            ? explorerPath.opsQuery\n            : `${explorerPath.opsQuery},++\"${token}\"++`,\n          pipelineName: explorerPath.pipelineName,\n        },\n        'replace',\n      );\n    },\n    [\n      explorerPath,\n      onChangeExplorerPath,\n      onNavigateToSourceAssetNode,\n      findAssetLocation,\n      lastSelectedNode,\n      assetGraphData,\n      layout,\n    ],\n  );\n\n  // const layoutsEqual(layout1: AssetGraphLayout, layout2: AssetGraphLayout) {\n  //   return (layout1.width === layout2.width) &&\n  //     (layout1.height === layout2.height) &&\n  // }\n\n  const [lastRenderedLayout, setLastRenderedLayout] = React.useState<AssetGraphLayout | null>(null);\n  const renderingNewLayout = lastRenderedLayout !== layout;\n\n  React.useEffect(() => {\n    if (!renderingNewLayout || !layout || !viewportEl.current) {\n      return;\n    }\n    // The first render where we have our layout and viewport, autocenter or\n    // focus on the selected node. (If selection was specified in the URL).\n    // Don't animate this change.\n    if (lastSelectedNode) {\n      // viewportEl.current.zoomToSVGBox(layout.nodes[lastSelectedNode.id].bounds, false);\n      viewportEl.current.focus();\n    } else {\n      viewportEl.current.autocenter(false);\n    }\n    setLastRenderedLayout(layout);\n  }, [renderingNewLayout, lastSelectedNode, layout, viewportEl]);\n\n  const onClickBackground = () =>\n    onChangeExplorerPath(\n      {...explorerPath, pipelineName: explorerPath.pipelineName, opNames: []},\n      'replace',\n    );\n\n  const onArrowKeyDown = (e: React.KeyboardEvent<any>, dir: string) => {\n    if (!layout) {\n      return;\n    }\n    const hasDefinition = (node: {id: string}) => !!assetGraphData.nodes[node.id]?.definition;\n    const layoutWithoutExternalLinks = {...layout, nodes: pickBy(layout.nodes, hasDefinition)};\n\n    const nextId = closestNodeInDirection(layoutWithoutExternalLinks, lastSelectedNode.id, dir);\n    const node = nextId && assetGraphData.nodes[nextId];\n    if (node && viewportEl.current) {\n      onSelectNode(e, node.assetKey, node);\n      viewportEl.current.zoomToSVGBox(layout.nodes[nextId].bounds, true);\n    }\n  };\n\n  const allowGroupsOnlyZoomLevel = !!(layout && Object.keys(layout.groups).length);\n\n  return (\n    <SplitPanelContainer\n      identifier=\"explorer\"\n      firstInitialPercent={70}\n      firstMinSize={400}\n      first={\n        <>\n          {graphQueryItems.length === 0 ? (\n            <EmptyDAGNotice nodeType=\"asset\" isGraph />\n          ) : applyingEmptyDefault ? (\n            <LargeDAGNotice nodeType=\"asset\" />\n          ) : Object.keys(assetGraphData.nodes).length === 0 ? (\n            <EntirelyFilteredDAGNotice nodeType=\"asset\" />\n          ) : undefined}\n          {loading || !layout ? (\n            <LoadingNotice async={async} nodeType=\"asset\" />\n          ) : (\n            <SVGViewport\n              ref={(r) => (viewportEl.current = r || undefined)}\n              interactor={SVGViewport.Interactors.PanAndZoom}\n              graphWidth={layout.width}\n              graphHeight={layout.height}\n              graphHasNoMinimumZoom={allowGroupsOnlyZoomLevel}\n              onClick={onClickBackground}\n              onArrowKeyDown={onArrowKeyDown}\n              onDoubleClick={(e) => {\n                viewportEl.current?.autocenter(true);\n                e.stopPropagation();\n              }}\n              maxZoom={1.2}\n              maxAutocenterZoom={1.0}\n            >\n              {({scale}) => (\n                <SVGContainer width={layout.width} height={layout.height}>\n                  <AssetEdges\n                    highlighted={highlighted}\n                    edges={layout.edges}\n                    strokeWidth={allowGroupsOnlyZoomLevel ? Math.max(4, 3 / scale) : 4}\n                    baseColor={\n                      allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE\n                        ? Colors.Gray400\n                        : Colors.KeylineGray\n                    }\n                  />\n\n                  {Object.values(layout.groups)\n                    .sort((a, b) => a.id.length - b.id.length)\n                    .map((group) => (\n                      <foreignObject\n                        key={group.id}\n                        {...group.bounds}\n                        onDoubleClick={(e) => {\n                          if (!viewportEl.current) {\n                            return;\n                          }\n                          const targetScale = viewportEl.current.scaleForSVGBounds(\n                            group.bounds.width,\n                            group.bounds.height,\n                          );\n                          viewportEl.current.zoomToSVGBox(group.bounds, true, targetScale * 0.9);\n                          e.stopPropagation();\n                        }}\n                      >\n                        <AssetGroupNode group={group} scale={scale} />\n                      </foreignObject>\n                    ))}\n\n                  {Object.values(layout.nodes).map(({id, bounds}) => {\n                    const graphNode = assetGraphData.nodes[id];\n                    const path = JSON.parse(id);\n                    if (allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE) {\n                      return;\n                    }\n                    return (\n                      <foreignObject\n                        {...bounds}\n                        key={id}\n                        onMouseEnter={() => setHighlighted(id)}\n                        onMouseLeave={() => setHighlighted(null)}\n                        onClick={(e) => onSelectNode(e, {path}, graphNode)}\n                        onDoubleClick={(e) => {\n                          viewportEl.current?.zoomToSVGBox(bounds, true, 1.2);\n                          e.stopPropagation();\n                        }}\n                        style={{overflow: 'visible'}}\n                      >\n                        {!graphNode ? (\n                          <AssetNodeLink assetKey={{path}} />\n                        ) : scale < MINIMAL_SCALE ? (\n                          <AssetNodeMinimal\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        ) : (\n                          <AssetNode\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        )}\n                      </foreignObject>\n                    );\n                  })}\n                </SVGContainer>\n              )}\n            </SVGViewport>\n          )}\n          {setOptions && (\n            <OptionsOverlay>\n              <Checkbox\n                format=\"switch\"\n                label=\"View as Asset Graph\"\n                checked={options.preferAssetRendering}\n                onChange={() => {\n                  onChangeExplorerPath(\n                    {\n                      ...explorerPath,\n                      opNames:\n                        selectedGraphNodes.length && selectedGraphNodes[0].definition.opNames.length\n                          ? selectedGraphNodes[0].definition.opNames\n                          : [],\n                    },\n                    'replace',\n                  );\n                  setOptions({\n                    ...options,\n                    preferAssetRendering: !options.preferAssetRendering,\n                  });\n                }}\n              />\n            </OptionsOverlay>\n          )}\n\n          <Box\n            flex={{direction: 'column', alignItems: 'flex-end', gap: 8}}\n            style={{position: 'absolute', right: 12, top: 8}}\n          >\n            <Box flex={{alignItems: 'center', gap: 12}}>\n              <QueryRefreshCountdown\n                refreshState={liveDataRefreshState}\n                dataDescription=\"materializations\"\n              />\n              <LaunchAssetObservationButton\n                preferredJobName={explorerPath.pipelineName}\n                assetKeys={(selectedGraphNodes.length\n                  ? selectedGraphNodes\n                  : Object.values(assetGraphData.nodes)\n                )\n                  .filter((a) => a.definition.isObservable)\n                  .map((n) => n.assetKey)}\n              />\n              <LaunchAssetExecutionButton\n                preferredJobName={explorerPath.pipelineName}\n                liveDataForStale={liveDataByNode}\n                scope={\n                  selectedGraphNodes.length\n                    ? {selected: selectedGraphNodes.map((a) => a.definition)}\n                    : {all: Object.values(assetGraphData.nodes).map((a) => a.definition)}\n                }\n              />\n            </Box>\n          </Box>\n          <QueryOverlay>\n            {props.fetchOptionFilters}\n\n            <GraphQueryInput\n              items={graphQueryItems}\n              value={explorerPath.opsQuery}\n              placeholder=\"Type an asset subset…\"\n              onChange={(opsQuery) => onChangeExplorerPath({...explorerPath, opsQuery}, 'replace')}\n              popoverPosition=\"bottom-left\"\n            />\n          </QueryOverlay>\n        </>\n      }\n      second={\n        selectedGraphNodes.length === 1 && selectedGraphNodes[0] ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <SidebarAssetInfo\n                assetNode={selectedGraphNodes[0]}\n                liveData={liveDataByNode[selectedGraphNodes[0].id]}\n              />\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : fetchOptions.pipelineSelector ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <AssetGraphJobSidebar pipelineSelector={fetchOptions.pipelineSelector} />\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : null\n      }\n    />\n  );\n};\n\nconst SVGContainer = styled.svg`\n  overflow: visible;\n  border-radius: 0;\n`;\n\n// Helpers\n\nconst graphDirectionOf = ({\n  graph,\n  from,\n  to,\n}: {\n  graph: GraphData;\n  from: GraphNode;\n  to: GraphNode;\n}) => {\n  const stack = [from];\n  while (stack.length) {\n    const node = stack.pop()!;\n\n    const downstream = [...Object.keys(graph.downstream[node.id] || {})]\n      .map((n) => graph.nodes[n])\n      .filter(Boolean);\n    if (downstream.some((d) => d.id === to.id)) {\n      return 'downstream';\n    }\n    stack.push(...downstream);\n  }\n  return 'upstream';\n};\n\nconst opsInRange = (\n  {graph, from, to}: {graph: GraphData; from: GraphNode; to: GraphNode},\n  seen: string[] = [],\n) => {\n  if (!from) {\n    return [];\n  }\n  if (from.id === to.id) {\n    return [...to.definition.opNames];\n  }\n\n  if (seen.length === 0 && graphDirectionOf({graph, from, to}) === 'upstream') {\n    [from, to] = [to, from];\n  }\n\n  const downstream = [...Object.keys(graph.downstream[from.id] || {})]\n    .map((n) => graph.nodes[n])\n    .filter(Boolean);\n\n  const ledToTarget: string[] = [];\n\n  for (const node of downstream) {\n    if (seen.includes(node.id)) {\n      continue;\n    }\n    const result: string[] = opsInRange({graph, from: node, to}, [...seen, from.id]);\n    if (result.length) {\n      ledToTarget.push(...from.definition.opNames, ...result);\n    }\n  }\n  return uniq(ledToTarget);\n};\n","import {Box, Colors, FontFamily, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\nimport {workspacePath} from '../workspace/workspacePath';\n\nimport {MINIMAL_SCALE, GROUPS_ONLY_SCALE} from './AssetGraphExplorer';\nimport {GroupLayout} from './layout';\n\nexport const AssetGroupNode: React.FC<{group: GroupLayout; scale: number}> = ({group, scale}) => {\n  const {\n    repositoryLocationName,\n    repositoryDisambiguationRequired,\n    repositoryName,\n    groupName,\n  } = group;\n\n  return (\n    <div style={{position: 'relative', width: '100%', height: '100%'}}>\n      {scale > GROUPS_ONLY_SCALE && (\n        <Box flex={{alignItems: 'flex-end'}} style={{height: 70}}>\n          <Mono\n            style={{\n              fontWeight: 600,\n              userSelect: 'none',\n              fontSize: scale > MINIMAL_SCALE ? '16px' : '32px',\n              display: 'flex',\n              gap: 6,\n            }}\n          >\n            <Icon\n              name=\"asset_group\"\n              color={Colors.Gray400}\n              size={scale > MINIMAL_SCALE ? 20 : 48}\n            />\n            <Box flex={{direction: 'column'}}>\n              <Link\n                style={{color: Colors.Gray400}}\n                onClick={(e) => e.stopPropagation()}\n                to={workspacePath(\n                  repositoryName,\n                  repositoryLocationName,\n                  `/asset-groups/${groupName}`,\n                )}\n              >\n                {groupName}\n              </Link>\n              {repositoryDisambiguationRequired && (\n                <GroupRepoName style={{marginBottom: '0.5em'}}>\n                  {withMiddleTruncation(\n                    buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                    {\n                      maxLength: 45,\n                    },\n                  )}\n                </GroupRepoName>\n              )}\n            </Box>\n          </Mono>\n        </Box>\n      )}\n\n      <GroupOutline\n        style={{\n          inset: 0,\n          top: 75,\n          position: 'absolute',\n          background:\n            scale < GROUPS_ONLY_SCALE ? `rgba(234, 234, 234, 1)` : `rgba(217, 217, 217, 0.25)`,\n        }}\n      />\n\n      {scale < GROUPS_ONLY_SCALE ? (\n        <Box\n          flex={{justifyContent: 'center', alignItems: 'center'}}\n          style={{inset: 0, position: 'absolute', fontSize: `${12 / scale}px`, userSelect: 'none'}}\n        >\n          <Box\n            flex={{direction: 'column', alignItems: 'center'}}\n            style={{fontWeight: 600, fontFamily: FontFamily.monospace}}\n          >\n            {groupName}\n            {repositoryDisambiguationRequired && (\n              <GroupRepoName>\n                {withMiddleTruncation(\n                  buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                  {\n                    maxLength: 45,\n                  },\n                )}\n              </GroupRepoName>\n            )}\n          </Box>\n        </Box>\n      ) : undefined}\n    </div>\n  );\n};\n\nconst GroupOutline = styled.div`\n  width: 100%;\n  border-radius: 10px;\n  pointer-events: none;\n`;\n\nconst GroupRepoName = styled.div`\n  font-size: 0.8em;\n  line-height: 0.6em;\n  white-space: nowrap;\n  color: ${Colors.Gray400};\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Icon, FontFamily, Box, CaptionMono, Caption, Spinner} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\nimport {humanizedLateString, isAssetLate} from '../assets/CurrentMinutesLateTag';\nimport {isAssetStale} from '../assets/StaleTag';\nimport {OpTags} from '../graph/OpTags';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {markdownToPlaintext} from '../ui/markdownToPlaintext';\n\nimport {AssetLatestRunSpinner, AssetRunLink} from './AssetRunLinking';\nimport {LiveDataForNode} from './Utils';\nimport {ASSET_NODE_NAME_MAX_LENGTH} from './layout';\nimport {AssetNodeFragment} from './types/AssetNodeFragment';\n\nexport const AssetNode: React.FC<{\n  definition: AssetNodeFragment;\n  liveData?: LiveDataForNode;\n  selected: boolean;\n}> = React.memo(({definition, selected, liveData}) => {\n  const firstOp = definition.opNames.length ? definition.opNames[0] : null;\n\n  // Used for linking to the run with this step highlighted. We only support highlighting\n  // a single step, so just use the first one.\n  const stepKey = firstOp || '';\n\n  const displayName = definition.assetKey.path[definition.assetKey.path.length - 1];\n  const isSource = definition.isSource;\n\n  return (\n    <AssetInsetForHoverEffect>\n      <AssetNodeContainer $selected={selected}>\n        <AssetNodeBox $selected={selected} $isSource={isSource}>\n          <Name $isSource={isSource}>\n            <span style={{marginTop: 1}}>\n              <Icon name={isSource ? 'source_asset' : 'asset'} />\n            </span>\n            <div style={{overflow: 'hidden', textOverflow: 'ellipsis'}}>\n              {withMiddleTruncation(displayName, {\n                maxLength: ASSET_NODE_NAME_MAX_LENGTH,\n              })}\n            </div>\n            <div style={{flex: 1}} />\n          </Name>\n          {definition.description ? (\n            <Description $color={Colors.Gray800}>\n              {markdownToPlaintext(definition.description).split('\\n')[0]}\n            </Description>\n          ) : (\n            <Description $color={Colors.Gray400}>No description</Description>\n          )}\n          {definition.isObservable && isSource ? (\n            <Stats>\n              <StatsRow>\n                <span>Observed</span>\n                {liveData?.lastObservation ? (\n                  <CaptionMono style={{textAlign: 'right'}}>\n                    <AssetRunLink\n                      runId={liveData.lastObservation.runId}\n                      event={{stepKey, timestamp: liveData.lastObservation.timestamp}}\n                    >\n                      <TimestampDisplay\n                        timestamp={Number(liveData.lastObservation.timestamp) / 1000}\n                        timeFormat={{showSeconds: false, showTimezone: false}}\n                      />\n                    </AssetRunLink>\n                  </CaptionMono>\n                ) : (\n                  <span>–</span>\n                )}\n              </StatsRow>\n            </Stats>\n          ) : isSource ? null : (\n            <AssetNodeStatusRow definition={definition} liveData={liveData} stepKey={stepKey} />\n          )}\n          {definition.computeKind && (\n            <OpTags\n              minified={false}\n              style={{right: -2, paddingTop: 7}}\n              tags={[\n                {\n                  label: definition.computeKind,\n                  onClick: () => {\n                    window.requestAnimationFrame(() =>\n                      document.dispatchEvent(new Event('show-kind-info')),\n                    );\n                  },\n                },\n              ]}\n            />\n          )}\n        </AssetNodeBox>\n      </AssetNodeContainer>\n    </AssetInsetForHoverEffect>\n  );\n}, isEqual);\n\nexport const AssetNodeStatusBox: React.FC<{background: string}> = ({background, children}) => (\n  <Box\n    padding={{horizontal: 8}}\n    style={{\n      borderBottomLeftRadius: 6,\n      borderBottomRightRadius: 6,\n      whiteSpace: 'nowrap',\n      lineHeight: 12,\n      height: 24,\n    }}\n    flex={{justifyContent: 'space-between', alignItems: 'center', gap: 6}}\n    background={background}\n  >\n    {children}\n  </Box>\n);\n\nexport const AssetNodeStatusRow: React.FC<{\n  definition: AssetNodeFragment;\n  liveData: LiveDataForNode | undefined;\n  stepKey: string;\n}> = ({definition, liveData, stepKey}) => {\n  if (definition.isSource) {\n    return <span />;\n  }\n\n  if (!liveData) {\n    return (\n      <AssetNodeStatusBox background={Colors.Gray100}>\n        <Spinner purpose=\"caption-text\" />\n        <Caption style={{flex: 1}} color={Colors.Gray800}>\n          Loading...\n        </Caption>\n      </AssetNodeStatusBox>\n    );\n  }\n\n  const {\n    lastMaterialization,\n    runWhichFailedToMaterialize,\n    inProgressRunIds,\n    unstartedRunIds,\n  } = liveData;\n\n  const materializingRunId = inProgressRunIds[0] || unstartedRunIds[0];\n  const late = isAssetLate(liveData);\n\n  if (materializingRunId) {\n    return (\n      <AssetNodeStatusBox background={Colors.Blue50}>\n        <AssetLatestRunSpinner liveData={liveData} />\n        <Caption style={{flex: 1}} color={Colors.Gray800}>\n          Materializing...\n        </Caption>\n        <AssetRunLink runId={materializingRunId} />\n      </AssetNodeStatusBox>\n    );\n  }\n\n  const lastMaterializationLink = lastMaterialization ? (\n    <AssetRunLink\n      runId={lastMaterialization.runId}\n      event={{stepKey, timestamp: lastMaterialization.timestamp}}\n    >\n      <TimestampDisplay\n        timestamp={Number(lastMaterialization.timestamp) / 1000}\n        timeFormat={{showSeconds: false, showTimezone: false}}\n      />\n    </AssetRunLink>\n  ) : undefined;\n\n  if (runWhichFailedToMaterialize || late) {\n    return (\n      <AssetNodeStatusBox background={Colors.Red50}>\n        <Caption color={Colors.Red700}>\n          {runWhichFailedToMaterialize && late\n            ? `Failed (Late)`\n            : late\n            ? humanizedLateString(liveData.freshnessInfo.currentMinutesLate)\n            : 'Failed'}\n        </Caption>\n        {lastMaterializationLink}\n      </AssetNodeStatusBox>\n    );\n  }\n\n  if (!lastMaterialization) {\n    return (\n      <AssetNodeStatusBox background={Colors.Yellow50}>\n        <Caption color={Colors.Yellow700}>Never materialized</Caption>\n      </AssetNodeStatusBox>\n    );\n  }\n\n  if (isAssetStale(liveData)) {\n    return (\n      <AssetNodeStatusBox background={Colors.Yellow50}>\n        <Caption color={Colors.Yellow700}>Stale</Caption>\n        {lastMaterializationLink}\n      </AssetNodeStatusBox>\n    );\n  }\n\n  return (\n    <AssetNodeStatusBox background={Colors.Green50}>\n      <Caption color={Colors.Green700}>Materialized</Caption>\n      {lastMaterializationLink}\n    </AssetNodeStatusBox>\n  );\n};\n\nexport const AssetNodeMinimal: React.FC<{\n  selected: boolean;\n  liveData?: LiveDataForNode;\n  definition: AssetNodeFragment;\n}> = ({selected, definition, liveData}) => {\n  const {isSource, assetKey} = definition;\n  const displayName = assetKey.path[assetKey.path.length - 1];\n  const materializingRunId = liveData?.inProgressRunIds?.[0] || liveData?.unstartedRunIds?.[0];\n\n  return (\n    <AssetInsetForHoverEffect>\n      <MinimalAssetNodeContainer $selected={selected}>\n        <MinimalAssetNodeBox\n          $selected={selected}\n          $isSource={isSource}\n          $background={\n            !liveData || definition.isSource\n              ? Colors.Gray100\n              : materializingRunId\n              ? Colors.Blue50\n              : liveData?.runWhichFailedToMaterialize || isAssetLate(liveData)\n              ? Colors.Red50\n              : !liveData?.lastMaterialization || isAssetStale(liveData)\n              ? Colors.Yellow50\n              : Colors.Green50\n          }\n          $border={\n            !liveData || definition.isSource\n              ? Colors.Gray300\n              : materializingRunId\n              ? Colors.Blue500\n              : liveData?.runWhichFailedToMaterialize || isAssetLate(liveData)\n              ? Colors.Red500\n              : !liveData?.lastMaterialization || isAssetStale(liveData)\n              ? Colors.Yellow500\n              : Colors.Green500\n          }\n        >\n          <div style={{position: 'absolute', bottom: 6, left: 6}}>\n            <AssetLatestRunSpinner liveData={liveData} purpose=\"section\" />\n          </div>\n\n          <MinimalName style={{fontSize: 30}} $isSource={isSource}>\n            {withMiddleTruncation(displayName, {maxLength: 17})}\n          </MinimalName>\n        </MinimalAssetNodeBox>\n      </MinimalAssetNodeContainer>\n    </AssetInsetForHoverEffect>\n  );\n};\n\nexport const ASSET_NODE_LIVE_FRAGMENT = gql`\n  fragment AssetNodeLiveFragment on AssetNode {\n    id\n    opNames\n    repository {\n      id\n    }\n    assetKey {\n      path\n    }\n    assetMaterializations(limit: 1) {\n      timestamp\n      runId\n    }\n    freshnessPolicy {\n      maximumLagMinutes\n      cronSchedule\n    }\n    freshnessInfo {\n      currentMinutesLate\n    }\n    assetObservations(limit: 1) {\n      timestamp\n      runId\n    }\n    currentLogicalVersion\n    projectedLogicalVersion\n  }\n`;\n\n// Note: This fragment should only contain fields that are needed for\n// useAssetGraphData and the Asset DAG. Some pages of Dagit request this\n// fragment for every AssetNode on the instance. Add fields with care!\n//\nexport const ASSET_NODE_FRAGMENT = gql`\n  fragment AssetNodeFragment on AssetNode {\n    id\n    graphName\n    jobNames\n    opNames\n    opVersion\n    description\n    computeKind\n    isPartitioned\n    isObservable\n    isSource\n    assetKey {\n      path\n    }\n  }\n`;\n\nconst AssetInsetForHoverEffect = styled.div`\n  padding: 10px 4px 2px 4px;\n  height: 100%;\n`;\n\nexport const AssetNodeContainer = styled.div<{$selected: boolean}>`\n  padding: 4px;\n`;\n\nconst AssetNodeShowOnHover = styled.span`\n  display: none;\n`;\n\nexport const AssetNodeBox = styled.div<{$isSource: boolean; $selected: boolean}>`\n  ${(p) =>\n    p.$isSource\n      ? `border: 2px dashed ${p.$selected ? Colors.Gray600 : Colors.Gray300}`\n      : `border: 2px solid ${p.$selected ? Colors.Blue500 : Colors.Blue200}`};\n\n  ${(p) =>\n    p.$isSource\n      ? `outline: 3px solid ${p.$selected ? Colors.Gray300 : 'transparent'}`\n      : `outline: 3px solid ${p.$selected ? Colors.Blue200 : 'transparent'}`};\n\n  background: ${Colors.White};\n  border-radius: 8px;\n  position: relative;\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 2px 12px 0px;\n    ${AssetNodeShowOnHover} {\n      display: initial;\n    }\n  }\n`;\nconst Name = styled.div<{$isSource: boolean}>`\n  /** Keep in sync with DISPLAY_NAME_PX_PER_CHAR */\n  display: flex;\n  padding: 3px 6px;\n  background: ${(p) => (p.$isSource ? Colors.Gray100 : Colors.Blue50)};\n  font-family: ${FontFamily.monospace};\n  border-top-left-radius: 7px;\n  border-top-right-radius: 7px;\n  font-weight: 600;\n  gap: 4px;\n`;\n\nconst MinimalAssetNodeContainer = styled(AssetNodeContainer)`\n  height: 100%;\n`;\n\nconst MinimalAssetNodeBox = styled.div<{\n  $isSource: boolean;\n  $selected: boolean;\n  $background: string;\n  $border: string;\n}>`\n  background: ${(p) => p.$background};\n  ${(p) =>\n    p.$isSource\n      ? `border: 4px dashed ${p.$selected ? Colors.Gray500 : p.$border}`\n      : `border: 4px solid ${p.$selected ? Colors.Blue500 : p.$border}`};\n\n  ${(p) =>\n    p.$isSource\n      ? `outline: 8px solid ${p.$selected ? Colors.Gray300 : 'transparent'}`\n      : `outline: 8px solid ${p.$selected ? Colors.Blue200 : 'transparent'}`};\n\n  border-radius: 10px;\n  position: relative;\n  padding: 4px;\n  height: 100%;\n  min-height: 46px;\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 2px 12px 0px;\n  }\n`;\n\nconst MinimalName = styled(Name)`\n  font-weight: 600;\n  white-space: nowrap;\n  position: absolute;\n  background: none;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nconst Description = styled.div<{$color: string}>`\n  padding: 6px 8px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: ${(p) => p.$color};\n  border-top: 1px solid ${Colors.Blue50};\n  background: ${Colors.White};\n  font-size: 12px;\n`;\n\nconst Stats = styled.div`\n  padding: 4px 8px;\n  border-top: 1px solid ${Colors.Blue50};\n  background: ${Colors.White};\n  font-size: 12px;\n  line-height: 20px;\n`;\n\nconst StatsRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  min-height: 18px;\n  & > span {\n    color: ${Colors.Gray800};\n  }\n`;\n","import {Colors, Icon, Tooltip, Box, Spinner, Tag, Caption} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {CurrentMinutesLateTag} from '../assets/CurrentMinutesLateTag';\nimport {titleForRun, linkToRunEvent} from '../runs/RunUtils';\n\nimport {LiveDataForNode, MISSING_LIVE_DATA} from './Utils';\n\nexport const AssetLatestRunSpinner: React.FC<{\n  liveData?: LiveDataForNode;\n  purpose?: 'caption-text' | 'body-text' | 'section';\n}> = ({liveData, purpose = 'body-text'}) => {\n  if (liveData?.inProgressRunIds?.length) {\n    return (\n      <Tooltip content=\"A run is currently rematerializing this asset.\">\n        <Spinner purpose={purpose} />\n      </Tooltip>\n    );\n  }\n  if (liveData?.unstartedRunIds?.length) {\n    return (\n      <Tooltip content=\"A run has started that will rematerialize this asset soon.\">\n        <Spinner purpose={purpose} stopped />\n      </Tooltip>\n    );\n  }\n  return null;\n};\n\nexport const AssetLatestRunWithNotices: React.FC<{\n  liveData?: LiveDataForNode;\n  includeFreshness: boolean;\n  includeRunStatus: boolean;\n}> = ({liveData, includeFreshness, includeRunStatus}) => {\n  const {\n    lastMaterialization,\n    unstartedRunIds,\n    inProgressRunIds,\n    runWhichFailedToMaterialize,\n    stepKey,\n  } = liveData || MISSING_LIVE_DATA;\n\n  const buildRunTagContent = () => {\n    if (inProgressRunIds?.length > 0) {\n      return (\n        <Box flex={{gap: 4, alignItems: 'center'}}>\n          {includeRunStatus && <AssetLatestRunSpinner liveData={liveData} />}\n          <AssetRunLink runId={inProgressRunIds[0]} />\n        </Box>\n      );\n    }\n    if (unstartedRunIds?.length > 0) {\n      return (\n        <Box flex={{gap: 4, alignItems: 'center'}}>\n          {includeRunStatus && <AssetLatestRunSpinner liveData={liveData} />}\n          <AssetRunLink runId={unstartedRunIds[0]} />\n        </Box>\n      );\n    }\n    if (runWhichFailedToMaterialize?.__typename === 'Run') {\n      return (\n        <Box flex={{gap: 4, alignItems: 'center'}}>\n          {includeRunStatus && (\n            <Tooltip\n              content={`Run ${titleForRun({\n                runId: runWhichFailedToMaterialize.id,\n              })} failed to materialize this asset`}\n            >\n              <Icon name=\"warning\" color={Colors.Red500} />\n            </Tooltip>\n          )}\n          <AssetRunLink runId={runWhichFailedToMaterialize.id} />\n        </Box>\n      );\n    }\n    if (lastMaterialization) {\n      return (\n        <Box flex={{gap: 6, alignItems: 'center'}}>\n          <AssetRunLink\n            runId={lastMaterialization.runId}\n            event={{stepKey, timestamp: lastMaterialization.timestamp}}\n          />\n        </Box>\n      );\n    }\n    return undefined;\n  };\n\n  const runTagContent = buildRunTagContent();\n\n  if (!includeFreshness) {\n    return runTagContent || <span>–</span>;\n  }\n\n  return (\n    <Box flex={{direction: 'row', gap: 4}}>\n      {runTagContent ? <Tag>{runTagContent}</Tag> : <span>–</span>}\n      {liveData && <CurrentMinutesLateTag liveData={liveData} policyOnHover />}\n    </Box>\n  );\n};\n\nexport const AssetRunLink: React.FC<{\n  runId: string;\n  event?: Parameters<typeof linkToRunEvent>[1];\n}> = ({runId, children, event}) => (\n  <Caption>\n    <Link\n      to={event ? linkToRunEvent({runId}, event) : `/runs/${runId}`}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      {children || titleForRun({runId})}\n    </Link>\n  </Caption>\n);\n","import {Colors, Icon, FontFamily} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {displayNameForAssetKey} from './Utils';\n\nexport const AssetNodeLink: React.FC<{\n  assetKey: {path: string[]};\n}> = React.memo(({assetKey}) => (\n  <AssetNodeLinkContainer>\n    <Icon name=\"open_in_new\" color={Colors.Link} />\n    <span className=\"label\">{displayNameForAssetKey(assetKey)}</span>\n  </AssetNodeLinkContainer>\n));\n\nconst AssetNodeLinkContainer = styled.div`\n  display: flex;\n  padding: 4px 8px 6px;\n  line-height: 30px;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Link};\n  align-items: center;\n  font-weight: 600;\n  gap: 4px;\n  &:hover .label {\n    color: ${Colors.Link};\n    text-decoration: underline;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport groupBy from 'lodash/groupBy';\nimport keyBy from 'lodash/keyBy';\nimport reject from 'lodash/reject';\nimport React from 'react';\n\nimport {filterByQuery, GraphQueryItem} from '../app/GraphQueryImpl';\nimport {AssetKey} from '../assets/types';\nimport {AssetGroupSelector, PipelineSelector} from '../types/globalTypes';\n\nimport {ASSET_NODE_FRAGMENT} from './AssetNode';\nimport {buildGraphData, GraphData, toGraphId, tokenForAssetKey} from './Utils';\nimport {\n  AssetGraphQuery,\n  AssetGraphQueryVariables,\n  AssetGraphQuery_assetNodes,\n} from './types/AssetGraphQuery';\n\nexport interface AssetGraphFetchScope {\n  hideEdgesToNodesOutsideQuery?: boolean;\n  hideNodesMatching?: (node: AssetGraphQuery_assetNodes) => boolean;\n  pipelineSelector?: PipelineSelector;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport type AssetGraphQueryItem = GraphQueryItem & {\n  node: AssetNode;\n};\n\n/** Fetches data for rendering an asset graph:\n *\n * @param pipelineSelector: Optionally scope to an asset job, or pass null for the global graph\n *\n * @param opsQuery: filter the returned graph using selector syntax string (eg: asset_name++)\n *\n * @param filterNodes: filter the returned graph using the provided function. The global graph\n * uses this option to implement the \"3 of 4 repositories\" picker.\n */\nexport function useAssetGraphData(opsQuery: string, options: AssetGraphFetchScope) {\n  const fetchResult = useQuery<AssetGraphQuery, AssetGraphQueryVariables>(ASSET_GRAPH_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      pipelineSelector: options.pipelineSelector,\n      groupSelector: options.groupSelector,\n    },\n  });\n\n  const nodes = fetchResult.data?.assetNodes;\n\n  const {\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = React.useMemo(() => {\n    if (nodes === undefined) {\n      return {\n        graphAssetKeys: [],\n        graphQueryItems: [],\n        assetGraphData: null,\n        applyingEmptyDefault: false,\n      };\n    }\n\n    // Apply any filters provided by the caller. This is where we do repo filtering\n    let matching = nodes;\n    if (options.hideNodesMatching) {\n      matching = reject(matching, options.hideNodesMatching);\n    }\n\n    // Filter the set of all AssetNodes down to those matching the `opsQuery`.\n    // In the future it might be ideal to move this server-side, but we currently\n    // get to leverage the useQuery cache almost 100% of the time above, making this\n    // super fast after the first load vs a network fetch on every page view.\n    const graphQueryItems = buildGraphQueryItems(matching);\n    const {all, applyingEmptyDefault} = filterByQuery(graphQueryItems, opsQuery);\n\n    // Assemble the response into the data structure used for layout, traversal, etc.\n    const assetGraphData = buildGraphData(all.map((n) => n.node));\n    if (options.hideEdgesToNodesOutsideQuery) {\n      removeEdgesToHiddenAssets(assetGraphData, nodes);\n    }\n\n    return {\n      allAssetKeys: matching.map((n) => n.assetKey),\n      graphAssetKeys: all.map((n) => ({path: n.node.assetKey.path})),\n      assetGraphData,\n      graphQueryItems,\n      applyingEmptyDefault,\n    };\n  }, [nodes, opsQuery, options.hideEdgesToNodesOutsideQuery, options.hideNodesMatching]);\n\n  return {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  };\n}\n\ntype AssetNode = AssetGraphQuery_assetNodes;\n\nconst buildGraphQueryItems = (nodes: AssetNode[]) => {\n  const items: {[name: string]: AssetGraphQueryItem} = {};\n\n  for (const node of nodes) {\n    const name = tokenForAssetKey(node.assetKey);\n    items[name] = {\n      node,\n      name,\n      inputs: node.dependencyKeys.map((key) => ({\n        dependsOn: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n      outputs: node.dependedByKeys.map((key) => ({\n        dependedBy: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n    };\n  }\n  return Object.values(items);\n};\n\nconst removeEdgesToHiddenAssets = (graphData: GraphData, allNodes: AssetNode[]) => {\n  const allNodesById = groupBy(allNodes, (n) => toGraphId(n.assetKey));\n  const notSourceAsset = (id: string) => !!allNodesById[id];\n\n  for (const node of Object.keys(graphData.upstream)) {\n    for (const edge of Object.keys(graphData.upstream[node])) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[node][edge];\n        delete graphData.downstream[edge][node];\n      }\n    }\n  }\n\n  for (const node of Object.keys(graphData.downstream)) {\n    for (const edge of Object.keys(graphData.downstream[node])) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[edge][node];\n        delete graphData.downstream[node][edge];\n      }\n    }\n  }\n};\n\nexport const calculateGraphDistances = (items: GraphQueryItem[], assetKey: AssetKey) => {\n  const map = keyBy(items, (g) => g.name);\n  const start = map[tokenForAssetKey(assetKey)];\n  if (!start) {\n    return {upstream: 0, downstream: 0};\n  }\n\n  const dfsUpstream = (name: string, depth: number): number => {\n    const next = map[name].inputs\n      .flatMap((i) => i.dependsOn.map((d) => d.solid.name))\n      .filter((dname) => dname !== name);\n\n    return Math.max(depth, ...next.map((dname) => dfsUpstream(dname, depth + 1)));\n  };\n  const dfsDownstream = (name: string, depth: number): number => {\n    const next = map[name].outputs\n      .flatMap((i) => i.dependedBy.map((d) => d.solid.name))\n      .filter((dname) => dname !== name);\n\n    return Math.max(depth, ...next.map((dname) => dfsDownstream(dname, depth + 1)));\n  };\n\n  return {\n    upstream: dfsUpstream(start.name, 0),\n    downstream: dfsDownstream(start.name, 0),\n  };\n};\n\nconst ASSET_GRAPH_QUERY = gql`\n  query AssetGraphQuery($pipelineSelector: PipelineSelector, $groupSelector: AssetGroupSelector) {\n    assetNodes(pipeline: $pipelineSelector, group: $groupSelector) {\n      id\n      groupName\n      repository {\n        id\n        name\n        location {\n          id\n          name\n        }\n      }\n      dependencyKeys {\n        path\n      }\n      dependedByKeys {\n        path\n      }\n      ...AssetNodeFragment\n    }\n  }\n  ${ASSET_NODE_FRAGMENT}\n`;\n","import {gql, NetworkStatus, useQuery, useSubscription} from '@apollo/client';\nimport uniq from 'lodash/uniq';\nimport React from 'react';\n\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useDidLaunchEvent} from '../runs/RunUtils';\nimport {AssetKeyInput} from '../types/globalTypes';\n\nimport {ASSET_NODE_LIVE_FRAGMENT} from './AssetNode';\nimport {buildLiveData, tokenForAssetKey} from './Utils';\nimport {AssetGraphLiveQuery, AssetGraphLiveQueryVariables} from './types/AssetGraphLiveQuery';\nimport {AssetLiveRunLogsSubscription} from './types/AssetLiveRunLogsSubscription';\n\nconst SUBSCRIPTION_IDLE_POLL_RATE = 30 * 1000;\nconst SUBSCRIPTION_MAX_POLL_RATE = 2 * 1000;\n\n/** Fetches the last materialization, \"upstream changed\", and other live state\n * for the assets in the given pipeline or in the given set of asset keys (or both).\n *\n * Note: The \"upstream changed\" flag cascades, so it may not appear if the upstream\n * node that has changed is not in scope.\n */\nexport function useLiveDataForAssetKeys(assetKeys: AssetKeyInput[]) {\n  const liveResult = useQuery<AssetGraphLiveQuery, AssetGraphLiveQueryVariables>(\n    ASSETS_GRAPH_LIVE_QUERY,\n    {\n      skip: assetKeys.length === 0,\n      variables: {assetKeys},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const liveDataByNode = React.useMemo(() => {\n    return liveResult.data ? buildLiveData(liveResult.data) : {};\n  }, [liveResult.data]);\n\n  // Track whether the data is being refetched so incoming asset events don't trigger\n  // duplicate requests for live data.\n  const fetching = React.useRef(false);\n  fetching.current = [NetworkStatus.refetch, NetworkStatus.loading].includes(\n    liveResult.networkStatus,\n  );\n\n  const timerRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const onRefreshDebounced = React.useCallback(() => {\n    // This is a basic `throttle`, except that if it fires and finds the live\n    // query is already refreshing it debounces again.\n    const refetch = liveResult.refetch;\n    const fire = () => {\n      if (fetching.current) {\n        timerRef.current = setTimeout(fire, SUBSCRIPTION_MAX_POLL_RATE);\n      } else {\n        timerRef.current = null;\n        refetch();\n      }\n    };\n    if (!timerRef.current) {\n      timerRef.current = setTimeout(fire, SUBSCRIPTION_MAX_POLL_RATE);\n    }\n  }, [timerRef, liveResult.refetch]);\n\n  React.useEffect(() => {\n    return () => {\n      timerRef.current && clearTimeout(timerRef.current);\n    };\n  }, []);\n\n  // If the event log storage does not support streaming us asset events, fall back to\n  // a polling approach and trigger a single refresh when a run is launched for immediate feedback\n  const liveDataRefreshState = useQueryRefreshAtInterval(liveResult, SUBSCRIPTION_IDLE_POLL_RATE);\n\n  useDidLaunchEvent(liveResult.refetch, SUBSCRIPTION_MAX_POLL_RATE);\n\n  const assetKeyTokens = React.useMemo(() => new Set(assetKeys.map(tokenForAssetKey)), [assetKeys]);\n  const assetStepKeys = React.useMemo(\n    () => new Set(liveResult.data?.assetNodes.flatMap((n) => n.opNames) || []),\n    [liveResult],\n  );\n\n  const runInProgressId = uniq(\n    Object.values(liveDataByNode).flatMap((p) => [...p.unstartedRunIds, ...p.inProgressRunIds]),\n  )\n    .sort()\n    .slice(0, 3);\n\n  const runWatchers = (\n    <>\n      {runInProgressId.map((runId) => (\n        <RunLogObserver\n          runId={runId}\n          key={runId}\n          assetKeyTokens={assetKeyTokens}\n          assetStepKeys={assetStepKeys}\n          callback={onRefreshDebounced}\n        />\n      ))}\n    </>\n  );\n\n  return {\n    liveDataByNode,\n    liveDataRefreshState,\n    runWatchers,\n    assetKeys,\n  };\n}\n\nconst RunLogObserver: React.FC<{\n  runId: string;\n  assetKeyTokens: Set<string>;\n  assetStepKeys: Set<string>;\n  callback: () => void;\n}> = React.memo(({runId, assetKeyTokens, assetStepKeys, callback}) => {\n  // Useful for testing this component:\n  const counter = React.useRef(0);\n  React.useEffect(() => {\n    console.log(`Subscribed to ${runId}`);\n    return () => console.log(`Unsubscribed from ${runId} after ${counter.current} messages`);\n  }, [runId]);\n\n  useSubscription<AssetLiveRunLogsSubscription>(ASSET_LIVE_RUN_LOGS_SUBSCRIPTION, {\n    fetchPolicy: 'no-cache',\n    variables: {runId},\n    onSubscriptionData: (data) => {\n      const logs = data.subscriptionData.data?.pipelineRunLogs;\n      if (logs?.__typename !== 'PipelineRunLogsSubscriptionSuccess') {\n        return;\n      }\n\n      counter.current += logs.messages.length;\n\n      if (\n        logs.messages.some((m) => {\n          if (\n            m.__typename === 'AssetMaterializationPlannedEvent' ||\n            m.__typename === 'MaterializationEvent' ||\n            m.__typename === 'ObservationEvent'\n          ) {\n            return m.assetKey && assetKeyTokens.has(tokenForAssetKey(m.assetKey));\n          }\n          if (\n            m.__typename === 'ExecutionStepFailureEvent' ||\n            m.__typename === 'ExecutionStepStartEvent'\n          ) {\n            return m.stepKey && assetStepKeys.has(m.stepKey);\n          }\n          return false;\n        })\n      ) {\n        callback();\n      }\n    },\n  });\n\n  return <span />;\n});\n\nexport const ASSET_LATEST_INFO_FRAGMENT = gql`\n  fragment AssetLatestInfoFragment on AssetLatestInfo {\n    assetKey {\n      path\n    }\n    unstartedRunIds\n    inProgressRunIds\n    latestRun {\n      status\n      id\n    }\n  }\n`;\n\nconst ASSETS_GRAPH_LIVE_QUERY = gql`\n  query AssetGraphLiveQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys, loadMaterializations: true) {\n      id\n      ...AssetNodeLiveFragment\n    }\n    assetsLatestInfo(assetKeys: $assetKeys) {\n      ...AssetLatestInfoFragment\n    }\n  }\n\n  ${ASSET_NODE_LIVE_FRAGMENT}\n  ${ASSET_LATEST_INFO_FRAGMENT}\n`;\n\nconst ASSET_LIVE_RUN_LOGS_SUBSCRIPTION = gql`\n  subscription AssetLiveRunLogsSubscription($runId: ID!) {\n    pipelineRunLogs(runId: $runId, cursor: \"HEAD\") {\n      __typename\n      ... on PipelineRunLogsSubscriptionSuccess {\n        messages {\n          __typename\n          ... on AssetMaterializationPlannedEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on MaterializationEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on ObservationEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on ExecutionStepStartEvent {\n            stepKey\n          }\n          ... on ExecutionStepFailureEvent {\n            stepKey\n          }\n        }\n      }\n    }\n  }\n`;\n","import {gql} from '@apollo/client';\n\nimport {CONFIG_TYPE_SCHEMA_FRAGMENT} from '../typeexplorer/ConfigTypeSchema';\n\nexport const ASSET_NODE_CONFIG_FRAGMENT = gql`\n  fragment AssetNodeConfigFragment on AssetNode {\n    id\n    configField {\n      name\n      isRequired\n      configType {\n        ...ConfigTypeSchemaFragment\n        recursiveConfigTypes {\n          ...ConfigTypeSchemaFragment\n        }\n      }\n    }\n  }\n  ${CONFIG_TYPE_SCHEMA_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Alert, Box, ButtonLink, Colors} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {AssetKey} from './types';\nimport {\n  AssetDefinitionCollisionQuery,\n  AssetDefinitionCollisionQueryVariables,\n} from './types/AssetDefinitionCollisionQuery';\n\nexport const MULTIPLE_DEFINITIONS_WARNING = 'Multiple asset definitions found';\n\nexport const AssetDefinedInMultipleReposNotice: React.FC<{\n  assetKey: AssetKey;\n  loadedFromRepo: RepoAddress;\n  padded?: boolean;\n}> = ({assetKey, loadedFromRepo, padded}) => {\n  const {data} = useQuery<AssetDefinitionCollisionQuery, AssetDefinitionCollisionQueryVariables>(\n    ASSET_DEFINITION_COLLISION_QUERY,\n    {variables: {assetKeys: [{path: assetKey.path}]}},\n  );\n\n  const collision = data?.assetNodeDefinitionCollisions[0];\n  if (!collision) {\n    return <span />;\n  }\n\n  const allReposWithAsset = collision.repositories.map((r) =>\n    repoAddressAsHumanString({name: r.name, location: r.location.name}),\n  );\n\n  return (\n    <Box\n      padding={padded ? {vertical: 16, left: 24, right: 12} : {}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Alert\n        intent=\"warning\"\n        title={MULTIPLE_DEFINITIONS_WARNING}\n        description={\n          <>\n            This asset was loaded from{' '}\n            {buildRepoPathForHuman(loadedFromRepo.name, loadedFromRepo.location)}, but duplicate\n            definitions were found in{' '}\n            <ButtonLink\n              underline=\"always\"\n              color={Colors.Yellow700}\n              onClick={() =>\n                showCustomAlert({\n                  title: MULTIPLE_DEFINITIONS_WARNING,\n                  body: (\n                    <>\n                      Code locations containing an asset definition for{' '}\n                      <strong>{displayNameForAssetKey(assetKey)}</strong>:\n                      <ul>\n                        {allReposWithAsset.map((addr) => (\n                          <li key={addr}>{addr}</li>\n                        ))}\n                      </ul>\n                    </>\n                  ),\n                })\n              }\n            >\n              {allReposWithAsset.length - 1} other repo{allReposWithAsset.length === 2 ? '' : 's'}\n            </ButtonLink>\n            . You should rename these assets to avoid collisions.\n          </>\n        }\n      />\n    </Box>\n  );\n};\n\nconst ASSET_DEFINITION_COLLISION_QUERY = gql`\n  query AssetDefinitionCollisionQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodeDefinitionCollisions(assetKeys: $assetKeys) {\n      assetKey {\n        path\n      }\n      repositories {\n        id\n        name\n        location {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n","import {gql} from '@apollo/client';\nimport {Box, ButtonLink, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Timestamp} from '../app/time/Timestamp';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetLineageFragment} from './types/AssetLineageFragment';\n\nconst AssetLineageInfoElement: React.FC<{\n  lineage_info: AssetLineageFragment;\n  timestamp: string;\n}> = ({lineage_info, timestamp}) => {\n  const partition_list_label = lineage_info.partitions.length === 1 ? 'Partition' : 'Partitions';\n  const partition_list_str = lineage_info.partitions\n    .map((partition) => `\"${partition}\"`)\n    .join(', ');\n  const to = assetDetailsPathForKey(lineage_info.assetKey, {asOf: timestamp});\n\n  return (\n    <Box margin={{bottom: 4}}>\n      {lineage_info.partitions.length > 0\n        ? `${partition_list_label} ${partition_list_str} of `\n        : ''}\n      <Tooltip\n        content={\n          <>\n            View snapshot as of{' '}\n            <Timestamp\n              timestamp={{ms: Number(timestamp)}}\n              timeFormat={{showSeconds: true, showTimezone: true}}\n            />\n          </>\n        }\n        modifiers={{offset: {enabled: true, options: {offset: [0, 16]}}}}\n        placement=\"right\"\n      >\n        <Link to={to}>\n          <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n            {lineage_info.assetKey.path\n              .map((p, i) => <span key={i}>{p}</span>)\n              .reduce(\n                (accum, curr, ii) => [\n                  ...accum,\n                  ii > 0 ? (\n                    <React.Fragment key={`${ii}-space`}>&nbsp;{'>'}&nbsp;</React.Fragment>\n                  ) : null,\n                  curr,\n                ],\n                [] as React.ReactNode[],\n              )}\n          </Box>\n        </Link>\n      </Tooltip>\n    </Box>\n  );\n};\n\nconst MAX_COLLAPSED = 5;\n\nexport const AssetLineageElements: React.FC<{\n  elements: AssetLineageFragment[];\n  timestamp: string;\n}> = ({elements, timestamp}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <div>\n      {elements.length > MAX_COLLAPSED && (\n        <ButtonLink onClick={() => setCollapsed(!collapsed)}>\n          {collapsed ? 'Show More' : 'Show Less'}\n        </ButtonLink>\n      )}\n      {(collapsed ? elements.slice(elements.length - MAX_COLLAPSED) : elements).map((info, idx) => (\n        <AssetLineageInfoElement key={idx} lineage_info={info} timestamp={timestamp} />\n      ))}\n    </div>\n  );\n};\n\nexport const ASSET_LINEAGE_FRAGMENT = gql`\n  fragment AssetLineageFragment on AssetLineageInfo {\n    assetKey {\n      path\n    }\n    partitions\n  }\n`;\n","import {\n  Box,\n  Colors,\n  NonIdealState,\n  Caption,\n  Subheading,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport flatMap from 'lodash/flatMap';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {AssetValueGraph, AssetValueGraphData} from './AssetValueGraph';\nimport {AssetEventGroup} from './groupByPartition';\n\nexport const AssetMaterializationGraphs: React.FC<{\n  groups: AssetEventGroup[];\n  xAxis: 'partition' | 'time';\n  asSidebarSection?: boolean;\n  columnCount?: number;\n}> = (props) => {\n  const [xHover, setXHover] = React.useState<string | number | null>(null);\n\n  const reversed = React.useMemo(() => {\n    return [...props.groups].reverse();\n  }, [props.groups]);\n\n  const graphDataByMetadataLabel = extractNumericData(reversed, props.xAxis);\n  const graphLabels = Object.keys(graphDataByMetadataLabel).slice(0, 20).sort();\n\n  if (process.env.NODE_ENV === 'test') {\n    return <span />; // chartjs and our useViewport hook don't play nicely with jest\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `1fr `.repeat(props.columnCount || 2),\n          justifyContent: 'stretch',\n        }}\n      >\n        {graphLabels.map((label) => (\n          <Box\n            key={label}\n            style={{width: '100%'}}\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n          >\n            <Box\n              style={{width: '100%'}}\n              border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n            >\n              {props.asSidebarSection ? (\n                <Box padding={{horizontal: 24, top: 8}} flex={{justifyContent: 'space-between'}}>\n                  <Caption style={{fontWeight: 700}}>{label}</Caption>\n                </Box>\n              ) : (\n                <Box\n                  padding={{horizontal: 24, vertical: 16}}\n                  border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n                  flex={{justifyContent: 'space-between'}}\n                >\n                  <Subheading>{label}</Subheading>\n                </Box>\n              )}\n              <Box padding={{horizontal: 24, vertical: 16}}>\n                <AssetValueGraph\n                  label={label}\n                  width=\"100%\"\n                  data={graphDataByMetadataLabel[label]}\n                  xHover={xHover}\n                  onHoverX={(x) => x !== xHover && setXHover(x)}\n                />\n              </Box>\n            </Box>\n          </Box>\n        ))}\n      </div>\n      {graphLabels.length === 0 ? (\n        props.asSidebarSection ? (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            No numeric metadata entries available to be graphed.\n          </Box>\n        ) : (\n          <Box padding={{horizontal: 24, top: 64}}>\n            <NonIdealState\n              shrinkable\n              icon=\"asset_plot\"\n              title=\"Asset plots are automatically generated by metadata\"\n              description=\"Include numeric metadata entries in your materializations and observations to see data graphed by time or partition.\"\n              action={\n                <ExternalAnchorButton href=\"https://docs.dagster.io/concepts/assets/software-defined-assets#recording-materialization-metadata\">\n                  View documentation\n                </ExternalAnchorButton>\n              }\n            />\n          </Box>\n        )\n      ) : (\n        props.xAxis === 'partition' && (\n          <Box padding={{vertical: 16, horizontal: 24}} style={{color: Colors.Gray400}}>\n            When graphing values by partition, the highest data point for each materialized event\n            label is displayed.\n          </Box>\n        )\n      )}\n    </>\n  );\n};\n\n/**\n * Helper function that iterates over the asset materializations and assembles time series data\n * and stats for all numeric metadata entries. This function makes the following guaruntees:\n *\n * - If a metadata entry is sparsely emitted, points are still included for missing x values\n *   with y = NaN. (For compatiblity with react-chartjs-2)\n * - If a metadata entry is generated many times for the same partition, and xAxis = partition,\n *   the MAX value emitted is used as the data point.\n *\n * Assumes that the data is pre-sorted in ascending partition order if using xAxis = partition.\n */\nconst extractNumericData = (datapoints: AssetEventGroup[], xAxis: 'time' | 'partition') => {\n  const series: {\n    [metadataEntryLabel: string]: AssetValueGraphData;\n  } = {};\n\n  // Build a set of the numeric metadata entry labels (note they may be sparsely emitted)\n  const numericMetadataLabels = uniq(\n    flatMap(datapoints, (e) =>\n      (e.latest?.metadataEntries || [])\n        .filter((k) => ['IntMetadataEntry', 'FloatMetadataEntry'].includes(k.__typename))\n        .map((k) => k.label),\n    ),\n  );\n\n  const append = (label: string, {x, y}: {x: number | string; y: number}) => {\n    series[label] = series[label] || {minX: 0, maxX: 0, minY: 0, maxY: 0, values: [], xAxis};\n\n    if (xAxis === 'partition') {\n      // If the xAxis is partition keys, the graph may only contain one value for each partition.\n      // If the existing sample for the partition was null, replace it. Otherwise take the\n      // most recent value.\n      const existingForPartition = series[label].values.find((v) => v.x === x);\n      if (existingForPartition) {\n        if (!isNaN(y)) {\n          existingForPartition.y = y;\n        }\n        return;\n      }\n    }\n    series[label].values.push({\n      xNumeric: typeof x === 'number' ? x : series[label].values.length,\n      x,\n      y,\n    });\n  };\n\n  for (const {partition, latest} of datapoints) {\n    const x = (xAxis === 'partition' ? partition : Number(latest?.timestamp)) || null;\n\n    if (x === null) {\n      // exclude materializations where partition = null from partitioned graphs\n      continue;\n    }\n\n    // Add an entry for every numeric metadata label\n    for (const label of numericMetadataLabels) {\n      const entry = latest?.metadataEntries.find((l) => l.label === label);\n      if (!entry) {\n        append(label, {x, y: NaN});\n        continue;\n      }\n\n      let y = NaN;\n      if (entry.__typename === 'IntMetadataEntry') {\n        if (entry.intValue !== null) {\n          y = entry.intValue;\n        } else {\n          // will incur precision loss here\n          y = parseInt(entry.intRepr);\n        }\n      }\n      if (entry.__typename === 'FloatMetadataEntry' && entry.floatValue !== null) {\n        y = entry.floatValue;\n      }\n      append(label, {x, y});\n    }\n  }\n\n  for (const serie of Object.values(series)) {\n    const xs = serie.values.map((v) => v.xNumeric);\n    const ys = serie.values.map((v) => v.y).filter((v) => !isNaN(v));\n    serie.minXNumeric = Math.min(...xs);\n    serie.maxXNumeric = Math.max(...xs);\n    serie.minY = Math.min(...ys);\n    serie.maxY = Math.max(...ys);\n  }\n  return series;\n};\n","import {gql} from '@apollo/client';\nimport {Box, MetadataTable} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DAGSTER_TYPE_FRAGMENT} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterTypeFragment';\nimport {MetadataEntry, METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {MetadataEntryFragment} from '../metadata/types/MetadataEntryFragment';\n\nimport {AssetNodeOpMetadataFragment} from './types/AssetNodeOpMetadataFragment';\n\nexport const metadataForAssetNode = (\n  assetNode: AssetNodeOpMetadataFragment,\n): {assetType?: DagsterTypeFragment; assetMetadata: MetadataEntryFragment[]} => {\n  const assetType = assetNode.type ? assetNode.type : undefined;\n  const assetMetadata = assetNode.metadataEntries || [];\n  return {assetType, assetMetadata};\n};\n\nexport const AssetMetadataTable: React.FC<{\n  assetMetadata: MetadataEntryFragment[];\n  repoLocation: string;\n}> = ({assetMetadata, repoLocation}) => {\n  const rows = assetMetadata.map((entry) => {\n    return {\n      key: entry.label,\n      value: <MetadataEntry entry={entry} repoLocation={repoLocation} />,\n    };\n  });\n  return (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      <MetadataTable rows={rows} />\n    </Box>\n  );\n};\n\nexport const ASSET_NODE_OP_METADATA_FRAGMENT = gql`\n  fragment AssetNodeOpMetadataFragment on AssetNode {\n    id\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    type {\n      ...DagsterTypeFragment\n    }\n  }\n  ${METADATA_ENTRY_FRAGMENT}\n  ${DAGSTER_TYPE_FRAGMENT}\n`;\n","import {Tooltip, Tag} from '@dagster-io/ui';\nimport moment from 'moment';\nimport React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {AssetGraphLiveQuery_assetNodes_freshnessPolicy} from '../asset-graph/types/AssetGraphLiveQuery';\nimport {humanCronString} from '../schedules/humanCronString';\n\nconst STALE_OVERDUE_MSG = `A materialization incorporating more recent upstream data is overdue.`;\nconst STALE_UNMATERIALIZED_MSG = `This asset has never been materialized.`;\n\ntype LiveDataWithMinutesLate = LiveDataForNode & {\n  freshnessInfo: NonNullable<LiveDataForNode['freshnessInfo']> & {currentMinutesLate: number};\n};\n\nexport function isAssetLate(liveData?: LiveDataForNode): liveData is LiveDataWithMinutesLate {\n  return (\n    (liveData?.freshnessInfo && (liveData?.freshnessInfo.currentMinutesLate || 0) > 0) || false\n  );\n}\n\nexport const humanizedLateString = (minLate: number) =>\n  `${moment.duration(minLate, 'minute').humanize(false, {m: 120, h: 48})} late`;\n\nexport const CurrentMinutesLateTag: React.FC<{\n  liveData: LiveDataForNode;\n  policyOnHover?: boolean;\n}> = ({liveData, policyOnHover}) => {\n  const {freshnessInfo, freshnessPolicy} = liveData;\n  const description = policyOnHover ? freshnessPolicyDescription(freshnessPolicy) : '';\n\n  if (!freshnessInfo) {\n    return <span />;\n  }\n\n  if (freshnessInfo.currentMinutesLate === null) {\n    return (\n      <Tooltip\n        content={<div style={{maxWidth: 400}}>{`${STALE_UNMATERIALIZED_MSG} ${description}`}</div>}\n      >\n        <Tag intent=\"danger\" icon=\"warning\">\n          Late\n        </Tag>\n      </Tooltip>\n    );\n  }\n\n  if (freshnessInfo.currentMinutesLate === 0) {\n    return description ? (\n      <Tooltip content={freshnessPolicyDescription(freshnessPolicy)}>\n        <Tag intent=\"success\" icon=\"check_circle\">\n          On time\n        </Tag>\n      </Tooltip>\n    ) : (\n      <Tag intent=\"success\" icon=\"check_circle\">\n        On time\n      </Tag>\n    );\n  }\n\n  return (\n    <Tooltip content={<div style={{maxWidth: 400}}>{`${STALE_OVERDUE_MSG} ${description}`}</div>}>\n      <Tag intent=\"danger\" icon=\"warning\">\n        {humanizedLateString(freshnessInfo.currentMinutesLate)}\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport const freshnessPolicyDescription = (\n  freshnessPolicy: AssetGraphLiveQuery_assetNodes_freshnessPolicy | null,\n) => {\n  if (!freshnessPolicy) {\n    return '';\n  }\n\n  const {cronSchedule, maximumLagMinutes} = freshnessPolicy;\n  const nbsp = '\\xa0';\n  const cronDesc = cronSchedule ? humanCronString(cronSchedule, 'UTC').replace(/^At /, '') : '';\n  const lagDesc =\n    maximumLagMinutes % 30 === 0\n      ? `${maximumLagMinutes / 60} hour${maximumLagMinutes / 60 !== 1 ? 's' : ''}`\n      : `${maximumLagMinutes} min`;\n\n  if (cronDesc) {\n    return `By ${cronDesc}, this asset should incorporate all data up to ${lagDesc} before that${nbsp}time.`;\n  } else {\n    return `At any point in time, this asset should incorporate all data up to ${lagDesc} before that${nbsp}time.`;\n  }\n};\n","import {Alert, Box, Spinner} from '@dagster-io/ui';\nimport {BorderSetting} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {titleForRun} from '../runs/RunUtils';\n\nexport const CurrentRunsBanner: React.FC<{liveData?: LiveDataForNode; border: BorderSetting}> = ({\n  liveData,\n  border,\n}) => {\n  const {inProgressRunIds = [], unstartedRunIds = []} = liveData || {};\n\n  if (inProgressRunIds.length === 0 && unstartedRunIds.length === 0) {\n    return null;\n  }\n  return (\n    <Box padding={{vertical: 16, left: 24, right: 12}} border={border}>\n      <Alert\n        intent=\"info\"\n        icon={<Spinner purpose=\"body-text\" />}\n        title={\n          <div style={{fontWeight: 400}}>\n            {inProgressRunIds.length > 0 && (\n              <>\n                {inProgressRunIds.map((runId) => (\n                  <React.Fragment key={runId}>\n                    Run{' '}\n                    <Link to={`/runs/${runId}`}>\n                      {titleForRun({\n                        runId,\n                      })}\n                    </Link>\n                  </React.Fragment>\n                ))}{' '}\n                {inProgressRunIds.length === 1 ? 'is' : 'are'} currently refreshing this asset.\n              </>\n            )}\n            {unstartedRunIds.length > 0 && (\n              <>\n                {unstartedRunIds.map((runId) => (\n                  <React.Fragment key={runId}>\n                    Run{' '}\n                    <Link to={`/runs/${runId}`}>\n                      {titleForRun({\n                        runId,\n                      })}\n                    </Link>\n                  </React.Fragment>\n                ))}{' '}\n                {unstartedRunIds.length === 1 ? 'has' : 'have'} started and will refresh this asset.\n              </>\n            )}\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box, Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nexport const DependsOnSelfBanner: React.FC = () => {\n  return (\n    <Box\n      padding={{vertical: 16, left: 24, right: 12}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Alert\n        intent=\"info\"\n        icon={\n          <Icon name=\"history_toggle_off\" size={16} color={Colors.Blue700} style={{marginTop: 1}} />\n        }\n        title={\n          <div style={{fontWeight: 400}}>This asset depends on earlier partitions of itself. </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport {BorderSetting} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {titleForRun} from '../runs/RunUtils';\n\nexport const FailedRunsSinceMaterializationBanner: React.FC<{\n  liveData?: LiveDataForNode;\n  border: BorderSetting;\n}> = ({liveData, border}) => {\n  const {runWhichFailedToMaterialize} = liveData || {};\n\n  if (runWhichFailedToMaterialize) {\n    return (\n      <Box padding={{vertical: 16, left: 24, right: 12}} border={border}>\n        <Alert\n          intent=\"error\"\n          title={\n            <div style={{fontWeight: 400}}>\n              Run{' '}\n              <Link to={`/runs/${runWhichFailedToMaterialize.id}`}>\n                {titleForRun({runId: runWhichFailedToMaterialize.id})}\n              </Link>{' '}\n              failed to materialize this asset.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n  return null;\n};\n","import {gql, useLazyQuery, useMutation, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonLink,\n  Checkbox,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tooltip,\n  Mono,\n} from '@dagster-io/ui';\nimport {History} from 'history';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {isTimeseriesPartition} from '../assets/MultipartitioningSupport';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {useViewport} from '../gantt/useViewport';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfill,\n  LaunchPartitionBackfillVariables,\n} from '../instance/types/LaunchPartitionBackfill';\nimport {LaunchButton} from '../launchpad/LaunchButton';\nimport {TagContainer, TagEditor} from '../launchpad/TagEditor';\nimport {RunStatus} from '../types/globalTypes';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRangeInput} from './PartitionRangeInput';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  GridScrollContainer,\n  LeftLabel,\n  topLabelHeightForLabels,\n  TopLabel,\n  TopLabelTilted,\n} from './RunMatrixUtils';\nimport {PartitionStatusQuery, PartitionStatusQueryVariables} from './types/PartitionStatusQuery';\nimport {\n  PartitionsBackfillSelectorQuery,\n  PartitionsBackfillSelectorQueryVariables,\n} from './types/PartitionsBackfillSelectorQuery';\n\nconst OVERSCROLL = 200;\nconst DEFAULT_RUN_LAUNCHER_NAME = 'DefaultRunLauncher';\n\ninterface BackfillOptions {\n  reexecute: boolean;\n  fromFailure: boolean;\n}\n\ntype SelectionRange = {\n  start: string;\n  end: string;\n};\n\nexport const PartitionsBackfillPartitionSelector: React.FC<{\n  partitionSetName: string;\n  pipelineName: string;\n  onLaunch?: (backfillId: string, stepQuery: string) => void;\n  onCancel?: () => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({partitionSetName, pipelineName, onLaunch, onCancel, onSubmit, repoAddress}) => {\n  const history = useHistory();\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const [currentSelectionRange, setCurrentSelectionRange] = React.useState<\n    SelectionRange | undefined\n  >();\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n  const [query, setQuery] = React.useState<string>('');\n  const [options, setOptions] = React.useState<BackfillOptions>({\n    reexecute: false,\n    fromFailure: false,\n  });\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const {containerProps, viewport} = useViewport({\n    initialOffset: React.useCallback((el) => ({left: el.scrollWidth - el.clientWidth, top: 0}), []),\n  });\n\n  React.useEffect(() => {\n    const resetSelectionRange = () => setCurrentSelectionRange(undefined);\n    window.addEventListener('mouseup', resetSelectionRange);\n    return () => window.removeEventListener('mouseup', resetSelectionRange);\n  });\n\n  const mounted = React.useRef(true);\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onLaunch]);\n\n  const {loading, data} = useQuery<\n    PartitionsBackfillSelectorQuery,\n    PartitionsBackfillSelectorQueryVariables\n  >(PARTITIONS_BACKFILL_SELECTOR_QUERY, {\n    variables: {\n      repositorySelector,\n      partitionSetName,\n      pipelineSelector: {\n        ...repositorySelector,\n        pipelineName,\n      },\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const [queryStatuses, {loading: statusesLoading, data: statusesData}] = useLazyQuery<\n    PartitionStatusQuery,\n    PartitionStatusQueryVariables\n  >(PARTITION_STATUS_QUERY, {\n    variables: {\n      repositorySelector,\n      partitionSetName,\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  if (!data || loading) {\n    return (\n      <Box margin={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.partitionSetOrError.__typename === 'PartitionSetNotFoundError') {\n    return (\n      <Box margin={20}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Partition Set Not Found\"\n          description={data.partitionSetOrError.message}\n        />\n      </Box>\n    );\n  }\n  if (data.pipelineSnapshotOrError.__typename === 'PipelineNotFoundError') {\n    return (\n      <Box margin={20}>\n        <NonIdealState\n          icon=\"error\"\n          title={isJob ? 'Job not found' : 'Pipeline not found'}\n          description={data.pipelineSnapshotOrError.message}\n        />\n      </Box>\n    );\n  }\n  if (data.pipelineSnapshotOrError.__typename === 'PipelineSnapshotNotFoundError') {\n    return (\n      <Box margin={20}>\n        <NonIdealState\n          icon=\"error\"\n          title={isJob ? 'Job not found' : 'Pipeline not found'}\n          description={data.pipelineSnapshotOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  if (data.partitionSetOrError.__typename === 'PythonError') {\n    return (\n      <Box margin={20}>\n        <PythonErrorInfo error={data.partitionSetOrError} />\n      </Box>\n    );\n  }\n\n  if (data.pipelineSnapshotOrError.__typename === 'PythonError') {\n    return (\n      <Box margin={20}>\n        <PythonErrorInfo error={data.pipelineSnapshotOrError} />;\n      </Box>\n    );\n  }\n\n  if (statusesData?.partitionSetOrError.__typename === 'PythonError') {\n    return (\n      <Box margin={20}>\n        <PythonErrorInfo error={statusesData?.partitionSetOrError} />\n      </Box>\n    );\n  }\n\n  const onSuccess = (backfillId: string) => {\n    showBackfillSuccessToast(history, backfillId);\n    onLaunch?.(backfillId, query);\n  };\n\n  const onError = (data: LaunchPartitionBackfill | null | undefined) => {\n    showBackfillErrorToast(data);\n  };\n\n  const {\n    partitionSetOrError: partitionSet,\n    pipelineSnapshotOrError: pipelineSnapshot,\n    instance,\n  } = data;\n\n  const solids = pipelineSnapshot.solidHandles.map((h: any) => h.solid);\n  const runPartitions =\n    partitionSet.partitionsOrError.__typename === 'Partitions'\n      ? partitionSet.partitionsOrError.results\n      : null;\n\n  if (!solids || !runPartitions) {\n    return <span />;\n  }\n\n  const partitionStatuses = () => {\n    if (\n      statusesData?.partitionSetOrError.__typename === 'PartitionSet' &&\n      statusesData.partitionSetOrError.partitionStatusesOrError.__typename === 'PartitionStatuses'\n    ) {\n      return statusesData.partitionSetOrError.partitionStatusesOrError.results;\n    }\n    return [];\n  };\n\n  const partitionNames = runPartitions.map((x) => x.name);\n  const statuses = partitionStatuses();\n\n  const partitionsWithLastRunSuccess = statuses\n    .filter((x) => x.runStatus === RunStatus.SUCCESS)\n    .map((x) => x.partitionName);\n\n  const partitionsWithLastRunFailure = statuses\n    .filter(\n      (x) =>\n        x.runStatus === RunStatus.FAILURE ||\n        x.runStatus === RunStatus.CANCELED ||\n        x.runStatus === RunStatus.CANCELING,\n    )\n    .map((x) => x.partitionName);\n\n  const selectablePartitions = options.reexecute\n    ? options.fromFailure\n      ? partitionsWithLastRunFailure\n      : partitionsWithLastRunSuccess\n    : partitionNames;\n\n  const solidsFiltered = filterByQuery(solids, query);\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n  const stepRows = layout.boxes.map((box) => ({\n    x: box.x,\n    name: box.node.name,\n  }));\n\n  const usingDefaultRunLauncher = instance.runLauncher?.name === DEFAULT_RUN_LAUNCHER_NAME;\n\n  const getRangeSelection = (start: string, end: string) => {\n    const startIdx = selectablePartitions.indexOf(start);\n    const endIdx = selectablePartitions.indexOf(end);\n    return selectablePartitions.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  };\n\n  const currentRangeSelection = currentSelectionRange\n    ? getRangeSelection(currentSelectionRange.start, currentSelectionRange.end)\n    : [];\n\n  const onPartitionMouseDown = (name: string) => {\n    setCurrentSelectionRange({start: name, end: name});\n  };\n\n  const onPartitionMouseUp = (_: string) => {\n    if (!currentRangeSelection.length) {\n      return;\n    }\n\n    const allSelected = currentRangeSelection.every((name) => selected.includes(name));\n    if (allSelected) {\n      setSelected(selected.filter((x) => !currentRangeSelection.includes(x)));\n    } else {\n      const newSelected = new Set(selected);\n      currentRangeSelection.forEach((name) => newSelected.add(name));\n      setSelected(Array.from(newSelected));\n    }\n    setCurrentSelectionRange(undefined);\n  };\n\n  const onPartitionMouseOver = (name: string) => {\n    if (!currentSelectionRange) {\n      return;\n    }\n    const {start} = currentSelectionRange;\n    setCurrentSelectionRange({start, end: name});\n  };\n\n  const visibleRangeStart = Math.max(0, Math.floor((viewport.left - OVERSCROLL) / BOX_SIZE));\n  const visibleCount = Math.ceil((viewport.width + OVERSCROLL * 2) / BOX_SIZE);\n  const visiblePartitionNames = partitionNames.slice(\n    visibleRangeStart,\n    visibleRangeStart + visibleCount,\n  );\n\n  const topLabelHeight = topLabelHeightForLabels(partitionNames);\n\n  return (\n    <>\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <strong style={{display: 'block'}}>Partitions</strong>\n            <Checkbox\n              label=\"Select all\"\n              disabled={!selectablePartitions.length}\n              style={{marginBottom: 0, marginLeft: 10}}\n              checked={selected.length === selectablePartitions.length}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                if (!e.target.checked) {\n                  setSelected([]);\n                } else {\n                  setSelected(\n                    selected.length === selectablePartitions.length ? [] : selectablePartitions,\n                  );\n                }\n              }}\n            />\n          </Box>\n          <PartitionRangeInput\n            value={selected}\n            partitionKeys={partitionNames}\n            onChange={setSelected}\n            isTimeseries={isTimeseriesPartition(partitionNames[0])}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 24}} margin={{top: 16}}>\n          <Box flex={{direction: 'column', gap: 8}}>\n            <strong>Step subset</strong>\n            <GraphQueryInput\n              disabled={options.fromFailure}\n              width={520}\n              items={solids}\n              value={query}\n              placeholder=\"Type a step subset\"\n              onChange={setQuery}\n            />\n          </Box>\n          <Box flex={{direction: 'column', gap: 12}}>\n            <strong>Options</strong>\n            <div style={{display: 'flex'}}>\n              <Checkbox\n                checked={options.fromFailure}\n                onChange={() => {\n                  if (!statusesData) {\n                    queryStatuses();\n                  }\n                  setSelected([]);\n                  setQuery('');\n                  setOptions({\n                    ...options,\n                    reexecute: !options.reexecute,\n                    fromFailure: !options.fromFailure,\n                  });\n                }}\n                label={\n                  <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                    <Box margin={{right: 4}}>Re-execute from failures</Box>\n                    <Tooltip\n                      placement=\"top\"\n                      content=\"For each partition, if the most recent run failed, launch a re-execution starting from the steps that failed.\"\n                    >\n                      <Icon name=\"info\" color={Colors.Gray500} />\n                    </Tooltip>\n                  </Box>\n                }\n              />\n              {statusesLoading ? (\n                <div style={{marginLeft: '8px', marginTop: '3px'}}>\n                  <Spinner purpose=\"body-text\" />\n                </div>\n              ) : null}\n            </div>\n          </Box>\n        </Box>\n        <Box flex={{direction: 'column', gap: 8}} margin={{top: 16}}>\n          <TagEditor\n            tagsFromSession={tags}\n            onChange={setTags}\n            open={tagEditorOpen}\n            onRequestClose={() => setTagEditorOpen(false)}\n          />\n          <strong>Tags</strong>\n          {tags.length ? (\n            <div style={{border: `1px solid ${Colors.Gray300}`, borderRadius: 8, padding: 3}}>\n              <TagContainer tagsFromSession={tags} onRequestEdit={() => setTagEditorOpen(true)} />\n            </div>\n          ) : (\n            <div>\n              <Button onClick={() => setTagEditorOpen(true)}>Add tags to backfill runs</Button>\n            </div>\n          )}\n        </Box>\n\n        <div\n          style={{\n            display: 'flex',\n            marginTop: 20,\n            paddingTop: 20,\n            borderTop: `1px solid ${Colors.Gray100}`,\n            justifyContent: 'space-between',\n          }}\n        >\n          <strong style={{display: 'block', marginBottom: 4}}>Preview</strong>\n          <div style={{color: Colors.Gray400}}>Click or drag to edit selected partitions</div>\n        </div>\n        <div style={{display: 'flex', border: `1px solid ${Colors.Gray200}`}}>\n          {query && (\n            <GridFloatingContainer floating={true}>\n              <GridColumn disabled>\n                <TopLabel style={{height: topLabelHeight}} />\n                {stepRows.map((step) => (\n                  <LeftLabel style={{paddingLeft: step.x}} key={step.name}>\n                    {step.name}\n                  </LeftLabel>\n                ))}\n              </GridColumn>\n            </GridFloatingContainer>\n          )}\n          <GridScrollContainer {...containerProps}>\n            <div\n              style={{\n                width: partitionNames.length * BOX_SIZE,\n                position: 'relative',\n                height: query\n                  ? stepRows.length * BOX_SIZE + topLabelHeight\n                  : BOX_SIZE + topLabelHeight + 25,\n              }}\n            >\n              {visiblePartitionNames.map((partitionName, idx) => (\n                <GridColumn\n                  key={partitionName}\n                  style={{\n                    zIndex: partitionNames.length - (idx + visibleRangeStart),\n                    width: BOX_SIZE,\n                    position: 'absolute',\n                    userSelect: 'none',\n                    left: (idx + visibleRangeStart) * BOX_SIZE,\n                  }}\n                  disabled={statusesLoading || !selectablePartitions.includes(partitionName)}\n                  focused={selected.includes(partitionName)}\n                  multiselectFocused={currentRangeSelection.includes(partitionName)}\n                  onMouseDown={() => onPartitionMouseDown(partitionName)}\n                  onMouseUp={() => onPartitionMouseUp(partitionName)}\n                  onMouseOver={() => onPartitionMouseOver(partitionName)}\n                >\n                  <TopLabelTilted $height={topLabelHeight} label={partitionName} />\n                  {!options.reexecute ? (\n                    <div\n                      className={`square ${\n                        selectablePartitions.includes(partitionName) ? 'missing' : 'disabled'\n                      }`}\n                    />\n                  ) : options.fromFailure ? (\n                    <div\n                      className={`square ${\n                        selectablePartitions.includes(partitionName) ? 'failure' : 'disabled'\n                      }`}\n                    />\n                  ) : (\n                    stepRows.map((step) => (\n                      <div\n                        key={`${partitionName}:${step.name}`}\n                        className={`square ${\n                          selectablePartitions.includes(partitionName) ? 'missing' : 'disabled'\n                        }`}\n                      />\n                    ))\n                  )}\n                </GridColumn>\n              ))}\n            </div>\n          </GridScrollContainer>\n        </div>\n\n        {!instance.daemonHealth.daemonStatus.healthy ? (\n          <div style={{marginTop: 10}}>\n            <DaemonNotRunningAlert />\n          </div>\n        ) : null}\n        {usingDefaultRunLauncher && !instance.runQueuingSupported ? (\n          <div style={{marginTop: 10}}>\n            <UsingDefaultLauncherAlert />\n          </div>\n        ) : null}\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <LaunchBackfillButton\n          partitionNames={selected}\n          partitionSetName={partitionSet.name}\n          reexecutionSteps={\n            !options.fromFailure && solidsFiltered.all.length < solids.length\n              ? stepRows.map((step) => step.name)\n              : undefined\n          }\n          fromFailure={options.fromFailure}\n          tags={tags}\n          onSubmit={onSubmit}\n          onSuccess={onSuccess}\n          onError={onError}\n          repoAddress={repoAddress}\n        />\n      </DialogFooter>\n    </>\n  );\n};\n\nconst LaunchBackfillButton: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  reexecutionSteps?: string[];\n  fromFailure?: boolean;\n  tags?: PipelineRunTag[];\n  onSuccess?: (backfillId: string) => void;\n  onError: (data: LaunchPartitionBackfill | null | undefined) => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  partitionNames,\n  reexecutionSteps,\n  fromFailure,\n  tags,\n  onSuccess,\n  onError,\n  onSubmit,\n  repoAddress,\n}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const mounted = React.useRef(true);\n  const [launchBackfill, {loading}] = useMutation<\n    LaunchPartitionBackfill,\n    LaunchPartitionBackfillVariables\n  >(LAUNCH_PARTITION_BACKFILL_MUTATION);\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onSuccess]);\n\n  const onLaunch = async () => {\n    onSubmit();\n    const {data} = await launchBackfill({\n      variables: {\n        backfillParams: {\n          selector: {\n            partitionSetName,\n            repositorySelector,\n          },\n          partitionNames,\n          reexecutionSteps,\n          fromFailure,\n          tags,\n        },\n      },\n    });\n\n    if (!mounted.current) {\n      return;\n    }\n\n    if (data && data.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n      onSuccess?.(data.launchPartitionBackfill.backfillId);\n    } else {\n      onError?.(data);\n    }\n  };\n\n  const count = partitionNames.length;\n  const reexecutionCount = reexecutionSteps?.length;\n\n  const title = () => {\n    if (loading) {\n      return `Submitting ${count} ${count === 1 ? 'run' : 'runs'}…`;\n    }\n\n    if (count) {\n      return `Submit ${count} ${count === 1 ? 'run' : 'runs'}`;\n    }\n\n    return 'Select partitions to submit';\n  };\n\n  const subtitle = () => {\n    return !loading && reexecutionCount\n      ? `(${reexecutionCount} selected ${reexecutionCount === 1 ? 'step' : 'steps'})`\n      : '';\n  };\n\n  const buttonTitle = [title(), subtitle()].join(' ');\n\n  return (\n    <LaunchButton\n      runCount={count}\n      config={{\n        title: buttonTitle,\n        icon: 'open_in_new',\n        disabled: !count || loading,\n        onClick: onLaunch,\n      }}\n    />\n  );\n};\n\nconst PARTITIONS_BACKFILL_SELECTOR_QUERY = gql`\n  query PartitionsBackfillSelectorQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n    $pipelineSelector: PipelineSelector!\n  ) {\n    partitionSetOrError(\n      partitionSetName: $partitionSetName\n      repositorySelector: $repositorySelector\n    ) {\n      ... on PartitionSet {\n        id\n        name\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              name\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n      ... on PartitionSetNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          handleID\n          solid {\n            name\n            definition {\n              name\n            }\n            inputs {\n              dependsOn {\n                solid {\n                  name\n                }\n              }\n            }\n            outputs {\n              dependedBy {\n                solid {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      runLauncher {\n        name\n      }\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"BACKFILL\") {\n          id\n          healthy\n        }\n      }\n      runQueuingSupported\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst PARTITION_STATUS_QUERY = gql`\n  query PartitionStatusQuery($partitionSetName: String!, $repositorySelector: RepositorySelector!) {\n    partitionSetOrError(\n      partitionSetName: $partitionSetName\n      repositorySelector: $repositorySelector\n    ) {\n      ... on PartitionSet {\n        id\n        name\n        partitionStatusesOrError {\n          ... on PartitionStatuses {\n            results {\n              id\n              partitionName\n              runStatus\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n      ... on PartitionSetNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nfunction messageForLaunchBackfillError(data: LaunchPartitionBackfill | null | undefined) {\n  const result = data?.launchPartitionBackfill;\n\n  let errors = <></>;\n  if (result?.__typename === 'PythonError' || result?.__typename === 'PartitionSetNotFoundError') {\n    errors = <PythonErrorInfo error={result} />;\n  } else if (result?.__typename === 'InvalidStepError') {\n    errors = <div>{`Invalid step: ${result.invalidStepKey}`}</div>;\n  } else if (result?.__typename === 'InvalidOutputError') {\n    errors = <div>{`Invalid output: ${result.invalidOutputName} for ${result.stepKey}`}</div>;\n  } else if (result && 'errors' in result) {\n    errors = (\n      <>\n        {result['errors'].map((error, idx) => (\n          <PythonErrorInfo error={error} key={idx} />\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <div>An unexpected error occurred. This backfill was not launched.</div>\n      {errors ? (\n        <ButtonLink\n          color={Colors.White}\n          underline=\"always\"\n          onClick={() => {\n            showCustomAlert({\n              body: errors,\n            });\n          }}\n        >\n          View error\n        </ButtonLink>\n      ) : null}\n    </Group>\n  );\n}\n\nexport function showBackfillErrorToast(data: LaunchPartitionBackfill | null | undefined) {\n  SharedToaster.show({\n    message: messageForLaunchBackfillError(data),\n    icon: 'error',\n    intent: 'danger',\n  });\n}\n\nexport function showBackfillSuccessToast(history: History<unknown>, backfillId: string) {\n  SharedToaster.show({\n    intent: 'success',\n    message: (\n      <div>\n        Created backfill <Mono>{backfillId}</Mono>\n      </div>\n    ),\n    action: {\n      text: 'View',\n      onClick: () => history.push('/overview/backfills'),\n    },\n  });\n}\n\nconst DaemonNotRunningAlert: React.FC = () => (\n  <Alert\n    intent=\"warning\"\n    title=\"The backfill daemon is not running.\"\n    description={\n      <div>\n        See the{' '}\n        <a\n          href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          dagster-daemon documentation\n        </a>{' '}\n        for more information on how to deploy the dagster-daemon process.\n      </div>\n    }\n  />\n);\n\nconst UsingDefaultLauncherAlert: React.FC = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Using the default run launcher <code>{DEFAULT_RUN_LAUNCHER_NAME}</code> for launching\n        backfills without a queued run coordinator is not advised.\n      </div>\n    }\n    description={\n      <div>\n        Check your instance configuration in <code>dagster.yaml</code> to either configure the{' '}\n        <a\n          href=\"https://docs.dagster.io/deployment/run-coordinator\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          queued run coordinator\n        </a>{' '}\n        or to configure a run launcher more appropriate for launching a large number of jobs.\n      </div>\n    }\n  />\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {RunningBackfillsNoticeQuery} from './types/RunningBackfillsNoticeQuery';\n\nexport const RunningBackfillsNotice: React.FC<{partitionSetName: string}> = ({\n  partitionSetName,\n}) => {\n  const {data} = useQuery<RunningBackfillsNoticeQuery>(RUNNING_BACKFILLS_NOTICE_QUERY, {\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const runningBackfills =\n    data?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n      ? data.partitionBackfillsOrError.results\n      : [];\n\n  const runningBackfillCount = runningBackfills.filter(\n    (r) => r.partitionSetName === partitionSetName,\n  ).length;\n\n  if (runningBackfillCount === 0) {\n    return <span />;\n  }\n  return (\n    <div style={{color: Colors.Gray400, maxWidth: 350}}>\n      {runningBackfillCount === 1\n        ? 'Note: A backfill has been requested for this job and may be refreshing displayed assets. '\n        : `Note: ${runningBackfillCount} backfills have been requested for this job and may be refreshing displayed assets. `}\n      <Link to=\"/overview/backfills\" target=\"_blank\">\n        <Box flex={{gap: 4, display: 'inline-flex', alignItems: 'center'}}>\n          View <Icon name=\"open_in_new\" color={Colors.Link} />\n        </Box>\n      </Link>\n    </div>\n  );\n};\n\nconst RUNNING_BACKFILLS_NOTICE_QUERY = gql`\n  query RunningBackfillsNoticeQuery {\n    partitionBackfillsOrError(status: REQUESTED) {\n      __typename\n      ... on PartitionBackfills {\n        results {\n          partitionSetName\n          backfillId\n        }\n      }\n    }\n  }\n`;\n","import {useApolloClient} from '@apollo/client';\nimport {\n  Dialog,\n  DialogHeader,\n  DialogBody,\n  Box,\n  Button,\n  ButtonLink,\n  DialogFooter,\n  Tooltip,\n  Colors,\n  Alert,\n} from '@dagster-io/ui';\nimport reject from 'lodash/reject';\nimport React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {usePermissions} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {PartitionHealthSummary} from '../assets/PartitionHealthSummary';\nimport {AssetKey} from '../assets/types';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfill,\n  LaunchPartitionBackfillVariables,\n} from '../instance/types/LaunchPartitionBackfill';\nimport {CONFIG_PARTITION_SELECTION_QUERY} from '../launchpad/ConfigEditorConfigPicker';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {\n  ConfigPartitionSelectionQuery,\n  ConfigPartitionSelectionQueryVariables,\n} from '../launchpad/types/ConfigPartitionSelectionQuery';\nimport {PartitionRangeWizard} from '../partitions/PartitionRangeWizard';\nimport {PartitionStateCheckboxes} from '../partitions/PartitionStateCheckboxes';\nimport {PartitionState} from '../partitions/PartitionStatus';\nimport {showBackfillErrorToast, showBackfillSuccessToast} from '../partitions/PartitionsBackfill';\nimport {assembleIntoSpans, stringForSpan} from '../partitions/SpanRepresentation';\nimport {RepoAddress} from '../workspace/types';\n\nimport {executionParamsForAssetJob} from './LaunchAssetExecutionButton';\nimport {explodePartitionKeysInRanges, mergedAssetHealth} from './MultipartitioningSupport';\nimport {RunningBackfillsNotice} from './RunningBackfillsNotice';\nimport {\n  LaunchAssetExecutionAssetNodeFragment_partitionDefinition,\n  LaunchAssetExecutionAssetNodeFragment_partitionKeysByDimension,\n} from './types/LaunchAssetExecutionAssetNodeFragment';\nimport {usePartitionDimensionRanges} from './usePartitionDimensionRanges';\nimport {PartitionHealthDimensionRange, usePartitionHealthData} from './usePartitionHealthData';\nimport {usePartitionNameForPipeline} from './usePartitionNameForPipeline';\ninterface Props {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  repoAddress: RepoAddress;\n  assetJobName: string;\n  assets: {\n    assetKey: AssetKey;\n    opNames: string[];\n    partitionKeysByDimension: LaunchAssetExecutionAssetNodeFragment_partitionKeysByDimension[];\n    partitionDefinition: LaunchAssetExecutionAssetNodeFragment_partitionDefinition | null;\n  }[];\n  upstreamAssetKeys: AssetKey[]; // single layer of upstream dependencies\n}\n\nexport const LaunchAssetChoosePartitionsDialog: React.FC<Props> = (props) => {\n  const title = `Launch runs to materialize ${\n    props.assets.length > 1\n      ? `${props.assets.length} assets`\n      : displayNameForAssetKey(props.assets[0].assetKey)\n  }`;\n\n  return (\n    <Dialog\n      style={{width: 700}}\n      isOpen={props.open}\n      canEscapeKeyClose\n      canOutsideClickClose\n      onClose={() => props.setOpen(false)}\n    >\n      <DialogHeader icon=\"layers\" label={title} />\n      <LaunchAssetChoosePartitionsDialogBody {...props} />\n    </Dialog>\n  );\n};\n\n// Note: This dialog loads a lot of data - the body is broken into a separate\n// component so we can be *sure* the hooks won't load data until it's opened.\n// (<Dialog> does not render it's children until open=true)\n//\n// Additionally, we want the dialog to reset when it's closed and re-opened so\n// that partition health, etc. is up-to-date.\n//\nconst LaunchAssetChoosePartitionsDialogBody: React.FC<Props> = ({\n  setOpen,\n  assets,\n  repoAddress,\n  assetJobName,\n  upstreamAssetKeys,\n}) => {\n  const partitionedAssets = assets.filter((a) => !!a.partitionDefinition);\n\n  const {canLaunchPartitionBackfill} = usePermissions();\n  const [launching, setLaunching] = React.useState(false);\n  const [previewCount, setPreviewCount] = React.useState(0);\n  const morePreviewsCount = partitionedAssets.length - previewCount;\n\n  const assetHealth = usePartitionHealthData(partitionedAssets.map((a) => a.assetKey));\n  const mergedHealth = React.useMemo(() => mergedAssetHealth(assetHealth), [assetHealth]);\n\n  const [ranges, setRanges] = usePartitionDimensionRanges({\n    knownDimensionNames: partitionedAssets[0].partitionKeysByDimension.map((d) => d.name),\n    modifyQueryString: false,\n    assetHealth: mergedHealth,\n  });\n\n  const [stateFilters, setStateFilters] = React.useState<PartitionState[]>([\n    PartitionState.MISSING,\n  ]);\n\n  const allInRanges = React.useMemo(\n    () =>\n      explodePartitionKeysInRanges(ranges, (dimensionKeys: string[]) => {\n        // Note: If the merged asset health for a given partition is \"partial\", we want\n        // to group it into \"missing\" within the backfill UI. We don't have a fine-grained\n        // way to run just the missing assets within the partition.\n        //\n        // The alternative would be to offer a \"Partial\" checkbox alongside \"Missing\",\n        // but defining missing as \"missing for /any/ asset I've selected\" is simpler.\n        //\n        const state = mergedHealth.stateForKey(dimensionKeys);\n        return state === PartitionState.SUCCESS_MISSING ? PartitionState.MISSING : state;\n      }),\n    [ranges, mergedHealth],\n  );\n\n  const allSelected = React.useMemo(\n    () => allInRanges.filter((key) => stateFilters.includes(key.state)),\n    [allInRanges, stateFilters],\n  );\n\n  const client = useApolloClient();\n  const history = useHistory();\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  // Find the partition set name. This seems like a bit of a hack, unclear\n  // how it would work if there were two different partition spaces in the asset job\n  const {partitionSet, partitionSetError} = usePartitionNameForPipeline(repoAddress, assetJobName);\n\n  const onLaunch = async () => {\n    setLaunching(true);\n\n    if (!partitionSet) {\n      setLaunching(false);\n      showCustomAlert({\n        title: `Unable to find partition set on ${assetJobName}`,\n        body: partitionSetError ? <PythonErrorInfo error={partitionSetError} /> : <span />,\n      });\n      return;\n    }\n\n    if (allSelected.length === 1) {\n      const {data: tagAndConfigData} = await client.query<\n        ConfigPartitionSelectionQuery,\n        ConfigPartitionSelectionQueryVariables\n      >({\n        query: CONFIG_PARTITION_SELECTION_QUERY,\n        fetchPolicy: 'network-only',\n        variables: {\n          repositorySelector: {\n            repositoryLocationName: repoAddress.location,\n            repositoryName: repoAddress.name,\n          },\n          partitionSetName: partitionSet.name,\n          partitionName: allSelected[0].partitionKey,\n        },\n      });\n\n      if (\n        !tagAndConfigData ||\n        !tagAndConfigData.partitionSetOrError ||\n        tagAndConfigData.partitionSetOrError.__typename !== 'PartitionSet' ||\n        !tagAndConfigData.partitionSetOrError.partition\n      ) {\n        return;\n      }\n\n      const {partition} = tagAndConfigData.partitionSetOrError;\n\n      if (partition.tagsOrError.__typename === 'PythonError') {\n        setLaunching(false);\n        showCustomAlert({\n          title: 'Unable to load tags',\n          body: <PythonErrorInfo error={partition.tagsOrError} />,\n        });\n        return;\n      }\n      if (partition.runConfigOrError.__typename === 'PythonError') {\n        setLaunching(false);\n        showCustomAlert({\n          title: 'Unable to load tags',\n          body: <PythonErrorInfo error={partition.runConfigOrError} />,\n        });\n        return;\n      }\n\n      const tags = [...partition.tagsOrError.results];\n      const runConfigData = partition.runConfigOrError.yaml || '';\n\n      const result = await launchWithTelemetry(\n        {\n          executionParams: {\n            ...executionParamsForAssetJob(repoAddress, assetJobName, assets, tags),\n            runConfigData,\n            mode: partition.mode,\n          },\n        },\n        'toast',\n      );\n\n      setLaunching(false);\n      if (result?.__typename === 'LaunchRunSuccess') {\n        setOpen(false);\n      }\n    } else {\n      const {data: launchBackfillData} = await client.mutate<\n        LaunchPartitionBackfill,\n        LaunchPartitionBackfillVariables\n      >({\n        mutation: LAUNCH_PARTITION_BACKFILL_MUTATION,\n        variables: {\n          backfillParams: {\n            selector: {\n              partitionSetName: partitionSet.name,\n              repositorySelector: {\n                repositoryLocationName: repoAddress.location,\n                repositoryName: repoAddress.name,\n              },\n            },\n            assetSelection: assets.map((a) => ({path: a.assetKey.path})),\n            partitionNames: allSelected.map((k) => k.partitionKey),\n            fromFailure: false,\n            tags: [],\n          },\n        },\n      });\n\n      setLaunching(false);\n\n      if (launchBackfillData?.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n        showBackfillSuccessToast(history, launchBackfillData?.launchPartitionBackfill.backfillId);\n        setOpen(false);\n      } else {\n        showBackfillErrorToast(launchBackfillData);\n      }\n    }\n  };\n\n  return (\n    <>\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box>\n            Select partitions to materialize. Click and drag to select a range on the timeline.\n          </Box>\n\n          {ranges.map((range, idx) => (\n            <PartitionRangeWizard\n              key={range.dimension.name}\n              partitionKeys={range.dimension.partitionKeys}\n              partitionStateForKey={(dimensionKey) =>\n                mergedHealth.stateForSingleDimension(\n                  idx,\n                  dimensionKey,\n                  ranges.length === 2 ? ranges[1 - idx].selected : undefined,\n                )\n              }\n              selected={range.selected}\n              setSelected={(selected) =>\n                setRanges(\n                  ranges.map((r) => (r.dimension === range.dimension ? {...r, selected} : r)),\n                )\n              }\n            />\n          ))}\n          <PartitionStateCheckboxes\n            partitionKeysForCounts={allInRanges}\n            allowed={[PartitionState.MISSING, PartitionState.SUCCESS]}\n            value={stateFilters}\n            onChange={setStateFilters}\n          />\n        </Box>\n\n        {previewCount > 0 && (\n          <Box\n            margin={{top: 16}}\n            flex={{direction: 'column', gap: 8}}\n            padding={{vertical: 16, horizontal: 20}}\n            border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n            background={Colors.Gray100}\n            style={{\n              marginLeft: -20,\n              marginRight: -20,\n              overflowY: 'auto',\n              overflowX: 'visible',\n              maxHeight: '35vh',\n            }}\n          >\n            {partitionedAssets.slice(0, previewCount).map((a) => (\n              <PartitionHealthSummary\n                key={displayNameForAssetKey(a.assetKey)}\n                assetKey={a.assetKey}\n                showAssetKey\n                data={assetHealth}\n                ranges={ranges}\n              />\n            ))}\n            {morePreviewsCount > 0 && (\n              <Box margin={{vertical: 8}}>\n                <ButtonLink onClick={() => setPreviewCount(partitionedAssets.length)}>\n                  Show {morePreviewsCount} more {morePreviewsCount > 1 ? 'previews' : 'preview'}\n                </ButtonLink>\n              </Box>\n            )}\n          </Box>\n        )}\n\n        {previewCount === 0 && partitionedAssets.length > 1 && (\n          <Box margin={{top: 16, bottom: 8}}>\n            <ButtonLink onClick={() => setPreviewCount(5)}>\n              Show per-asset partition health\n            </ButtonLink>\n          </Box>\n        )}\n\n        <UpstreamUnavailableWarning\n          upstreamAssetKeys={upstreamAssetKeys}\n          ranges={ranges}\n          setRanges={setRanges}\n        />\n      </DialogBody>\n      <DialogFooter\n        left={partitionSet && <RunningBackfillsNotice partitionSetName={partitionSet.name} />}\n      >\n        <Button intent=\"none\" onClick={() => setOpen(false)}>\n          Cancel\n        </Button>\n        {allSelected.length !== 1 && !canLaunchPartitionBackfill.enabled ? (\n          <Tooltip content={canLaunchPartitionBackfill.disabledReason}>\n            <Button disabled>{`Launch ${allSelected.length}-Run Backfill`}</Button>\n          </Tooltip>\n        ) : (\n          <Button\n            intent=\"primary\"\n            onClick={onLaunch}\n            disabled={allSelected.length === 0}\n            loading={launching}\n          >\n            {launching\n              ? 'Launching...'\n              : allSelected.length !== 1\n              ? `Launch ${allSelected.length}-Run Backfill`\n              : `Launch 1 Run`}\n          </Button>\n        )}\n      </DialogFooter>\n    </>\n  );\n};\n\nconst UpstreamUnavailableWarning: React.FC<{\n  upstreamAssetKeys: AssetKey[];\n  ranges: PartitionHealthDimensionRange[];\n  setRanges: (next: PartitionHealthDimensionRange[]) => void;\n}> = ({upstreamAssetKeys, ranges, setRanges}) => {\n  // We want to warn if an immediately upstream asset 1) has the same partitioning and\n  // 2) is missing materializations for keys in `allSelected`. We only offer this feature\n  // for single-dimensional partitioned assets because it's difficult to express the\n  // unavailable partitions in the multi-dimensional case and our \"two range inputs\" won't\n  // allow us to remove missing individual pairs.\n  const upstreamAssetHealth = usePartitionHealthData(upstreamAssetKeys);\n  const upstreamUnavailable = (singleDimensionKey: string) =>\n    upstreamAssetHealth.length > 0 &&\n    upstreamAssetHealth.some((a) => {\n      // If the key is not undefined, it's present in the partition key space of the asset\n      return a.stateForKey([singleDimensionKey]) === PartitionState.MISSING;\n    });\n\n  const upstreamUnavailableSpans =\n    ranges.length === 1\n      ? assembleIntoSpans(ranges[0].selected, upstreamUnavailable).filter((s) => s.status === true)\n      : [];\n\n  const onRemoveUpstreamUnavailable = () => {\n    if (ranges.length > 1) {\n      throw new Error('Assertion failed, this feature is only available for 1 dimensional assets');\n    }\n    setRanges([{...ranges[0], selected: reject(ranges[0].selected, upstreamUnavailable)}]);\n  };\n\n  if (upstreamUnavailableSpans.length === 0) {\n    return <span />;\n  }\n\n  return (\n    <Box margin={{top: 16}}>\n      <Alert\n        intent=\"warning\"\n        title=\"Upstream data missing\"\n        description={\n          <>\n            {upstreamUnavailableSpans\n              .map((span) => stringForSpan(span, ranges[0].selected))\n              .join(', ')}\n            {\n              ' cannot be materialized because upstream materializations are missing. Consider materializing upstream assets or '\n            }\n            <ButtonLink underline=\"always\" onClick={onRemoveUpstreamUnavailable}>\n              remove these partitions\n            </ButtonLink>\n            {` to avoid failures.`}\n          </>\n        }\n      />\n    </Box>\n  );\n};\n","import {ApolloClient, gql, useApolloClient} from '@apollo/client';\nimport {Box, Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui';\nimport pick from 'lodash/pick';\nimport uniq from 'lodash/uniq';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {usePermissions} from '../app/Permissions';\nimport {\n  displayNameForAssetKey,\n  isHiddenAssetGroupJob,\n  LiveData,\n  toGraphId,\n} from '../asset-graph/Utils';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {AssetLaunchpad} from '../launchpad/LaunchpadRoot';\nimport {DagsterTag} from '../runs/RunTag';\nimport {LaunchPipelineExecutionVariables} from '../runs/types/LaunchPipelineExecution';\nimport {CONFIG_TYPE_SCHEMA_FRAGMENT} from '../typeexplorer/ConfigTypeSchema';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from './AssetConfig';\nimport {MULTIPLE_DEFINITIONS_WARNING} from './AssetDefinedInMultipleReposNotice';\nimport {LaunchAssetChoosePartitionsDialog} from './LaunchAssetChoosePartitionsDialog';\nimport {isAssetMissing, isAssetStale} from './StaleTag';\nimport {AssetKey} from './types';\nimport {\n  LaunchAssetCheckUpstreamQuery,\n  LaunchAssetCheckUpstreamQueryVariables,\n} from './types/LaunchAssetCheckUpstreamQuery';\nimport {LaunchAssetExecutionAssetNodeFragment} from './types/LaunchAssetExecutionAssetNodeFragment';\nimport {\n  LaunchAssetLoaderQuery,\n  LaunchAssetLoaderQueryVariables,\n} from './types/LaunchAssetLoaderQuery';\nimport {\n  LaunchAssetLoaderResourceQuery,\n  LaunchAssetLoaderResourceQueryVariables,\n} from './types/LaunchAssetLoaderResourceQuery';\n\ntype LaunchAssetsState =\n  | {type: 'none'}\n  | {type: 'loading'}\n  | {type: 'error'; error: string}\n  | {\n      type: 'launchpad';\n      jobName: string;\n      sessionPresets: Partial<IExecutionSession>;\n      repoAddress: RepoAddress;\n    }\n  | {\n      type: 'partitions';\n      jobName: string;\n      assets: LaunchAssetExecutionAssetNodeFragment[];\n      upstreamAssetKeys: AssetKey[];\n      repoAddress: RepoAddress;\n    }\n  | {\n      type: 'single-run';\n      executionParams: LaunchPipelineExecutionVariables['executionParams'];\n    };\n\nconst countOrBlank = (k: unknown[]) => (k.length > 1 ? ` (${k.length})` : '');\n\ntype Asset =\n  | {assetKey: AssetKey; partitionDefinition: {__typename: string} | null; isSource: boolean}\n  | {assetKey: AssetKey; isPartitioned: boolean; isSource: boolean};\n\ntype AssetsInScope = {all: Asset[]; skipAllTerm?: boolean} | {selected: Asset[]};\n\ntype LaunchOption = {assetKeys: AssetKey[]; label: string};\n\nconst isAnyPartitioned = (assets: Asset[]) =>\n  assets.some(\n    (a) =>\n      ('partitionDefinition' in a && !!a.partitionDefinition) ||\n      ('isPartitioned' in a && a.isPartitioned),\n  );\n\nfunction optionsForButton(scope: AssetsInScope, liveDataForStale?: LiveData): LaunchOption[] {\n  // If you pass a set of selected assets, we always show just one option\n  // to materialize that selection.\n  if ('selected' in scope) {\n    const assets = scope.selected.filter((a) => !a.isSource);\n    return [\n      {\n        assetKeys: assets.map((a) => a.assetKey),\n        label: `Materialize selected${countOrBlank(assets)}${isAnyPartitioned(assets) ? '…' : ''}`,\n      },\n    ];\n  }\n\n  const options: LaunchOption[] = [];\n  const assets = scope.all.filter((a) => !a.isSource);\n\n  options.push({\n    assetKeys: assets.map((a) => a.assetKey),\n    label:\n      assets.length > 1 && !scope.skipAllTerm\n        ? `Materialize all${isAnyPartitioned(assets) ? '…' : ''}`\n        : `Materialize${isAnyPartitioned(assets) ? '…' : ''}`,\n  });\n\n  if (liveDataForStale) {\n    const missingOrStale = assets.filter(\n      (a) =>\n        isAssetMissing(liveDataForStale[toGraphId(a.assetKey)]) ||\n        isAssetStale(liveDataForStale[toGraphId(a.assetKey)]),\n    );\n\n    options.push({\n      assetKeys: missingOrStale.map((a) => a.assetKey),\n      label: `Materialize stale and missing${countOrBlank(missingOrStale)}`,\n    });\n  }\n\n  return options;\n}\n\nexport const LaunchAssetExecutionButton: React.FC<{\n  scope: AssetsInScope;\n  liveDataForStale?: LiveData; // For \"stale\" dropdown options\n  intent?: 'primary' | 'none';\n  preferredJobName?: string;\n}> = ({scope, liveDataForStale, preferredJobName, intent = 'primary'}) => {\n  const {canLaunchPipelineExecution} = usePermissions();\n  const {onClick, loading, launchpadElement} = useMaterializationAction(preferredJobName);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const options = optionsForButton(scope, liveDataForStale);\n  const firstOption = options[0];\n  if (!firstOption) {\n    return <span />;\n  }\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return (\n      <Tooltip content=\"You do not have permission to materialize assets\" position=\"bottom-right\">\n        <Button intent={intent} icon={<Icon name=\"materialization\" />} disabled>\n          {firstOption.label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Box flex={{alignItems: 'center'}}>\n        <Tooltip content=\"Shift+click to add configuration\" position=\"bottom-right\">\n          <Button\n            intent={intent}\n            onClick={(e) => onClick(firstOption.assetKeys, e)}\n            style={\n              options.length > 1\n                ? {\n                    borderTopRightRadius: 0,\n                    borderBottomRightRadius: 0,\n                    borderRight: `1px solid rgba(255,255,255,0.2)`,\n                  }\n                : {}\n            }\n            disabled={!firstOption.assetKeys.length}\n            icon={loading ? <Spinner purpose=\"body-text\" /> : <Icon name=\"materialization\" />}\n          >\n            {firstOption.label}\n          </Button>\n        </Tooltip>\n        {options.length > 1 && (\n          <Popover\n            isOpen={isOpen}\n            onInteraction={(nextOpen) => setIsOpen(nextOpen)}\n            position=\"bottom-right\"\n            content={\n              <Menu>\n                {options.slice(1).map((option) => (\n                  <MenuItem\n                    key={option.label}\n                    text={option.label}\n                    icon=\"materialization\"\n                    disabled={option.assetKeys.length === 0}\n                    onClick={(e) => onClick(option.assetKeys, e)}\n                  />\n                ))}\n              </Menu>\n            }\n          >\n            <Button\n              role=\"button\"\n              style={{minWidth: 'initial', borderTopLeftRadius: 0, borderBottomLeftRadius: 0}}\n              icon={<Icon name=\"arrow_drop_down\" />}\n              intent={intent}\n            />\n          </Popover>\n        )}\n      </Box>\n      {launchpadElement}\n    </>\n  );\n};\n\nexport const useMaterializationAction = (preferredJobName?: string) => {\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const client = useApolloClient();\n  const confirm = useConfirmation();\n\n  const [state, setState] = React.useState<LaunchAssetsState>({type: 'none'});\n\n  const onClick = async (assetKeys: AssetKey[], e: React.MouseEvent<any>) => {\n    if (state.type === 'loading') {\n      return;\n    }\n    setState({type: 'loading'});\n\n    const result = await client.query<LaunchAssetLoaderQuery, LaunchAssetLoaderQueryVariables>({\n      query: LAUNCH_ASSET_LOADER_QUERY,\n      variables: {assetKeys: assetKeys.map(({path}) => ({path}))},\n    });\n\n    if (result.data.assetNodeDefinitionCollisions.length) {\n      showCustomAlert(buildAssetCollisionsAlert(result.data));\n      setState({type: 'none'});\n      return;\n    }\n\n    const assets = result.data.assetNodes;\n    const forceLaunchpad = e.shiftKey;\n\n    const next = await stateForLaunchingAssets(client, assets, forceLaunchpad, preferredJobName);\n\n    if (next.type === 'error') {\n      showCustomAlert({\n        title: 'Unable to Materialize',\n        body: next.error,\n      });\n      setState({type: 'none'});\n      return;\n    }\n\n    const missing = await upstreamAssetsWithNoMaterializations(client, assets);\n    if (missing.length) {\n      setState({type: 'none'});\n      try {\n        await confirm({\n          title: 'Are you sure?',\n          description: (\n            <>\n              <div>\n                Materializing these assets may fail because the upstream assets listed below have\n                not been materialized yet.\n              </div>\n              <ul>\n                {missing.map((assetKey, idx) => (\n                  <li key={idx}>{displayNameForAssetKey(assetKey)}</li>\n                ))}\n              </ul>\n            </>\n          ),\n        });\n        setState({type: 'loading'});\n      } catch {\n        return;\n      }\n    }\n\n    if (next.type === 'single-run') {\n      await launchWithTelemetry({executionParams: next.executionParams}, 'toast');\n      setState({type: 'none'});\n    } else {\n      setState(next);\n    }\n  };\n\n  const launchpad = () => {\n    if (state.type === 'launchpad') {\n      return (\n        <AssetLaunchpad\n          assetJobName={state.jobName}\n          repoAddress={state.repoAddress}\n          sessionPresets={state.sessionPresets}\n          open={true}\n          setOpen={() => setState({type: 'none'})}\n        />\n      );\n    }\n\n    if (state.type === 'partitions') {\n      return (\n        <LaunchAssetChoosePartitionsDialog\n          assets={state.assets}\n          upstreamAssetKeys={state.upstreamAssetKeys}\n          repoAddress={state.repoAddress}\n          assetJobName={state.jobName}\n          open={true}\n          setOpen={() => setState({type: 'none'})}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return {onClick, loading: state.type === 'loading', launchpadElement: launchpad()};\n};\n\nasync function stateForLaunchingAssets(\n  client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  forceLaunchpad: boolean,\n  preferredJobName?: string,\n): Promise<LaunchAssetsState> {\n  if (assets.some((x) => x.isSource)) {\n    return {\n      type: 'error',\n      error: 'One or more source assets are selected and cannot be materialized.',\n    };\n  }\n\n  const repoAddress = buildRepoAddress(\n    assets[0]?.repository.name || '',\n    assets[0]?.repository.location.name || '',\n  );\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (\n    !assets.every(\n      (a) =>\n        a.repository.name === repoAddress.name &&\n        a.repository.location.name === repoAddress.location,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: `Assets must be in ${repoName} to be materialized together.`,\n    };\n  }\n\n  const partitionDefinition = assets.find((a) => !!a.partitionDefinition)?.partitionDefinition;\n  if (\n    assets.some(\n      (a) =>\n        a.partitionDefinition &&\n        partitionDefinition &&\n        a.partitionDefinition.description !== partitionDefinition.description,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: 'Assets must share a partition definition to be materialized together.',\n    };\n  }\n\n  const jobName = getCommonJob(assets, preferredJobName);\n  if (!jobName) {\n    return {\n      type: 'error',\n      error: 'Assets must be in the same job to be materialized together.',\n    };\n  }\n\n  const resourceResult = await client.query<\n    LaunchAssetLoaderResourceQuery,\n    LaunchAssetLoaderResourceQueryVariables\n  >({\n    query: LAUNCH_ASSET_LOADER_RESOURCE_QUERY,\n    variables: {\n      pipelineName: jobName,\n      repositoryName: assets[0].repository.name,\n      repositoryLocationName: assets[0].repository.location.name,\n    },\n  });\n  const pipeline = resourceResult.data.pipelineOrError;\n  if (pipeline.__typename !== 'Pipeline') {\n    return {type: 'error', error: pipeline.message};\n  }\n  const partitionSets = resourceResult.data.partitionSetsOrError;\n  if (partitionSets.__typename !== 'PartitionSets') {\n    return {type: 'error', error: partitionSets.message};\n  }\n\n  const requiredResourceKeys = assets.flatMap((a) => a.requiredResources.map((r) => r.resourceKey));\n  const resources = pipeline.modes[0].resources.filter((r) =>\n    requiredResourceKeys.includes(r.name),\n  );\n  const anyResourcesHaveRequiredConfig = resources.some((r) => r.configField?.isRequired);\n  const anyAssetsHaveRequiredConfig = assets.some((a) => a.configField?.isRequired);\n\n  // Note: If a partition definition is present and we're launching a user-defined job,\n  // we assume that any required config will be provided by a PartitionedConfig function\n  // attached to the job. Otherwise backfills won't work and you'll know to add one!\n  const assumeConfigPresent = partitionDefinition && !isHiddenAssetGroupJob(jobName);\n\n  const needLaunchpad =\n    !assumeConfigPresent && (anyAssetsHaveRequiredConfig || anyResourcesHaveRequiredConfig);\n\n  if (needLaunchpad || forceLaunchpad) {\n    const assetOpNames = assets.flatMap((a) => a.opNames || []);\n    return {\n      type: 'launchpad',\n      jobName,\n      repoAddress,\n      sessionPresets: {\n        flattenGraphs: true,\n        assetSelection: assets.map((a) => ({assetKey: a.assetKey, opNames: a.opNames})),\n        solidSelectionQuery: assetOpNames.map((name) => `\"${name}\"`).join(', '),\n        base: partitionSets.results.length\n          ? {\n              partitionsSetName: partitionSets.results[0].name,\n              partitionName: null,\n              tags: [],\n            }\n          : undefined,\n      },\n    };\n  }\n  if (partitionDefinition) {\n    const upstreamAssetKeys = getUpstreamAssetKeys(assets);\n    return {\n      type: 'partitions',\n      assets,\n      jobName,\n      repoAddress,\n      upstreamAssetKeys,\n    };\n  }\n  return {\n    type: 'single-run',\n    executionParams: executionParamsForAssetJob(repoAddress, jobName, assets, []),\n  };\n}\n\nexport function getCommonJob(\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  preferredJobName?: string,\n) {\n  const everyAssetHasJob = (jobName: string) => assets.every((a) => a.jobNames.includes(jobName));\n  const jobsInCommon = assets[0] ? assets[0].jobNames.filter(everyAssetHasJob) : [];\n  return jobsInCommon.find((name) => name === preferredJobName) || jobsInCommon[0] || null;\n}\n\nfunction getUpstreamAssetKeys(assets: LaunchAssetExecutionAssetNodeFragment[]) {\n  const assetKeys = new Set(assets.map((a) => JSON.stringify({path: a.assetKey.path})));\n  return uniq(assets.flatMap((a) => a.dependencyKeys.map(({path}) => JSON.stringify({path}))))\n    .filter((key) => !assetKeys.has(key))\n    .map((key) => JSON.parse(key));\n}\n\nasync function upstreamAssetsWithNoMaterializations(\n  client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n) {\n  const upstreamAssetKeys = getUpstreamAssetKeys(assets);\n  if (upstreamAssetKeys.length === 0) {\n    return [];\n  }\n\n  const result = await client.query<\n    LaunchAssetCheckUpstreamQuery,\n    LaunchAssetCheckUpstreamQueryVariables\n  >({\n    query: LAUNCH_ASSET_CHECK_UPSTREAM_QUERY,\n    variables: {assetKeys: upstreamAssetKeys},\n  });\n\n  return result.data.assetNodes\n    .filter((a) => !a.isSource && a.assetMaterializations.length === 0)\n    .map((a) => a.assetKey);\n}\n\nexport function executionParamsForAssetJob(\n  repoAddress: RepoAddress,\n  jobName: string,\n  assets: {assetKey: AssetKey; opNames: string[]}[],\n  tags: {key: string; value: string}[],\n): LaunchPipelineExecutionVariables['executionParams'] {\n  return {\n    mode: 'default',\n    executionMetadata: {\n      tags: [\n        ...tags.map((t) => pick(t, ['key', 'value'])),\n        {\n          key: DagsterTag.StepSelection,\n          value: assets.flatMap((o) => o.opNames).join(','),\n        },\n      ],\n    },\n    runConfigData: '{}',\n    selector: {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n      pipelineName: jobName,\n      assetSelection: assets.map((asset) => ({\n        path: asset.assetKey.path,\n      })),\n    },\n  };\n}\n\nexport function buildAssetCollisionsAlert(data: LaunchAssetLoaderQuery) {\n  return {\n    title: MULTIPLE_DEFINITIONS_WARNING,\n    body: (\n      <div style={{overflow: 'auto'}}>\n        One or more of the selected assets are defined in multiple code locations. Rename these\n        assets to avoid collisions and then try again.\n        <ul>\n          {data.assetNodeDefinitionCollisions.map((collision, idx) => (\n            <li key={idx}>\n              <strong>{displayNameForAssetKey(collision.assetKey)}</strong>\n              <ul>\n                {collision.repositories.map((r, ridx) => (\n                  <li key={ridx}>\n                    {repoAddressAsHumanString({name: r.name, location: r.location.name})}\n                  </li>\n                ))}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ),\n  };\n}\n\nexport const LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT = gql`\n  fragment LaunchAssetExecutionAssetNodeFragment on AssetNode {\n    id\n    opNames\n    jobNames\n    graphName\n    partitionDefinition {\n      description\n    }\n    partitionKeysByDimension {\n      name\n    }\n    isObservable\n    isSource\n    assetKey {\n      path\n    }\n    dependencyKeys {\n      path\n    }\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    requiredResources {\n      resourceKey\n    }\n    ...AssetNodeConfigFragment\n  }\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n`;\n\nexport const LAUNCH_ASSET_LOADER_QUERY = gql`\n  query LaunchAssetLoaderQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys) {\n      id\n      ...LaunchAssetExecutionAssetNodeFragment\n    }\n    assetNodeDefinitionCollisions(assetKeys: $assetKeys) {\n      assetKey {\n        path\n      }\n      repositories {\n        id\n        name\n        location {\n          id\n          name\n        }\n      }\n    }\n  }\n  ${LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT}\n`;\n\nconst LAUNCH_ASSET_LOADER_RESOURCE_QUERY = gql`\n  query LaunchAssetLoaderResourceQuery(\n    $pipelineName: String!\n    $repositoryLocationName: String!\n    $repositoryName: String!\n  ) {\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PythonError {\n        message\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PartitionSets {\n        results {\n          id\n          name\n        }\n      }\n    }\n\n    pipelineOrError(\n      params: {\n        pipelineName: $pipelineName\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PythonError {\n        message\n      }\n      ... on InvalidSubsetError {\n        message\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on Pipeline {\n        id\n        modes {\n          id\n          resources {\n            name\n            description\n            configField {\n              name\n              isRequired\n              configType {\n                ...ConfigTypeSchemaFragment\n                recursiveConfigTypes {\n                  ...ConfigTypeSchemaFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ${CONFIG_TYPE_SCHEMA_FRAGMENT}\n`;\n\nconst LAUNCH_ASSET_CHECK_UPSTREAM_QUERY = gql`\n  query LaunchAssetCheckUpstreamQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys, loadMaterializations: true) {\n      id\n      assetKey {\n        path\n      }\n      isSource\n      opNames\n      graphName\n      assetMaterializations(limit: 1) {\n        runId\n      }\n    }\n  }\n`;\n","import {PartitionState} from '../partitions/PartitionStatus';\n\nimport {\n  PartitionHealthData,\n  PartitionHealthDimension,\n  PartitionHealthDimensionRange,\n} from './usePartitionHealthData';\n\nexport function isTimeseriesDimension(dimension: PartitionHealthDimension) {\n  return isTimeseriesPartition(dimension.partitionKeys[0]);\n}\nexport function isTimeseriesPartition(aPartitionKey = '') {\n  return /\\d{4}-\\d{2}-\\d{2}/.test(aPartitionKey); // cheak trick for now\n}\n\nexport function mergedAssetHealth(\n  assetHealth: PartitionHealthData[],\n): {\n  dimensions: PartitionHealthDimension[];\n  stateForKey: (dimensionKeys: string[]) => PartitionState;\n  stateForPartialKey: (dimensionKeys: string[]) => PartitionState;\n  stateForSingleDimension: (\n    dimensionIdx: number,\n    dimensionKey: string,\n    otherDimensionSelectedKeys?: string[],\n  ) => PartitionState;\n} {\n  if (!assetHealth.length) {\n    return {\n      dimensions: [],\n      stateForKey: () => PartitionState.MISSING,\n      stateForPartialKey: () => PartitionState.MISSING,\n      stateForSingleDimension: () => PartitionState.MISSING,\n    };\n  }\n\n  const dimensions = assetHealth[0].dimensions;\n\n  if (!assetHealth.every((h) => h.dimensions.length === dimensions.length)) {\n    throw new Error('Attempting to show unified asset health for assets with different dimensions');\n  }\n\n  if (\n    !assetHealth.every((h) =>\n      h.dimensions.every(\n        (dim, idx) => dim.partitionKeys.length === dimensions[idx].partitionKeys.length,\n      ),\n    )\n  ) {\n    throw new Error(\n      'Attempting to show unified asset health for assets with dimension of different lengths',\n    );\n  }\n\n  return {\n    dimensions: dimensions.map((dimension) => ({\n      name: dimension.name,\n      partitionKeys: dimension.partitionKeys,\n    })),\n    stateForKey: (dimensionKeys: string[]) =>\n      mergedStates(assetHealth.map((health) => health.stateForKey(dimensionKeys))),\n    stateForPartialKey: (dimensionKeys: string[]) =>\n      mergedStates(assetHealth.map((health) => health.stateForPartialKey(dimensionKeys))),\n    stateForSingleDimension: (\n      dimensionIdx: number,\n      dimensionKey: string,\n      otherDimensionSelectedKeys?: string[],\n    ) =>\n      mergedStates(\n        assetHealth.map((health) =>\n          health.stateForSingleDimension(dimensionIdx, dimensionKey, otherDimensionSelectedKeys),\n        ),\n      ),\n  };\n}\n\nexport function mergedStates(states: PartitionState[]): PartitionState {\n  if (states.includes(PartitionState.MISSING) && states.includes(PartitionState.SUCCESS)) {\n    return PartitionState.SUCCESS_MISSING;\n  } else {\n    return states[0];\n  }\n}\n\nexport function explodePartitionKeysInRanges(\n  ranges: PartitionHealthDimensionRange[],\n  stateForKey: (dimensionKeys: string[]) => PartitionState,\n) {\n  if (ranges.length === 0) {\n    return [];\n  }\n  if (ranges.length === 1) {\n    return ranges[0].selected.map((key) => {\n      return {\n        partitionKey: key,\n        state: stateForKey([key]),\n      };\n    });\n  }\n  if (ranges.length === 2) {\n    const all: {partitionKey: string; state: PartitionState}[] = [];\n    for (const key of ranges[0].selected) {\n      for (const subkey of ranges[1].selected) {\n        all.push({\n          partitionKey: `${key}|${subkey}`,\n          state: stateForKey([key, subkey]),\n        });\n      }\n    }\n    return all;\n  }\n\n  throw new Error('Unsupported >2 partitions defined');\n}\n\nexport const placeholderDimensionRange = (name: string) => ({\n  dimension: {name, partitionKeys: []},\n  selected: [],\n});\n","import {Spinner, Box, Colors, Caption} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {PartitionState, PartitionStatus} from '../partitions/PartitionStatus';\n\nimport {isTimeseriesDimension} from './MultipartitioningSupport';\nimport {AssetKey} from './types';\nimport {PartitionHealthData, PartitionHealthDimensionRange} from './usePartitionHealthData';\n\nexport const PartitionHealthSummary: React.FC<{\n  assetKey: AssetKey;\n  showAssetKey?: boolean;\n  data: PartitionHealthData[];\n  ranges?: PartitionHealthDimensionRange[];\n}> = ({showAssetKey, assetKey, data, ranges}) => {\n  const assetData = data.find((d) => JSON.stringify(d.assetKey) === JSON.stringify(assetKey));\n\n  if (!assetData) {\n    return (\n      <div style={{minHeight: 55, position: 'relative'}}>\n        <Spinner purpose=\"section\" />\n      </div>\n    );\n  }\n\n  const keysForTotals = ranges\n    ? ranges.map((r) => r.selected)\n    : assetData.dimensions.map((d) => d.partitionKeys);\n\n  const total = keysForTotals.reduce((total, d) => d.length * total, 1);\n\n  const success = keysForTotals\n    .reduce(\n      (combinations, d) =>\n        combinations.length\n          ? combinations.flatMap((keys) => d.map((key) => [...keys, key]))\n          : d.map((key) => [key]),\n      [] as string[][],\n    )\n    .filter((dkeys) => assetData.stateForKey(dkeys) === PartitionState.SUCCESS).length;\n\n  return (\n    <Box color={Colors.Gray500}>\n      <Box flex={{justifyContent: 'space-between'}} style={{fontWeight: 600}} margin={{bottom: 4}}>\n        <Caption>{showAssetKey ? displayNameForAssetKey(assetKey) : 'Materialized'}</Caption>\n        <Caption>{`${success.toLocaleString()}/${total.toLocaleString()}`}</Caption>\n      </Box>\n      {assetData.dimensions.map((dimension, dimensionIdx) => (\n        <Box key={dimensionIdx} margin={{bottom: 4}}>\n          {assetData.dimensions.length > 1 && <Caption>{dimension.name}</Caption>}\n          <PartitionStatus\n            small\n            partitionNames={dimension.partitionKeys}\n            splitPartitions={!isTimeseriesDimension(dimension)}\n            selected={ranges ? ranges[dimensionIdx].selected : undefined}\n            partitionStateForKey={(key) =>\n              assetData.stateForSingleDimension(\n                dimensionIdx,\n                key,\n                ranges?.length === 2 ? ranges[1 - dimensionIdx].selected : undefined,\n              )\n            }\n          />\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","import {Colors, Box, BaseTag} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\n\nexport const isAssetMissing = (liveData?: LiveDataForNode) =>\n  liveData && liveData.currentLogicalVersion === null;\n\nexport const isAssetStale = (liveData?: LiveDataForNode) =>\n  liveData &&\n  liveData.currentLogicalVersion !== null &&\n  liveData.currentLogicalVersion !== 'INITIAL' &&\n  liveData.currentLogicalVersion !== liveData.projectedLogicalVersion;\n\nexport const StaleTag: React.FC<{liveData?: LiveDataForNode; onClick?: () => void}> = ({\n  liveData,\n  onClick,\n}) =>\n  isAssetStale(liveData) ? (\n    <Box onClick={onClick}>\n      <BaseTag\n        fillColor={Colors.Yellow50}\n        textColor={Colors.Yellow700}\n        label=\"Stale\"\n        interactive={!!onClick}\n      />\n    </Box>\n  ) : null;\n","import groupBy from 'lodash/groupBy';\nimport React from 'react';\n\nimport {AssetMaterializationFragment} from './types/AssetMaterializationFragment';\nimport {AssetObservationFragment} from './types/AssetObservationFragment';\n\nconst NO_PARTITION_KEY = '__NO_PARTITION__';\n\ntype Event = AssetMaterializationFragment | AssetObservationFragment;\n\nexport type AssetEventGroup = {\n  latest: Event | null;\n  all: Event[];\n  timestamp: string;\n  partition?: string;\n};\n\nconst sortByEventTimestamp = (a: Event, b: Event) => Number(b?.timestamp) - Number(a?.timestamp);\n\n/**\n * A hook that can bucket a list of materializations by partition, if any, with the `latest`\n * materialization separated from predecessor materializations.\n */\nexport const groupByPartition = (\n  events: Event[],\n  definedPartitionKeys: string[],\n): AssetEventGroup[] => {\n  const grouped = groupBy(events, (m) => m.partition || NO_PARTITION_KEY);\n  const orderedPartitionKeys = [...definedPartitionKeys].reverse();\n\n  if (NO_PARTITION_KEY in grouped) {\n    orderedPartitionKeys.push(NO_PARTITION_KEY);\n  }\n\n  return orderedPartitionKeys\n    .filter((key) => key !== NO_PARTITION_KEY)\n    .map((key) => {\n      const sorted = [...(grouped[key] || [])].sort(sortByEventTimestamp);\n      const latestMaterialization = sorted.find((a) => a.__typename === 'MaterializationEvent');\n      const latest = latestMaterialization || sorted[0] || null;\n\n      return {\n        all: sorted,\n        latest,\n        timestamp: latest?.timestamp,\n        partition: key,\n      };\n    });\n};\n\nexport function useGroupedEvents(\n  xAxis: 'partition' | 'time',\n  materializations: Event[],\n  observations: Event[],\n  loadedPartitionKeys: string[] | undefined,\n) {\n  return React.useMemo<AssetEventGroup[]>(() => {\n    const events = [...materializations, ...observations].sort(\n      (b, a) => Number(a.timestamp) - Number(b.timestamp),\n    );\n    if (xAxis === 'partition' && loadedPartitionKeys) {\n      return groupByPartition(events, loadedPartitionKeys);\n    } else {\n      // return a group for every materialization to achieve un-grouped rendering\n      return events.map((event) => ({\n        latest: event,\n        partition: event.partition || undefined,\n        timestamp: event.timestamp,\n        all: [],\n      }));\n    }\n  }, [loadedPartitionKeys, materializations, observations, xAxis]);\n}\n","import React from 'react';\n\nimport {QueryPersistedStateConfig, useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {\n  allPartitionsSpan,\n  partitionsToText,\n  textToPartitions,\n} from '../partitions/SpanRepresentation';\n\nimport {placeholderDimensionRange} from './MultipartitioningSupport';\nimport {PartitionHealthData, PartitionHealthDimensionRange} from './usePartitionHealthData';\n\ntype DimensionQueryState = {\n  name: string;\n  rangeText: string | undefined;\n};\n\nconst serializer: QueryPersistedStateConfig<DimensionQueryState[]> = {\n  defaults: {},\n  encode: (state) => Object.fromEntries(state.map((s) => [`${s.name}_range`, s.rangeText])),\n  decode: (qs) =>\n    Object.entries(qs)\n      .filter(([key]) => key.endsWith('_range'))\n      .map(([key, rangeText]) => ({name: key.replace(/_range$/, ''), rangeText})),\n};\n\n/**\n * This hook behaves like useState and manages the user's selected partition key\n * ranges on each partition dimension.\n *\n * Internally, this hook reads initial state from the query string and (optionally)\n * writes changes back to the query string using the compacted \"spans\" format.\n */\nexport const usePartitionDimensionRanges = (opts: {\n  assetHealth: Pick<PartitionHealthData, 'dimensions'>;\n  modifyQueryString: boolean;\n  knownDimensionNames?: string[]; // improves loading state if available\n}) => {\n  const {assetHealth, knownDimensionNames = [], modifyQueryString} = opts;\n  const [query, setQuery] = useQueryPersistedState<DimensionQueryState[]>(serializer);\n  const [local, setLocal] = React.useState<DimensionQueryState[]>([]);\n\n  const knownDimensionNamesJSON = JSON.stringify(knownDimensionNames);\n  const inflated = React.useMemo((): PartitionHealthDimensionRange[] => {\n    if (!assetHealth) {\n      return JSON.parse(knownDimensionNamesJSON).map(placeholderDimensionRange);\n    }\n    return assetHealth.dimensions.map((dimension) => {\n      const saved =\n        local.find((s) => s.name === dimension.name) ||\n        query.find((s) => s.name === dimension.name);\n\n      // Note: It's valid for the user to clear the range to \"\", so it's\n      // important that we persist \"\" and specifically check for `undefined`\n      // when filling in the default value (all keys)\n      return {\n        dimension,\n        selected:\n          saved?.rangeText !== undefined\n            ? textToPartitions(saved.rangeText, dimension.partitionKeys)\n            : dimension.partitionKeys,\n      };\n    });\n  }, [query, local, assetHealth, knownDimensionNamesJSON]);\n\n  const setInflated = React.useCallback(\n    (ranges: PartitionHealthDimensionRange[]) => {\n      const next = ranges.map((r) => {\n        const rangeText = partitionsToText(r.selected, r.dimension.partitionKeys);\n        return {\n          name: r.dimension.name,\n          rangeText: rangeText !== allPartitionsSpan(r.dimension) ? rangeText : undefined,\n        };\n      });\n      if (modifyQueryString) {\n        setQuery(next);\n      } else {\n        setLocal(next);\n      }\n    },\n    [setQuery, modifyQueryString],\n  );\n\n  return [inflated, setInflated] as const;\n};\n","import {ApolloClient, gql, useApolloClient} from '@apollo/client';\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\n\nimport {PartitionState} from '../partitions/PartitionStatus';\n\nimport {mergedStates} from './MultipartitioningSupport';\nimport {AssetKey} from './types';\nimport {PartitionHealthQuery, PartitionHealthQueryVariables} from './types/PartitionHealthQuery';\n\n/**\n * usePartitionHealthData retrieves partitionKeysByDimension + partitionMaterializationCounts and\n * reshapes the data for rapid retrieval from the UI. The hook exposes a series of getter methods\n * for each asset's data, hiding the underlying data structures from the rest of the app.\n *\n * The hope is that if we want to add support for 3- and 4- dimension partitioned assets, all\n * of the changes will be in this file. The rest of the app already supports N dimensions.\n */\n\nexport interface PartitionHealthData {\n  assetKey: AssetKey;\n  dimensions: PartitionHealthDimension[];\n  stateForKey: (dimensionKeys: string[]) => PartitionState;\n  stateForPartialKey: (dimensionKeys: string[]) => PartitionState;\n  stateForSingleDimension: (\n    dimensionIdx: number,\n    dimensionKey: string,\n    otherDimensionSelectedKeys?: string[],\n  ) => PartitionState;\n}\n\nexport interface PartitionHealthDimension {\n  name: string;\n  partitionKeys: string[];\n}\n\nexport type PartitionHealthDimensionRange = {\n  dimension: PartitionHealthDimension;\n  selected: string[];\n};\n\nasync function loadPartitionHealthData(client: ApolloClient<any>, loadKey: AssetKey) {\n  const {data} = await client.query<PartitionHealthQuery, PartitionHealthQueryVariables>({\n    query: PARTITION_HEALTH_QUERY,\n    fetchPolicy: 'network-only',\n    variables: {\n      assetKey: {path: loadKey.path},\n    },\n  });\n\n  const dimensions =\n    data.assetNodeOrError.__typename === 'AssetNode'\n      ? data.assetNodeOrError.partitionKeysByDimension\n      : [];\n\n  const counts = (data.assetNodeOrError.__typename === 'AssetNode' &&\n    data.assetNodeOrError.partitionMaterializationCounts) || {\n    __typename: 'MaterializationCountSingleDimension',\n    materializationCounts: [],\n  };\n\n  const stateByKey = Object.fromEntries(\n    counts.__typename === 'MaterializationCountSingleDimension'\n      ? counts.materializationCounts.map((count, idx) => [\n          dimensions[0].partitionKeys[idx],\n          count > 0 ? PartitionState.SUCCESS : PartitionState.MISSING,\n        ])\n      : counts.materializationCountsGrouped.map((dim0, idx0) => [\n          dimensions[0].partitionKeys[idx0],\n          Object.fromEntries(\n            dim0.map((count, idx1) => [\n              dimensions[1].partitionKeys[idx1],\n              count > 0 ? PartitionState.SUCCESS : PartitionState.MISSING,\n            ]),\n          ),\n        ]),\n  );\n\n  const stateForKey = (dimensionKeys: string[]): PartitionState =>\n    dimensionKeys.reduce((counts, dimensionKey) => counts[dimensionKey], stateByKey);\n\n  const stateForSingleDimension = (\n    dimensionIdx: number,\n    dimensionKey: string,\n    otherDimensionSelectedKeys?: string[],\n  ) => {\n    if (dimensionIdx === 0 && dimensions.length === 1) {\n      return stateForKey([dimensionKey]);\n    }\n    if (dimensionIdx === 0) {\n      return mergedStates(\n        Object.entries<PartitionState>(stateByKey[dimensionKey])\n          .filter(\n            ([key]) => !otherDimensionSelectedKeys || otherDimensionSelectedKeys.includes(key),\n          )\n          .map(([_, val]) => val),\n      );\n    } else if (dimensionIdx === 1) {\n      return mergedStates(\n        Object.entries<{[subdimensionKey: string]: PartitionState}>(stateByKey)\n          .filter(\n            ([key]) => !otherDimensionSelectedKeys || otherDimensionSelectedKeys.includes(key),\n          )\n          .map(([_, val]) => val[dimensionKey]),\n      );\n    } else {\n      throw new Error('stateForSingleDimension asked for third dimension');\n    }\n  };\n\n  const stateForPartialKey = (dimensionKeys: string[]) => {\n    return dimensionKeys.length === dimensions.length\n      ? stateForKey(dimensionKeys)\n      : mergedStates(Object.values(stateByKey[dimensionKeys[0]]));\n  };\n\n  const result: PartitionHealthData = {\n    assetKey: loadKey,\n    stateForKey,\n    stateForPartialKey,\n    stateForSingleDimension,\n    dimensions: dimensions.map((d) => ({\n      name: d.name,\n      partitionKeys: d.partitionKeys,\n    })),\n  };\n\n  return result;\n}\n\n// Note: assetLastMaterializedAt is used as a \"hint\" - if the input value changes, it's\n// a sign that we should invalidate and reload previously loaded health stats. We don't\n// clear them immediately to avoid an empty state.\n//\nexport function usePartitionHealthData(assetKeys: AssetKey[], assetLastMaterializedAt = '') {\n  const [result, setResult] = React.useState<(PartitionHealthData & {fetchedAt: string})[]>([]);\n  const client = useApolloClient();\n\n  const assetKeyJSONs = assetKeys.map((k) => JSON.stringify(k));\n  const assetKeyJSON = JSON.stringify(assetKeyJSONs);\n  const missingKeyJSON = assetKeyJSONs.find(\n    (k) =>\n      !result.some(\n        (r) => JSON.stringify(r.assetKey) === k && r.fetchedAt === assetLastMaterializedAt,\n      ),\n  );\n\n  React.useMemo(() => {\n    if (!missingKeyJSON) {\n      return;\n    }\n    const loadKey: AssetKey = JSON.parse(missingKeyJSON);\n    const run = async () => {\n      const loaded = await loadPartitionHealthData(client, loadKey);\n      setResult((result) => [\n        ...result.filter((r) => !isEqual(r.assetKey, loadKey)),\n        {...loaded, fetchedAt: assetLastMaterializedAt},\n      ]);\n    };\n    run();\n  }, [client, missingKeyJSON, assetLastMaterializedAt]);\n\n  return React.useMemo(() => {\n    const assetKeyJSONs = JSON.parse(assetKeyJSON);\n    return result.filter((r) => assetKeyJSONs.includes(JSON.stringify(r.assetKey)));\n  }, [assetKeyJSON, result]);\n}\n\nconst PARTITION_HEALTH_QUERY = gql`\n  query PartitionHealthQuery($assetKey: AssetKeyInput!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      ... on AssetNode {\n        id\n        partitionKeysByDimension {\n          name\n          partitionKeys\n        }\n        partitionMaterializationCounts {\n          ... on MaterializationCountGroupedByDimension {\n            materializationCountsGrouped\n          }\n          ... on MaterializationCountSingleDimension {\n            materializationCounts\n          }\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  AssetJobPartitionSetsQuery,\n  AssetJobPartitionSetsQueryVariables,\n} from './types/AssetJobPartitionSetsQuery';\n\nexport function usePartitionNameForPipeline(repoAddress: RepoAddress, pipelineName: string) {\n  const {data: partitionSetsData} = useQuery<\n    AssetJobPartitionSetsQuery,\n    AssetJobPartitionSetsQueryVariables\n  >(ASSET_JOB_PARTITION_SETS_QUERY, {\n    variables: {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n      pipelineName,\n    },\n  });\n\n  return React.useMemo(\n    () => ({\n      partitionSet:\n        partitionSetsData?.partitionSetsOrError.__typename === 'PartitionSets'\n          ? partitionSetsData.partitionSetsOrError.results[0]\n          : undefined,\n      partitionSetError:\n        partitionSetsData?.partitionSetsOrError.__typename === 'PipelineNotFoundError' ||\n        partitionSetsData?.partitionSetsOrError.__typename === 'PythonError'\n          ? partitionSetsData.partitionSetsOrError\n          : undefined,\n    }),\n    [partitionSetsData],\n  );\n}\n\nconst ASSET_JOB_PARTITION_SETS_QUERY = gql`\n  query AssetJobPartitionSetsQuery(\n    $pipelineName: String!\n    $repositoryName: String!\n    $repositoryLocationName: String!\n  ) {\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      __typename\n      ...PythonErrorFragment\n      ... on PipelineNotFoundError {\n        __typename\n        message\n      }\n      ... on PartitionSets {\n        __typename\n        results {\n          id\n          name\n          mode\n          solidSelection\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\n\nimport {ASSET_LINEAGE_FRAGMENT} from './AssetLineageElements';\nimport {AssetViewParams} from './AssetView';\nimport {AssetKey} from './types';\nimport {AssetEventsQuery, AssetEventsQueryVariables} from './types/AssetEventsQuery';\n\n/**\n * If the asset has a defined partition space, we load all materializations in the\n * last 100 partitions. This ensures that if you run a huge backfill of old partitions,\n * you still see accurate info for the last 100 partitions in the UI. A count-based\n * limit could cause random partitions to disappear if materializations were out of order.\n */\nexport function useRecentAssetEvents(\n  assetKey: AssetKey,\n  params: AssetViewParams,\n  {assetHasDefinedPartitions}: {assetHasDefinedPartitions: boolean},\n) {\n  // The params behavior on this page is a bit nuanced - there are two main query\n  // params: ?timestamp= and ?partition= and only one is set at a time. They can\n  // be undefined, an empty string or a value and all three states are used.\n  //\n  // - If both are undefined, we expand the first item in the table by default\n  // - If one is present, it determines which xAxis is used (partition grouping)\n  // - If one is present and set to a value, that item in the table is expanded.\n  // - If one is present but an empty string, no items in the table is expanded.\n\n  const before = params.asOf ? `${Number(params.asOf) + 1}` : undefined;\n  const xAxisDefault = assetHasDefinedPartitions ? 'partition' : 'time';\n  const xAxis: 'partition' | 'time' =\n    params.partition !== undefined\n      ? 'partition'\n      : params.time !== undefined || before\n      ? 'time'\n      : xAxisDefault;\n\n  const loadUsingPartitionKeys = assetHasDefinedPartitions && xAxis === 'partition';\n\n  const {data, loading, refetch} = useQuery<AssetEventsQuery, AssetEventsQueryVariables>(\n    ASSET_EVENTS_QUERY,\n    {\n      variables: loadUsingPartitionKeys\n        ? {\n            assetKey: {path: assetKey.path},\n            before,\n            partitionInLast: 120,\n          }\n        : {\n            assetKey: {path: assetKey.path},\n            before,\n            limit: 100,\n          },\n    },\n  );\n\n  return React.useMemo(() => {\n    const asset = data?.assetOrError.__typename === 'Asset' ? data?.assetOrError : null;\n    const materializations = asset?.assetMaterializations || [];\n    const observations = asset?.assetObservations || [];\n\n    const allPartitionKeys = asset?.definition?.partitionKeys;\n    const loadedPartitionKeys =\n      loadUsingPartitionKeys && allPartitionKeys\n        ? allPartitionKeys.slice(allPartitionKeys.length - 120)\n        : undefined;\n\n    return {\n      asset,\n      loadedPartitionKeys,\n      materializations,\n      observations,\n      loading,\n      refetch,\n      xAxis,\n    };\n  }, [data, loading, refetch, loadUsingPartitionKeys, xAxis]);\n}\n\nexport const ASSET_MATERIALIZATION_FRAGMENT = gql`\n  fragment AssetMaterializationFragment on MaterializationEvent {\n    partition\n    runOrError {\n      ... on PipelineRun {\n        id\n        runId\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    assetLineage {\n      ...AssetLineageFragment\n    }\n  }\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_LINEAGE_FRAGMENT}\n`;\n\nexport const ASSET_OBSERVATION_FRAGMENT = gql`\n  fragment AssetObservationFragment on ObservationEvent {\n    partition\n    runOrError {\n      ... on PipelineRun {\n        id\n        runId\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n  }\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n\nconst ASSET_EVENTS_QUERY = gql`\n  query AssetEventsQuery(\n    $assetKey: AssetKeyInput!\n    $limit: Int\n    $before: String\n    $partitionInLast: Int\n  ) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        key {\n          path\n        }\n        assetObservations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetObservationFragment\n        }\n        assetMaterializations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetMaterializationFragment\n        }\n\n        definition {\n          id\n          partitionKeys\n        }\n      }\n    }\n  }\n  ${ASSET_OBSERVATION_FRAGMENT}\n  ${ASSET_MATERIALIZATION_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {HTMLInputProps, InputGroupProps2, Intent} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  Colors,\n  Icon,\n  IconWrapper,\n  MenuDivider,\n  MenuItem,\n  Menu,\n  Select,\n  Spinner,\n  Suggest,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {RepositorySelector} from '../types/globalTypes';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ConfigEditorGeneratorPartitionSetsFragment_results} from './types/ConfigEditorGeneratorPartitionSetsFragment';\nimport {\n  ConfigEditorGeneratorPipelineFragment,\n  ConfigEditorGeneratorPipelineFragment_presets,\n} from './types/ConfigEditorGeneratorPipelineFragment';\nimport {\n  ConfigPartitionsQuery,\n  ConfigPartitionsQueryVariables,\n  ConfigPartitionsQuery_partitionSetOrError_PartitionSet_partitionsOrError_Partitions_results,\n} from './types/ConfigPartitionsQuery';\n\ntype Pipeline = ConfigEditorGeneratorPipelineFragment;\ntype Preset = ConfigEditorGeneratorPipelineFragment_presets;\ntype PartitionSet = ConfigEditorGeneratorPartitionSetsFragment_results;\ntype Partition = ConfigPartitionsQuery_partitionSetOrError_PartitionSet_partitionsOrError_Partitions_results;\ntype ConfigGenerator = Preset | PartitionSet;\n\ninterface ConfigEditorConfigPickerProps {\n  base: IExecutionSession['base'];\n  pipeline: Pipeline;\n  pipelineMode?: string;\n  partitionSets: PartitionSet[];\n  onSaveSession: (updates: Partial<IExecutionSession>) => void;\n  onSelectPreset: (preset: Preset) => Promise<void>;\n  onSelectPartition: (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n  ) => Promise<void>;\n  repoAddress: RepoAddress;\n}\n\nexport const ConfigEditorConfigPicker: React.FC<ConfigEditorConfigPickerProps> = (props) => {\n  const {\n    pipeline,\n    base,\n    onSaveSession,\n    onSelectPreset,\n    onSelectPartition,\n    partitionSets,\n    repoAddress,\n  } = props;\n\n  const {isJob, presets} = pipeline;\n\n  const configGenerators: ConfigGenerator[] = React.useMemo(() => {\n    const byName = (a: {name: string}, b: {name: string}) => a.name.localeCompare(b.name);\n    return [...presets, ...partitionSets].sort(byName);\n  }, [presets, partitionSets]);\n\n  const label = () => {\n    if (!base) {\n      if (presets.length && !partitionSets.length) {\n        return 'Preset';\n      }\n      if (!presets.length && partitionSets.length) {\n        return 'Partition Set';\n      }\n      return 'Preset / Partition Set';\n    }\n\n    if ('presetName' in base) {\n      return `Preset: ${base.presetName}`;\n    }\n\n    return `Partition Set: ${base.partitionsSetName}`;\n  };\n\n  const onSelect = (item: ConfigGenerator) => {\n    if (item.__typename === 'PartitionSet') {\n      onSaveSession({\n        mode: item.mode,\n        base: {\n          partitionsSetName: item.name,\n          partitionName: null,\n          tags: base ? base.tags : null,\n        },\n      });\n    } else {\n      onSelectPreset(item);\n    }\n  };\n\n  return (\n    <PickerContainer>\n      {isJob || configGenerators.length < 1 ? null : (\n        <ConfigEditorConfigGeneratorPicker\n          label={label()}\n          configGenerators={configGenerators}\n          onSelect={onSelect}\n        />\n      )}\n      {base && 'partitionsSetName' in base ? (\n        <ConfigEditorPartitionPicker\n          pipeline={pipeline}\n          partitionSetName={base.partitionsSetName}\n          value={base.partitionName}\n          onSelect={onSelectPartition}\n          repoAddress={repoAddress}\n        />\n      ) : null}\n    </PickerContainer>\n  );\n};\n\ninterface ConfigEditorPartitionPickerProps {\n  pipeline: Pipeline;\n  partitionSetName: string;\n  value: string | null;\n  onSelect: (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n  ) => void;\n  repoAddress: RepoAddress;\n}\n\nconst SORT_ORDER_KEY_BASE = 'dagit.partition-sort-order';\ntype SortOrder = 'asc' | 'desc';\n\nconst ConfigEditorPartitionPicker: React.FC<ConfigEditorPartitionPickerProps> = React.memo(\n  (props) => {\n    const {partitionSetName, value, onSelect, repoAddress} = props;\n    const {basePath} = React.useContext(AppContext);\n    const repositorySelector = repoAddressToSelector(repoAddress);\n    const {data, loading} = useQuery<ConfigPartitionsQuery, ConfigPartitionsQueryVariables>(\n      CONFIG_PARTITIONS_QUERY,\n      {\n        variables: {repositorySelector, partitionSetName},\n        fetchPolicy: 'network-only',\n      },\n    );\n\n    const sortOrderKey = `${SORT_ORDER_KEY_BASE}-${basePath}-${repoAddressAsHumanString(\n      repoAddress,\n    )}-${partitionSetName}`;\n\n    const [sortOrder, setSortOrder] = useStateWithStorage<SortOrder>(sortOrderKey, (value: any) =>\n      value === undefined ? 'asc' : value,\n    );\n\n    const partitions: Partition[] = React.useMemo(() => {\n      const retrieved =\n        data?.partitionSetOrError.__typename === 'PartitionSet' &&\n        data?.partitionSetOrError.partitionsOrError.__typename === 'Partitions'\n          ? data.partitionSetOrError.partitionsOrError.results\n          : [];\n      return sortOrder === 'asc' ? retrieved : [...retrieved].reverse();\n    }, [data, sortOrder]);\n\n    const error: PythonErrorFragment | null =\n      data?.partitionSetOrError.__typename === 'PartitionSet' &&\n      data?.partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ? data.partitionSetOrError.partitionsOrError\n        : null;\n\n    const selected = partitions.find((p) => p.name === value);\n\n    const onClickSort = React.useCallback(\n      (event) => {\n        event.preventDefault();\n        setSortOrder((order) => (order === 'asc' ? 'desc' : 'asc'));\n      },\n      [setSortOrder],\n    );\n\n    const rightElement = partitions.length ? (\n      <SortButton onMouseDown={onClickSort}>\n        <Icon name=\"sort_by_alpha\" color={Colors.Gray400} />\n      </SortButton>\n    ) : undefined;\n\n    const inputProps: InputGroupProps2 & HTMLInputProps = {\n      placeholder: 'Partition',\n      style: {width: 180},\n      intent: (loading ? !!value : !!selected) ? Intent.NONE : Intent.DANGER,\n      rightElement,\n    };\n\n    // If we are loading the partitions and do NOT have any cached data to display,\n    // show the component in a loading state with a spinner and fill it with the\n    // current partition's name so it doesn't flicker (if one is set already.)\n    if (loading && partitions.length === 0) {\n      return (\n        <Suggest<string>\n          key=\"loading\"\n          inputProps={{\n            ...inputProps,\n            rightElement: !value ? (\n              <Box\n                flex={{direction: 'column', justifyContent: 'center'}}\n                padding={{right: 4}}\n                style={{height: '30px'}}\n              >\n                <Spinner purpose=\"body-text\" />\n              </Box>\n            ) : undefined,\n          }}\n          items={[]}\n          itemRenderer={() => null}\n          noResults={<MenuItem disabled={true} text=\"Loading...\" />}\n          inputValueRenderer={(str) => str}\n          selectedItem={value}\n          onItemSelect={() => {}}\n        />\n      );\n    }\n\n    if (error) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={error} />,\n      });\n    }\n\n    // Note: We don't want this Suggest to be a fully \"controlled\" React component.\n    // Keeping it's state is annoyign and we only want to update our data model on\n    // selection change. However, we need to set an initial value (defaultSelectedItem)\n    // and ensure it is re-applied to the internal state when it changes (via `key` below).\n    return (\n      <Suggest<Partition>\n        key={selected ? selected.name : 'none'}\n        defaultSelectedItem={selected}\n        items={partitions}\n        inputProps={inputProps}\n        inputValueRenderer={(partition) => partition.name}\n        itemPredicate={(query, partition) => query.length === 0 || partition.name.includes(query)}\n        itemRenderer={(partition, props) => (\n          <MenuItem\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={partition.name}\n            text={partition.name}\n          />\n        )}\n        noResults={<MenuItem disabled={true} text=\"No presets.\" />}\n        onItemSelect={(item) => {\n          onSelect(repositorySelector, partitionSetName, item.name);\n        }}\n      />\n    );\n  },\n);\n\ninterface ConfigEditorConfigGeneratorPickerProps {\n  label: string;\n  configGenerators: ConfigGenerator[];\n  onSelect: (configGenerator: ConfigGenerator) => void;\n}\n\nconst ConfigEditorConfigGeneratorPicker: React.FC<ConfigEditorConfigGeneratorPickerProps> = React.memo(\n  (props) => {\n    const {configGenerators, label, onSelect} = props;\n    const button = React.useRef<HTMLButtonElement>(null);\n\n    return (\n      <div>\n        <ShortcutHandler\n          shortcutLabel=\"⌥E\"\n          shortcutFilter={(e) => e.code === 'KeyE' && e.altKey}\n          onShortcut={() => button.current?.click()}\n        >\n          <Select<ConfigGenerator>\n            items={configGenerators}\n            itemPredicate={(query, configGenerator) =>\n              query.length === 0 || configGenerator.name.includes(query)\n            }\n            itemListRenderer={({itemsParentRef, renderItem, filteredItems}) => {\n              const renderedPresetItems = filteredItems\n                .filter((item) => item.__typename === 'PipelinePreset')\n                .map(renderItem)\n                .filter(Boolean);\n\n              const renderedPartitionSetItems = filteredItems\n                .filter((item) => item.__typename === 'PartitionSet')\n                .map(renderItem)\n                .filter(Boolean);\n\n              const bothTypesPresent =\n                renderedPresetItems.length > 0 && renderedPartitionSetItems.length > 0;\n\n              return (\n                <Menu ulRef={itemsParentRef}>\n                  {bothTypesPresent && <MenuItem disabled={true} text=\"Presets\" />}\n                  {renderedPresetItems}\n                  {bothTypesPresent && <MenuDivider />}\n                  {bothTypesPresent && <MenuItem disabled={true} text=\"Partition Sets\" />}\n                  {renderedPartitionSetItems}\n                </Menu>\n              );\n            }}\n            itemRenderer={(item, props) => (\n              <MenuItem\n                active={props.modifiers.active}\n                onClick={props.handleClick}\n                key={item.name}\n                text={\n                  <div>\n                    {item.name}\n                    <div style={{opacity: 0.4, fontSize: '0.75rem'}}>\n                      {[\n                        item.solidSelection\n                          ? item.solidSelection.length === 1\n                            ? `Ops: ${item.solidSelection[0]}`\n                            : `Ops: ${item.solidSelection.length}`\n                          : `Ops: All`,\n                        `Mode: ${item.mode}`,\n                      ].join(' - ')}\n                    </div>\n                  </div>\n                }\n              />\n            )}\n            noResults={<MenuItem disabled={true} text=\"No presets.\" />}\n            onItemSelect={onSelect}\n          >\n            <Button\n              ref={button}\n              data-test-id=\"preset-selector-button\"\n              rightIcon={<Icon name=\"expand_more\" />}\n            >\n              {label}\n            </Button>\n          </Select>\n        </ShortcutHandler>\n      </div>\n    );\n  },\n);\n\nconst SortButton = styled.button`\n  border: 0;\n  cursor: pointer;\n  padding: 4px;\n  margin: 3px 3px 0 0;\n  background-color: ${Colors.White};\n  border-radius: 4px;\n  transition: background-color 100ms;\n\n  :hover,\n  :focus {\n    background-color: ${Colors.Gray100};\n    outline: none;\n\n    ${IconWrapper} {\n      background-color: ${Colors.Gray700};\n    }\n  }\n`;\n\nconst PickerContainer = styled.div`\n  display: flex;\n  justify: space-between;\n  align-items: center;\n  gap: 6px;\n`;\n\nexport const CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT = gql`\n  fragment ConfigEditorGeneratorPipelineFragment on Pipeline {\n    id\n    isJob\n    name\n    presets {\n      __typename\n      name\n      mode\n      solidSelection\n      runConfigYaml\n      tags {\n        key\n        value\n      }\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT = gql`\n  fragment ConfigEditorGeneratorPartitionSetsFragment on PartitionSets {\n    results {\n      id\n      name\n      mode\n      solidSelection\n    }\n  }\n`;\n\nconst CONFIG_PARTITIONS_QUERY = gql`\n  query ConfigPartitionsQuery(\n    $repositorySelector: RepositorySelector!\n    $partitionSetName: String!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      __typename\n      ... on PartitionSet {\n        id\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              name\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const CONFIG_PARTITION_SELECTION_QUERY = gql`\n  query ConfigPartitionSelectionQuery(\n    $repositorySelector: RepositorySelector!\n    $partitionSetName: String!\n    $partitionName: String!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      __typename\n      ... on PartitionSet {\n        id\n        partition(partitionName: $partitionName) {\n          name\n          solidSelection\n          runConfigOrError {\n            ... on PartitionRunConfig {\n              yaml\n            }\n            ...PythonErrorFragment\n          }\n          mode\n          tagsOrError {\n            ... on PartitionTags {\n              results {\n                key\n                value\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\n\nimport {IconName} from '../../../ui/src';\nimport {usePermissions} from '../app/Permissions';\nimport {LaunchBehavior} from '../runs/RunUtils';\nimport {LaunchPipelineExecutionVariables} from '../runs/types/LaunchPipelineExecution';\n\nimport {LaunchButton} from './LaunchButton';\nimport {useLaunchPadHooks} from './LaunchpadHooksContext';\n\ninterface LaunchRootExecutionButtonProps {\n  disabled: boolean;\n  warning?: React.ReactNode;\n  getVariables: () => undefined | LaunchPipelineExecutionVariables;\n  behavior: LaunchBehavior;\n  pipelineName: string;\n  title?: string;\n  icon?: IconName;\n}\n\nexport const LaunchRootExecutionButton: React.FC<LaunchRootExecutionButtonProps> = (props) => {\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n  const {canLaunchPipelineExecution} = usePermissions();\n\n  const onLaunch = async () => {\n    const variables = props.getVariables();\n    if (variables == null) {\n      return;\n    }\n    await launchWithTelemetry(variables, props.behavior);\n  };\n\n  return (\n    <LaunchButton\n      runCount={1}\n      config={{\n        onClick: onLaunch,\n        icon: props.icon || 'open_in_new',\n        title: props.title || 'Launch Run',\n        warning: props.warning || undefined,\n        disabled: props.disabled || !canLaunchPipelineExecution.enabled,\n        tooltip: !canLaunchPipelineExecution.enabled\n          ? canLaunchPipelineExecution.disabledReason\n          : undefined,\n      }}\n    />\n  );\n};\n","import {useMutation} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {usePermissions} from '../app/Permissions';\nimport {TelemetryAction, useTelemetryAction} from '../app/Telemetry';\nimport {\n  LAUNCH_PIPELINE_EXECUTION_MUTATION,\n  handleLaunchResult,\n  LaunchBehavior,\n} from '../runs/RunUtils';\nimport {\n  LaunchPipelineExecution,\n  LaunchPipelineExecutionVariables,\n} from '../runs/types/LaunchPipelineExecution';\n\nimport {showLaunchError} from './showLaunchError';\n\nexport function useLaunchWithTelemetry() {\n  const {canLaunchPipelineExecution} = usePermissions();\n  const [launchPipelineExecution] = useMutation<\n    LaunchPipelineExecution,\n    LaunchPipelineExecutionVariables\n  >(LAUNCH_PIPELINE_EXECUTION_MUTATION);\n  const logTelemetry = useTelemetryAction();\n  const history = useHistory();\n\n  return React.useCallback(\n    async (variables: LaunchPipelineExecutionVariables, behavior: LaunchBehavior) => {\n      const jobName =\n        variables.executionParams.selector.jobName ||\n        variables.executionParams.selector.pipelineName;\n\n      if (!canLaunchPipelineExecution.enabled || !jobName) {\n        return;\n      }\n      const metadata: {[key: string]: string | null | undefined} = {\n        jobName,\n        opSelection: variables.executionParams.selector.solidSelection ? 'provided' : undefined,\n      };\n\n      const result = await launchPipelineExecution({variables});\n      logTelemetry(TelemetryAction.LAUNCH_RUN, metadata);\n      try {\n        handleLaunchResult(jobName, result.data?.launchPipelineExecution, history, {behavior});\n      } catch (error) {\n        showLaunchError(error as Error);\n      }\n\n      return result.data?.launchPipelineExecution;\n    },\n    [canLaunchPipelineExecution, history, launchPipelineExecution, logTelemetry],\n  );\n}\n","import React from 'react';\n\nimport {LaunchRootExecutionButton} from './LaunchRootExecutionButton';\nimport {useLaunchWithTelemetry} from './useLaunchWithTelemetry';\n\ntype LaunchpadHooksContextValue = {\n  LaunchRootExecutionButton?: typeof LaunchRootExecutionButton;\n  useLaunchWithTelemetry?: typeof useLaunchWithTelemetry;\n};\n\nexport const LaunchpadHooksContext = React.createContext<LaunchpadHooksContextValue>({\n  LaunchRootExecutionButton: undefined,\n  useLaunchWithTelemetry: undefined,\n});\n\nexport function useLaunchPadHooks() {\n  const {LaunchRootExecutionButton: overrideLaunchRootExecutionButton} = React.useContext(\n    LaunchpadHooksContext,\n  );\n\n  const {useLaunchWithTelemetry: overrideUseLaunchWithTelemetry} = React.useContext(\n    LaunchpadHooksContext,\n  );\n\n  return {\n    LaunchRootExecutionButton: overrideLaunchRootExecutionButton ?? LaunchRootExecutionButton,\n    useLaunchWithTelemetry: overrideUseLaunchWithTelemetry ?? useLaunchWithTelemetry,\n  };\n}\n","import * as React from 'react';\nimport {createGlobalStyle} from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {ConfigEditor, ConfigSchema} from './ConfigEditor';\nimport {Spinner} from './Spinner';\nimport {SplitPanelContainer} from './SplitPanelContainer';\nimport {ConfigEditorHelp} from './configeditor/ConfigEditorHelp';\nimport {isHelpContextEqual} from './configeditor/isHelpContextEqual';\nimport {ConfigEditorHelpContext} from './configeditor/types/ConfigEditorHelpContext';\n\ninterface Props {\n  onConfigChange: (config: string) => void;\n  config?: string;\n  configSchema?: ConfigSchema | null;\n  isLoading: boolean;\n  identifier: string;\n}\n\n// Force code editor hints to appear above the dialog modal\nexport const CodeMirrorInDialogStyle = createGlobalStyle`\n  .CodeMirror-hints,\n  .CodeMirror-hints.dagit {\n    z-index: 100;\n  }\n`;\n\nexport const ConfigEditorWithSchema: React.FC<Props> = ({\n  isLoading,\n  identifier,\n  config,\n  onConfigChange,\n  configSchema,\n}) => {\n  const editorSplitPanelContainer = React.useRef<SplitPanelContainer | null>(null);\n  const [editorHelpContext, setEditorHelpContext] = React.useState<ConfigEditorHelpContext | null>(\n    null,\n  );\n  const editor = React.useRef<ConfigEditor | null>(null);\n\n  return (\n    <>\n      <CodeMirrorInDialogStyle />\n      <SplitPanelContainer\n        ref={editorSplitPanelContainer}\n        axis=\"horizontal\"\n        identifier={identifier}\n        firstMinSize={100}\n        firstInitialPercent={70}\n        first={\n          !isLoading ? (\n            <ConfigEditor\n              ref={editor}\n              configCode={config!}\n              onConfigChange={onConfigChange}\n              onHelpContextChange={(next) => {\n                if (next && !isHelpContextEqual(editorHelpContext, next)) {\n                  setEditorHelpContext(next);\n                }\n              }}\n              readOnly={false}\n              checkConfig={async (_j) => {\n                return {isValid: true};\n              }}\n              configSchema={configSchema}\n            />\n          ) : (\n            <Box style={{height: '100%'}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n              <Spinner purpose=\"section\" />\n            </Box>\n          )\n        }\n        second={\n          <Box style={{height: 500}}>\n            <ConfigEditorHelp\n              context={editorHelpContext}\n              allInnerTypes={configSchema?.allConfigTypes || []}\n            />\n          </Box>\n        }\n      />\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {\n  createSingleSession,\n  IExecutionSession,\n  IExecutionSessionChanges,\n  useInitialDataForMode,\n} from '../app/ExecutionSessionStorage';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LaunchpadType} from './LaunchpadRoot';\nimport LaunchpadSession from './LaunchpadSession';\nimport {LaunchpadSessionPartitionSetsFragment} from './types/LaunchpadSessionPartitionSetsFragment';\nimport {LaunchpadSessionPipelineFragment} from './types/LaunchpadSessionPipelineFragment';\n\ninterface Props {\n  launchpadType: LaunchpadType;\n  pipeline: LaunchpadSessionPipelineFragment;\n  partitionSets: LaunchpadSessionPartitionSetsFragment;\n  repoAddress: RepoAddress;\n  sessionPresets: Partial<IExecutionSession>;\n}\n\nexport const LaunchpadTransientSessionContainer = (props: Props) => {\n  const {launchpadType, pipeline, partitionSets, repoAddress, sessionPresets} = props;\n\n  const initialData = useInitialDataForMode(pipeline, partitionSets);\n  const initialSessionComplete = createSingleSession({\n    ...sessionPresets,\n    runConfigYaml: initialData.runConfigYaml,\n  });\n\n  const [session, setSession] = React.useState<IExecutionSession>(initialSessionComplete);\n\n  const onSaveSession = (changes: IExecutionSessionChanges) => {\n    const newSession = {...session, ...changes};\n    setSession(newSession);\n  };\n\n  return (\n    <LaunchpadSession\n      launchpadType={launchpadType}\n      session={session}\n      onSave={onSaveSession}\n      pipeline={pipeline}\n      partitionSets={partitionSets}\n      repoAddress={repoAddress}\n    />\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {CodeMirrorInDialogStyle, Dialog, DialogHeader} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {usePermissions} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useTrackPageView} from '../app/analytics';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT,\n  CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT,\n} from './ConfigEditorConfigPicker';\nimport {LaunchpadSessionError} from './LaunchpadSessionError';\nimport {LaunchpadSessionLoading} from './LaunchpadSessionLoading';\nimport {LaunchpadTransientSessionContainer} from './LaunchpadTransientSessionContainer';\nimport {LaunchpadRootQuery, LaunchpadRootQueryVariables} from './types/LaunchpadRootQuery';\n\nconst LaunchpadStoredSessionsContainer = React.lazy(\n  () => import('./LaunchpadStoredSessionsContainer'),\n);\n\nexport type LaunchpadType = 'asset' | 'job';\n\n// ########################\n// ##### LAUNCHPAD ROOTS\n// ########################\n\nexport const AssetLaunchpad: React.FC<{\n  repoAddress: RepoAddress;\n  sessionPresets?: Partial<IExecutionSession>;\n  assetJobName: string;\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}> = ({repoAddress, sessionPresets, assetJobName, open, setOpen}) => {\n  const title = 'Launchpad (configure assets)';\n\n  return (\n    <Dialog\n      style={{height: '90vh', width: '80%'}}\n      isOpen={open}\n      canEscapeKeyClose={true}\n      canOutsideClickClose={true}\n      onClose={() => setOpen(false)}\n    >\n      <DialogHeader icon=\"layers\" label={title} />\n      <CodeMirrorInDialogStyle />\n      <LaunchpadAllowedRoot\n        launchpadType=\"asset\"\n        pipelinePath={assetJobName}\n        repoAddress={repoAddress}\n        sessionPresets={sessionPresets}\n      />\n    </Dialog>\n  );\n};\n\nexport const JobLaunchpad: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {pipelinePath, repoPath} = useParams<{repoPath: string; pipelinePath: string}>();\n  const {canLaunchPipelineExecution} = usePermissions();\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n\n  return (\n    <LaunchpadAllowedRoot\n      launchpadType=\"job\"\n      pipelinePath={pipelinePath}\n      repoAddress={repoAddress}\n    />\n  );\n};\n\n// ########################\n// ##### LAUNCHPAD ALLOWED ROOT\n// ########################\n\ninterface Props {\n  launchpadType: LaunchpadType;\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n  sessionPresets?: Partial<IExecutionSession>;\n}\n\nconst LaunchpadAllowedRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {pipelinePath, repoAddress, launchpadType, sessionPresets} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath(props);\n\n  const {name: repositoryName, location: repositoryLocationName} = repoAddress;\n\n  const result = useQuery<LaunchpadRootQuery, LaunchpadRootQueryVariables>(\n    PIPELINE_EXECUTION_ROOT_QUERY,\n    {\n      variables: {repositoryName, repositoryLocationName, pipelineName},\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n    },\n  );\n\n  const pipelineOrError = result?.data?.pipelineOrError;\n  const partitionSetsOrError = result?.data?.partitionSetsOrError;\n\n  if (!pipelineOrError || !partitionSetsOrError) {\n    return <LaunchpadSessionLoading />;\n  }\n\n  if (\n    partitionSetsOrError.__typename === 'PipelineNotFoundError' ||\n    pipelineOrError.__typename === 'PipelineNotFoundError'\n  ) {\n    const message =\n      pipelineOrError.__typename === 'PipelineNotFoundError'\n        ? pipelineOrError.message\n        : 'No data returned from GraphQL';\n\n    return pipelineName !== '' ? (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title={isJob ? 'Job not found' : 'Pipeline not found'}\n        description={message}\n      />\n    ) : (\n      <LaunchpadSessionError\n        icon=\"no-results\"\n        title={isJob ? 'Select a job' : 'Select a pipeline'}\n        description={message}\n      />\n    );\n  }\n\n  if (pipelineOrError.__typename === 'InvalidSubsetError') {\n    throw new Error(`Should never happen because we do not request a subset`);\n  }\n\n  if (pipelineOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"Python Error\"\n        description={pipelineOrError.message}\n      />\n    );\n  }\n  if (partitionSetsOrError && partitionSetsOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"Python Error\"\n        description={partitionSetsOrError.message}\n      />\n    );\n  }\n\n  if (launchpadType === 'asset') {\n    return (\n      <LaunchpadTransientSessionContainer\n        launchpadType={launchpadType}\n        pipeline={pipelineOrError}\n        partitionSets={partitionSetsOrError}\n        repoAddress={repoAddress}\n        sessionPresets={sessionPresets || {}}\n      />\n    );\n  } else {\n    // job\n    return (\n      <React.Suspense fallback={<div />}>\n        <LaunchpadStoredSessionsContainer\n          launchpadType={launchpadType}\n          pipeline={pipelineOrError}\n          partitionSets={partitionSetsOrError}\n          repoAddress={repoAddress}\n        />\n      </React.Suspense>\n    );\n  }\n};\n\nconst EXECUTION_SESSION_CONTAINER_PIPELINE_FRAGMENT = gql`\n  fragment LaunchpadSessionPipelineFragment on Pipeline {\n    id\n    isJob\n    isAssetJob\n    ...ConfigEditorGeneratorPipelineFragment\n    modes {\n      id\n      name\n      description\n    }\n  }\n  ${CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT}\n`;\n\nconst EXECUTION_SESSION_CONTAINER_PARTITION_SETS_FRAGMENT = gql`\n  fragment LaunchpadSessionPartitionSetsFragment on PartitionSets {\n    ...ConfigEditorGeneratorPartitionSetsFragment\n  }\n  ${CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT}\n`;\n\nconst PIPELINE_EXECUTION_ROOT_QUERY = gql`\n  query LaunchpadRootQuery(\n    $pipelineName: String!\n    $repositoryName: String!\n    $repositoryLocationName: String!\n  ) {\n    pipelineOrError(\n      params: {\n        pipelineName: $pipelineName\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PipelineNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n      ... on Pipeline {\n        id\n        ...LaunchpadSessionPipelineFragment\n      }\n    }\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      __typename\n      ...LaunchpadSessionPartitionSetsFragment\n      ... on PipelineNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${EXECUTION_SESSION_CONTAINER_PIPELINE_FRAGMENT}\n  ${EXECUTION_SESSION_CONTAINER_PARTITION_SETS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","// Patched lint mode that won't constantly lint\nimport CodeMirror from 'codemirror';\n\nconst GUTTER_ID = 'CodeMirror-lint-markers';\n\nfunction showTooltip(e, content, node) {\n  const tt = document.createElement('div');\n  const nodeRect = node.getBoundingClientRect();\n\n  tt.className = 'CodeMirror-lint-tooltip';\n  tt.appendChild(content.cloneNode(true));\n  document.body.appendChild(tt);\n  if (nodeRect.top > tt.clientHeight) {\n    // position on the top\n    tt.style.top = nodeRect.top - tt.clientHeight - 5 + 'px';\n    tt.style.left = nodeRect.left + 5 + 'px';\n  } else {\n    // positon on the right if top would be off-screen\n    tt.style.top = nodeRect.top + 5 + 'px';\n    tt.style.left = nodeRect.right + 10 + 'px';\n  }\n  if (tt.style.opacity != null) {\n    tt.style.opacity = 1;\n  }\n  return tt;\n}\nfunction rm(elt) {\n  if (elt.parentNode) {\n    elt.parentNode.removeChild(elt);\n  }\n}\nfunction hideTooltip(tt) {\n  if (!tt.parentNode) {\n    return;\n  }\n  if (tt.style.opacity == null) {\n    rm(tt);\n  }\n  tt.style.opacity = 0;\n  setTimeout(function () {\n    rm(tt);\n  }, 600);\n}\n\nfunction showTooltipFor(e, content, node) {\n  let tooltip = showTooltip(e, content, node);\n  function hide() {\n    CodeMirror.off(node, 'mouseout', hide);\n    if (tooltip) {\n      hideTooltip(tooltip);\n      tooltip = null;\n    }\n  }\n  const poll = setInterval(function () {\n    if (tooltip) {\n      for (let n = node; ; n = n.parentNode) {\n        if (n && n.nodeType === 11) {\n          n = n.host;\n        }\n        if (n === document.body) {\n          return;\n        }\n        if (!n) {\n          hide();\n          break;\n        }\n      }\n    }\n    if (!tooltip) {\n      return clearInterval(poll);\n    }\n  }, 400);\n  CodeMirror.on(node, 'mouseout', hide);\n}\n\nfunction parseOptions(_cm, options) {\n  if (options instanceof Function) {\n    return {getAnnotations: options};\n  }\n  if (!options || options === true) {\n    options = {};\n  }\n  return options;\n}\n\nfunction clearMarks(cm) {\n  const state = cm.state.lint;\n  if (state.hasGutter) {\n    cm.clearGutter(GUTTER_ID);\n  }\n  for (let i = 0; i < state.marked.length; ++i) {\n    state.marked[i].clear();\n  }\n  state.marked.length = 0;\n}\n\nfunction makeMarker(labels, severity, multiple, tooltips) {\n  const marker = document.createElement('div');\n  let inner = marker;\n  marker.className = 'CodeMirror-lint-marker CodeMirror-lint-marker-' + severity;\n  if (multiple) {\n    inner = marker.appendChild(document.createElement('div'));\n    inner.className = 'CodeMirror-lint-marker CodeMirror-lint-marker-multiple';\n  }\n\n  if (tooltips !== false) {\n    CodeMirror.on(inner, 'mouseover', function (e) {\n      showTooltipFor(e, labels, inner);\n    });\n  }\n  return marker;\n}\n\nfunction getMaxSeverity(a, b) {\n  if (a === 'error') {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nfunction groupByLine(annotations) {\n  const lines = [];\n  for (let i = 0; i < annotations.length; ++i) {\n    const ann = annotations[i],\n      line = ann.from.line;\n    (lines[line] || (lines[line] = [])).push(ann);\n  }\n  return lines;\n}\n\nfunction annotationTooltip(ann) {\n  let severity = ann.severity;\n  if (!severity) {\n    severity = 'error';\n  }\n  const tip = document.createElement('div');\n  tip.className = 'CodeMirror-lint-message CodeMirror-lint-message-' + severity;\n  if (typeof ann.messageHTML !== 'undefined') {\n    tip.innerHTML = ann.messageHTML;\n  } else {\n    tip.appendChild(document.createTextNode(ann.message));\n  }\n  return tip;\n}\n\nfunction updateLinting(cm, annotationsNotSorted) {\n  clearMarks(cm);\n  const state = cm.state.lint,\n    options = state.options;\n\n  const annotations = groupByLine(annotationsNotSorted);\n\n  for (let line = 0; line < annotations.length; ++line) {\n    const anns = annotations[line];\n    if (!anns) {\n      continue;\n    }\n\n    let maxSeverity = null;\n    const tipLabel = state.hasGutter && document.createDocumentFragment();\n\n    for (let i = 0; i < anns.length; ++i) {\n      let ann = anns[i];\n      let severity = ann.severity;\n      if (!severity) {\n        severity = 'error';\n      }\n      maxSeverity = getMaxSeverity(maxSeverity, severity);\n\n      if (options.formatAnnotation) {\n        ann = options.formatAnnotation(ann);\n      }\n      if (state.hasGutter) {\n        tipLabel.appendChild(annotationTooltip(ann));\n      }\n\n      if (ann.to) {\n        state.marked.push(\n          cm.markText(ann.from, ann.to, {\n            className: 'CodeMirror-lint-mark CodeMirror-lint-mark-' + severity,\n            __annotation: ann,\n          }),\n        );\n      }\n    }\n\n    if (state.hasGutter) {\n      cm.setGutterMarker(\n        line,\n        GUTTER_ID,\n        makeMarker(tipLabel, maxSeverity, anns.length > 1, state.options.tooltips),\n      );\n    }\n  }\n  if (options.onUpdateLinting) {\n    options.onUpdateLinting(annotationsNotSorted, annotations, cm);\n  }\n}\n\nfunction lintAsync(cm, getAnnotations, passOptions) {\n  const state = cm.state.lint;\n  let id = ++state.waitingFor;\n  function abort() {\n    id = -1;\n    cm.off('change', abort);\n  }\n  cm.on('change', abort);\n  getAnnotations(\n    cm.getValue(),\n    function (annotations, arg2) {\n      cm.off('change', abort);\n      if (state.waitingFor !== id) {\n        return;\n      }\n      if (arg2 && annotations instanceof CodeMirror) {\n        annotations = arg2;\n      }\n      cm.operation(function () {\n        updateLinting(cm, annotations);\n      });\n    },\n    passOptions,\n    cm,\n  );\n}\n\nfunction startLinting(cm) {\n  const state = cm.state.lint,\n    options = state.options;\n  /*\n   * Passing rules in `options` property prevents JSHint (and other linters) from complaining\n   * about unrecognized rules like `onUpdateLinting`, `delay`, `lintOnChange`, etc.\n   */\n  const passOptions = options.options || options;\n  const getAnnotations = options.getAnnotations || cm.getHelper(CodeMirror.Pos(0, 0), 'lint');\n  if (!getAnnotations) {\n    return;\n  }\n  if (options.async || getAnnotations.async) {\n    lintAsync(cm, getAnnotations, passOptions);\n  } else {\n    const annotations = getAnnotations(cm.getValue(), passOptions, cm);\n    if (!annotations) {\n      return;\n    }\n    if (annotations.then) {\n      annotations.then(function (issues) {\n        cm.operation(function () {\n          updateLinting(cm, issues);\n        });\n      });\n    } else {\n      cm.operation(function () {\n        updateLinting(cm, annotations);\n      });\n    }\n  }\n}\n\nfunction onChange(cm) {\n  const state = cm.state.lint;\n  if (!state) {\n    return;\n  }\n  clearTimeout(state.timeout);\n  state.timeout = setTimeout(function () {\n    startLinting(cm);\n  }, state.options.delay || 500);\n}\n\nfunction popupTooltip(docs, annotations, e) {\n  const target = e.target || e.srcElement;\n\n  const tooltip = document.createDocumentFragment();\n\n  if (docs) {\n    const docsEl = document.createElement('div');\n    docsEl.textContent = docs;\n    tooltip.appendChild(docsEl);\n    if (annotations.length) {\n      docsEl.style.paddingBottom = '4px';\n      docsEl.style.marginBottom = '4px';\n      docsEl.style.borderBottom = '1px solid rgba(0,0,0,0.25)';\n    }\n  }\n\n  for (let i = 0; i < annotations.length; i++) {\n    const ann = annotations[i];\n    tooltip.appendChild(annotationTooltip(ann));\n  }\n  showTooltipFor(e, tooltip, target);\n}\n\nfunction onMouseOver(cm, e) {\n  const target = e.target || e.srcElement;\n  const box = target.getBoundingClientRect(),\n    x = (box.left + box.right) / 2,\n    y = (box.top + box.bottom) / 2;\n  const pos = cm.coordsChar({left: x, top: y}, 'client');\n  const spans = cm.findMarksAt(pos);\n\n  const getDocs = cm.getHelper(CodeMirror.Pos(0, 0), 'dagster-docs');\n  const docs = getDocs(cm, pos);\n\n  const annotations = [];\n  for (let i = 0; i < spans.length; ++i) {\n    const ann = spans[i].__annotation;\n    if (ann) {\n      annotations.push(ann);\n    }\n  }\n\n  if (docs || annotations.length) {\n    popupTooltip(docs, annotations, e);\n  }\n}\n\nfunction LintState(cm, options, hasGutter) {\n  this.marked = [];\n  this.options = options;\n  this.timeout = null;\n  this.hasGutter = hasGutter;\n  this.onMouseOver = function (e) {\n    onMouseOver(cm, e);\n  };\n  this.waitingFor = 0;\n}\n\nexport const patchLint = () => {\n  CodeMirror.defineOption('lint', false, function (cm, val, old) {\n    if (old && old !== CodeMirror.Init) {\n      clearMarks(cm);\n      if (cm.state.lint.options.lintOnChange !== false) {\n        cm.off('change', onChange);\n      }\n      CodeMirror.off(cm.getWrapperElement(), 'mouseover', cm.state.lint.onMouseOver);\n      clearTimeout(cm.state.lint.timeout);\n      delete cm.state.lint;\n    }\n\n    if (val) {\n      const gutters = cm.getOption('gutters');\n      let hasLintGutter = false;\n      for (let i = 0; i < gutters.length; ++i) {\n        if (gutters[i] === GUTTER_ID) {\n          hasLintGutter = true;\n        }\n      }\n      const state = (cm.state.lint = new LintState(cm, parseOptions(cm, val), hasLintGutter));\n      if (state.options.lintOnChange !== false) {\n        cm.on('change', onChange);\n      }\n      if (state.options.tooltips !== false && state.options.tooltips !== 'gutter') {\n        CodeMirror.on(cm.getWrapperElement(), 'mouseover', state.onMouseOver);\n      }\n    }\n  });\n\n  CodeMirror.defineExtension('performLint', function () {\n    if (this.state.lint) {\n      startLinting(this);\n    }\n  });\n};\n","import 'codemirror/addon/comment/comment';\nimport 'codemirror/addon/dialog/dialog';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/fold/foldgutter.css';\nimport 'codemirror/addon/fold/indent-fold';\nimport 'codemirror/addon/hint/show-hint';\nimport 'codemirror/addon/hint/show-hint.css';\nimport 'codemirror/addon/lint/lint.css';\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/keymap/sublime';\n\nimport {Editor} from 'codemirror';\nimport debounce from 'lodash/debounce';\nimport * as React from 'react';\nimport {createGlobalStyle} from 'styled-components/macro';\nimport * as yaml from 'yaml';\n\nimport {StyledCodeMirror} from './CodeMirror';\nimport {patchLint} from './configeditor/codemirror-yaml/lint';\nimport {\n  YamlModeValidateFunction,\n  expandAutocompletionContextAtCursor,\n  findRangeInDocumentFromPath,\n  YamlModeValidationResult,\n} from './configeditor/codemirror-yaml/mode'; // eslint-disable-line import/no-duplicates\nimport {ConfigEditorHelpContext} from './configeditor/types/ConfigEditorHelpContext';\nimport {ConfigSchema} from './configeditor/types/ConfigSchema';\n\nexport {isHelpContextEqual} from './configeditor/isHelpContextEqual';\nexport {ConfigEditorHelp} from './configeditor/ConfigEditorHelp';\n\nexport type {ConfigEditorHelpContext, ConfigSchema, YamlModeValidationResult};\n\npatchLint();\n\ninterface ConfigEditorProps {\n  configCode: string;\n  readOnly: boolean;\n  configSchema?: ConfigSchema | null;\n\n  checkConfig: YamlModeValidateFunction;\n  onConfigChange: (newValue: string) => void;\n  onHelpContextChange: (helpContext: ConfigEditorHelpContext | null) => void;\n}\n\nconst AUTO_COMPLETE_AFTER_KEY = /^[a-zA-Z0-9_@(]$/;\nconst performLint = debounce((editor: any) => {\n  editor.performLint();\n}, 1000);\n\nconst ConfigEditorStyle = createGlobalStyle`\n  .react-codemirror2 .CodeMirror.cm-s-config-editor {\n    height: initial;\n    position: absolute;\n    inset: 0;\n  }\n`;\n\nexport class ConfigEditor extends React.Component<ConfigEditorProps> {\n  _editor?: Editor;\n\n  componentDidUpdate(prevProps: ConfigEditorProps) {\n    if (!this._editor) {\n      return;\n    }\n    if (prevProps.configSchema === this.props.configSchema) {\n      return;\n    }\n    this.performInitialPass();\n  }\n\n  shouldComponentUpdate(prevProps: ConfigEditorProps) {\n    // Unfortunately, updates to the ConfigEditor clear the linter highlighting for\n    // unknown reasons and they're recalculated asynchronously. To prevent flickering,\n    // only update if our input has meaningfully changed.\n    return (\n      prevProps.configCode !== this.props.configCode ||\n      prevProps.readOnly !== this.props.readOnly ||\n      prevProps.configSchema !== this.props.configSchema\n    );\n  }\n\n  // Public API\n\n  moveCursor = (line: number, ch: number) => {\n    if (!this._editor) {\n      return;\n    }\n    this._editor.setCursor(line, ch, {scroll: false});\n    const {clientHeight} = this._editor.getScrollInfo();\n    const {left, top} = this._editor.cursorCoords(true, 'local');\n    const offsetFromTop = 20;\n\n    this._editor?.scrollIntoView({\n      left,\n      right: left,\n      top: top - offsetFromTop,\n      bottom: top + (clientHeight - offsetFromTop),\n    });\n    this._editor.focus();\n  };\n\n  moveCursorToPath = (path: string[]) => {\n    if (!this._editor) {\n      return;\n    }\n    const codeMirrorDoc = this._editor.getDoc();\n    const yamlDoc = yaml.parseDocument(this.props.configCode);\n    const range = findRangeInDocumentFromPath(yamlDoc, path, 'key');\n    if (!range) {\n      return;\n    }\n    const from = codeMirrorDoc.posFromIndex(range ? range.start : 0) as CodeMirror.Position;\n    this.moveCursor(from.line, from.ch);\n  };\n\n  // End Public API\n\n  performInitialPass() {\n    // update the gutter and redlining\n    performLint(this._editor);\n\n    // update the contextual help based on the configSchema and content\n    const {context} = expandAutocompletionContextAtCursor(this._editor);\n    this.props.onHelpContextChange(context ? {type: context.closestMappingType} : null);\n  }\n\n  render() {\n    // Unfortunately, CodeMirror is too intense to be simulated in the JSDOM \"virtual\" DOM.\n    // Until we run tests against something like selenium, trying to render the editor in\n    // tests have to stop here.\n    if (process.env.NODE_ENV === 'test') {\n      return <span />;\n    }\n\n    return (\n      <div style={{flex: 1, position: 'relative'}}>\n        <ConfigEditorStyle />\n        <StyledCodeMirror\n          value={this.props.configCode}\n          theme={['config-editor']}\n          options={\n            {\n              mode: 'yaml',\n              lineNumbers: true,\n              readOnly: this.props.readOnly,\n              indentUnit: 2,\n              smartIndent: true,\n              showCursorWhenSelecting: true,\n              lintOnChange: false,\n              lint: {\n                checkConfig: this.props.checkConfig,\n                lintOnChange: false,\n                onUpdateLinting: false,\n              },\n              hintOptions: {\n                completeSingle: false,\n                closeOnUnfocus: false,\n                schema: this.props.configSchema,\n              },\n              keyMap: 'sublime',\n              extraKeys: {\n                'Cmd-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Ctrl-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Alt-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Shift-Tab': (editor: any) => editor.execCommand('indentLess'),\n                Tab: (editor: any) => editor.execCommand('indentMore'),\n                // Persistent search box in Query Editor\n                'Cmd-F': 'findPersistent',\n                'Ctrl-F': 'findPersistent',\n              },\n              gutters: [\n                'CodeMirror-foldgutter',\n                'CodeMirror-lint-markers',\n                'CodeMirror-linenumbers',\n              ],\n              foldGutter: true,\n            } as any\n          }\n          editorDidMount={(editor) => {\n            this._editor = editor;\n            this.performInitialPass();\n          }}\n          onBeforeChange={(editor, data, value) => {\n            this.props.onConfigChange(value);\n          }}\n          onCursorActivity={(editor: any) => {\n            if (editor.getSelection().length) {\n              this.props.onHelpContextChange(null);\n            } else {\n              const {context} = expandAutocompletionContextAtCursor(editor);\n              this.props.onHelpContextChange(context ? {type: context.closestMappingType} : null);\n            }\n          }}\n          onChange={(editor: Editor) => {\n            performLint(editor);\n          }}\n          onBlur={(editor: Editor) => {\n            performLint(editor);\n          }}\n          onKeyUp={(editor, event: KeyboardEvent) => {\n            if (AUTO_COMPLETE_AFTER_KEY.test(event.key)) {\n              editor.execCommand('autocomplete');\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import {ConfigEditorHelpContext} from './types/ConfigEditorHelpContext';\n\nexport const isHelpContextEqual = (\n  prev: ConfigEditorHelpContext | null,\n  next: ConfigEditorHelpContext | null,\n) => (prev && prev.type.key) === (next && next.type.key);\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Colors} from '../Colors';\nimport {ConfigTypeSchema, TypeData} from '../ConfigTypeSchema';\nimport {isHelpContextEqual} from '../configeditor/isHelpContextEqual';\n\nimport {ConfigEditorHelpContext} from './types/ConfigEditorHelpContext';\n\ninterface ConfigEditorHelpProps {\n  context: ConfigEditorHelpContext | null;\n  allInnerTypes: TypeData[];\n}\n\nexport const ConfigEditorHelp: React.FC<ConfigEditorHelpProps> = React.memo(\n  ({context, allInnerTypes}) => {\n    if (!context) {\n      return <Container />;\n    }\n    return (\n      <Container>\n        <ConfigScrollWrap>\n          <ConfigTypeSchema type={context.type} typesInScope={allInnerTypes} maxDepth={2} />\n        </ConfigScrollWrap>\n        <AutocompletionsNote>Use Ctrl+Space to show auto-completions inline.</AutocompletionsNote>\n      </Container>\n    );\n  },\n  (prev, next) => isHelpContextEqual(prev.context, next.context),\n);\n\nconst AutocompletionsNote = styled.div`\n  font-size: 0.75rem;\n  text-align: center;\n  padding: 4px;\n  border-top: 1px solid ${Colors.KeylineGray};\n  background: ${Colors.Gray100};\n  color: ${Colors.Gray500};\n`;\n\nconst ConfigScrollWrap = styled.div`\n  padding: 8px;\n  color: ${Colors.Dark};\n  flex: 1;\n  pointer-events: initial;\n  max-height: 100%;\n  overflow-y: auto;\n`;\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: ${Colors.Gray50};\n  height: 100%;\n`;\n","import {gql} from '@apollo/client';\nimport {YamlModeValidationResult} from '@dagster-io/ui';\nimport yaml from 'yaml';\n\nimport {ConfigEditorValidationFragment} from './types/ConfigEditorValidationFragment';\n\nexport const CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT = gql`\n  fragment ConfigEditorRunConfigSchemaFragment on RunConfigSchema {\n    rootConfigType {\n      key\n    }\n    allConfigTypes {\n      __typename\n      key\n      description\n      isSelector\n      typeParamKeys\n      ... on RegularConfigType {\n        givenName\n      }\n      ... on MapConfigType {\n        keyLabelName\n      }\n      ... on EnumConfigType {\n        givenName\n        values {\n          value\n          description\n        }\n      }\n      ... on CompositeConfigType {\n        fields {\n          name\n          description\n          isRequired\n          configTypeKey\n          defaultValueAsJson\n        }\n      }\n      ... on ScalarUnionConfigType {\n        key\n        scalarTypeKey\n        nonScalarTypeKey\n      }\n    }\n  }\n`;\n\nexport const CONFIG_EDITOR_VALIDATION_FRAGMENT = gql`\n  fragment ConfigEditorValidationFragment on PipelineConfigValidationResult {\n    __typename\n    ... on RunConfigValidationInvalid {\n      errors {\n        __typename\n        reason\n        message\n        stack {\n          entries {\n            __typename\n            ... on EvaluationStackPathEntry {\n              fieldName\n            }\n            ... on EvaluationStackListItemEntry {\n              listIndex\n            }\n            ... on EvaluationStackMapKeyEntry {\n              mapKey\n            }\n            ... on EvaluationStackMapValueEntry {\n              mapKey\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ntype StackEntry =\n  | {\n      __typename: 'EvaluationStackPathEntry';\n      fieldName: string;\n    }\n  | {\n      __typename: 'EvaluationStackListItemEntry';\n      listIndex: number;\n    }\n  | {\n      __typename: 'EvaluationStackMapKeyEntry';\n      mapKey: object;\n    }\n  | {\n      __typename: 'EvaluationStackMapValueEntry';\n      mapKey: object;\n    };\n\nexport function errorStackToYamlPath(entries: StackEntry[]) {\n  return entries.map((entry) => {\n    switch (entry.__typename) {\n      case 'EvaluationStackPathEntry':\n        return entry.fieldName;\n      case 'EvaluationStackListItemEntry':\n        return `${entry.listIndex}`;\n      case 'EvaluationStackMapKeyEntry':\n      case 'EvaluationStackMapValueEntry':\n        return `${entry.mapKey}`;\n    }\n  });\n}\n\nexport function responseToYamlValidationResult(\n  configYaml: string,\n  response: ConfigEditorValidationFragment,\n): YamlModeValidationResult {\n  if (response.__typename !== 'RunConfigValidationInvalid') {\n    return {isValid: true};\n  }\n\n  const errors = response.errors.map((err) => ({\n    message: err.message,\n    reason: err.reason,\n    path: errorStackToYamlPath(err.stack.entries),\n  }));\n\n  // Errors at the top level have no stack path because they are not within any\n  // dicts. To avoid highlighting the entire editor, associate them with the first\n  // element of the top dict.\n  const parsed = yaml.parse(configYaml);\n  const topLevelKey = Object.keys(parsed);\n  errors.forEach((error) => {\n    if (error.path.length === 0 && topLevelKey.length) {\n      error.path = [topLevelKey[0]];\n    }\n  });\n\n  return {isValid: false, errors};\n}\n","import {Button, Icon, MenuItem, Select} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {ModeNotFoundError} from './ModeNotFoundError';\n\ninterface Mode {\n  name: string;\n}\n\ninterface ConfigEditorModePickerProps {\n  modes: Mode[];\n  modeError?: ModeNotFoundError;\n  modeName: string | null;\n  onModeChange: (mode: string) => void;\n}\n\nconst MODE_PICKER_HINT_TEXT = `To add a mode, add a ModeDefinition to the pipeline.`;\n\nexport const ConfigEditorModePicker: React.FC<ConfigEditorModePickerProps> = (props) => {\n  const resolvedMode = props.modeName\n    ? props.modes.find((m) => m.name === props.modeName)\n    : props.modes[0];\n\n  React.useEffect(() => {\n    if (resolvedMode && resolvedMode.name !== props.modeName) {\n      props.onModeChange?.(resolvedMode.name);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [resolvedMode, props.modeName]);\n\n  const singleMode = props.modes.length === 1;\n  const valid = !props.modeError;\n  const disabled = singleMode && valid;\n\n  const onItemSelect = (mode: Mode) => {\n    props.onModeChange?.(mode.name);\n  };\n\n  return (\n    <Select\n      activeItem={resolvedMode}\n      filterable={true}\n      disabled={disabled}\n      items={props.modes}\n      itemPredicate={(query, mode) => query.length === 0 || mode.name.includes(query)}\n      itemRenderer={(mode, props) => (\n        <MenuItem\n          active={props.modifiers.active}\n          key={mode.name}\n          text={mode.name}\n          onClick={props.handleClick}\n        />\n      )}\n      onItemSelect={onItemSelect}\n    >\n      <Button\n        icon={valid ? undefined : <Icon name=\"error\" />}\n        intent={valid ? 'none' : 'danger'}\n        title={disabled ? MODE_PICKER_HINT_TEXT : 'Current execution mode'}\n        disabled={disabled}\n        rightIcon={<Icon name=\"expand_more\" />}\n        data-test-id=\"mode-picker-button\"\n      >\n        {valid\n          ? resolvedMode\n            ? `Mode: ${resolvedMode.name}`\n            : 'Select Mode'\n          : 'Invalid Mode Selection'}\n      </Button>\n    </Select>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OpSelectorQuery, OpSelectorQueryVariables} from './types/OpSelectorQuery';\n\ninterface IOpSelectorProps {\n  pipelineName: string;\n  serverProvidedSubsetError?: {message: string};\n  value: string[] | null;\n  query: string | null;\n  onChange: (value: string[] | null, query: string | null) => void;\n  flattenGraphs: boolean;\n  onFlattenGraphsChange: (v: boolean) => void;\n  repoAddress: RepoAddress;\n}\n\nconst SOLID_SELECTOR_QUERY = gql`\n  query OpSelectorQuery($selector: PipelineSelector!, $requestScopeHandleID: String) {\n    pipelineOrError(params: $selector) {\n      __typename\n      ... on Pipeline {\n        id\n        name\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on InvalidSubsetError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const OpSelector = (props: IOpSelectorProps) => {\n  const {\n    serverProvidedSubsetError,\n    onChange,\n    pipelineName,\n    repoAddress,\n    onFlattenGraphsChange,\n  } = props;\n  const [focused, setFocused] = React.useState(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const flattenGraphs = props.flattenGraphs || false;\n  const selector = {...repoAddressToSelector(repoAddress), pipelineName};\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n  const {data, loading} = useQuery<OpSelectorQuery, OpSelectorQueryVariables>(\n    SOLID_SELECTOR_QUERY,\n    {\n      variables: {selector, requestScopeHandleID: flattenGraphs ? undefined : ''},\n      fetchPolicy: 'cache-and-network',\n    },\n  );\n\n  const query = props.query || '*';\n\n  const opHandles =\n    data?.pipelineOrError.__typename === 'Pipeline'\n      ? flattenGraphs\n        ? explodeCompositesInHandleGraph(data.pipelineOrError.solidHandles)\n        : data.pipelineOrError.solidHandles\n      : [];\n  const ops = opHandles.map((h) => h.solid);\n  const flattenGraphsEnabled =\n    flattenGraphs || ops.some((f) => f.definition.__typename === 'CompositeSolidDefinition');\n\n  const opsFetchError =\n    (data?.pipelineOrError.__typename !== 'Pipeline' && data?.pipelineOrError.message) || null;\n\n  const queryResultOps = filterByQuery(ops, query).all;\n  const invalidOpSelection = !loading && queryResultOps.length === 0;\n\n  const errorMessage = invalidOpSelection\n    ? isJob\n      ? `You must provide a valid op query or * to execute the entire job.`\n      : `You must provide a valid solid query or * to execute the entire pipeline.`\n    : serverProvidedSubsetError\n    ? serverProvidedSubsetError.message\n    : opsFetchError;\n\n  const onTextChange = (nextQuery: string) => {\n    if (nextQuery === '') {\n      nextQuery = '*';\n    }\n    const queryResultOps = filterByQuery(ops, nextQuery).all;\n\n    // If all ops are returned, we set the subset to null rather than sending\n    // a comma separated list of evey solid to the API\n    if (queryResultOps.length === ops.length) {\n      onChange(null, nextQuery);\n    } else {\n      onChange(\n        queryResultOps.map((s) => s.name),\n        nextQuery,\n      );\n    }\n  };\n\n  if (!data?.pipelineOrError) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      <Popover\n        isOpen={focused && !!errorMessage}\n        position=\"bottom-left\"\n        content={<PopoverErrorWrap>{errorMessage}</PopoverErrorWrap>}\n      >\n        <ShortcutHandler\n          shortcutLabel=\"⌥S\"\n          shortcutFilter={(e) => e.code === 'KeyS' && e.altKey}\n          onShortcut={() => inputRef.current?.focus()}\n        >\n          <GraphQueryInput\n            width={(query !== '*' && query !== '') || focused || flattenGraphsEnabled ? 350 : 90}\n            intent={errorMessage ? 'danger' : 'none'}\n            items={ops}\n            ref={inputRef}\n            value={query}\n            placeholder=\"Type an op subset…\"\n            onChange={onTextChange}\n            onFocus={() => setFocused(true)}\n            onBlur={() => setFocused(false)}\n            linkToPreview={{\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName,\n              isJob,\n            }}\n            flattenGraphsEnabled={flattenGraphsEnabled}\n            flattenGraphs={flattenGraphs}\n            setFlattenGraphs={() => {\n              onFlattenGraphsChange(!flattenGraphs);\n            }}\n          />\n        </ShortcutHandler>\n      </Popover>\n    </Box>\n  );\n};\n\nconst PopoverErrorWrap = styled.div`\n  padding: 4px 8px;\n  border-radius: 2px;\n  border: 1px solid ${Colors.Red500};\n  background: ${Colors.Red200};\n  color: ${Colors.Red700};\n`;\n","import {gql} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {Intent} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Checkbox,\n  Colors,\n  Icon,\n  SplitPanelContainer,\n  Tag,\n  Code,\n  Tooltip,\n  FontFamily,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {errorStackToYamlPath} from '../configeditor/ConfigEditorUtils';\nimport {\n  ConfigEditorRunConfigSchemaFragment,\n  ConfigEditorRunConfigSchemaFragment_allConfigTypes_CompositeConfigType,\n} from '../configeditor/types/ConfigEditorRunConfigSchemaFragment';\n\nimport {LaunchpadType} from './LaunchpadRoot';\nimport {\n  RunPreviewValidationFragment,\n  RunPreviewValidationFragment_RunConfigValidationInvalid_errors,\n} from './types/RunPreviewValidationFragment';\n\ntype ValidationError = RunPreviewValidationFragment_RunConfigValidationInvalid_errors;\ntype ValidationErrorOrNode = ValidationError | React.ReactNode;\n\nfunction isValidationError(e: ValidationErrorOrNode): e is ValidationError {\n  return e && typeof e === 'object' && '__typename' in e ? true : false;\n}\n\nconst stateToHint: {[key: string]: {title: string; intent: Intent}} = {\n  invalid: {\n    title: `You need to fix this configuration section.`,\n    intent: 'danger',\n  },\n  missing: {\n    title: `You need to add this configuration section.`,\n    intent: 'danger',\n  },\n  present: {\n    title: `This section is present and valid.`,\n    intent: 'none',\n  },\n  none: {title: `This section is empty and valid.`, intent: 'none'},\n};\n\nconst RemoveExtraConfigButton = ({\n  onRemoveExtraPaths,\n  extraNodes,\n  disabled,\n}: {\n  extraNodes: string[];\n  onRemoveExtraPaths: (paths: string[]) => void;\n  disabled: boolean;\n}) => {\n  const confirm = useConfirmation();\n\n  const knownKeyExtraPaths: {[key: string]: string[]} = {};\n  const otherPaths: string[] = [];\n\n  for (const path of extraNodes) {\n    const parts = path.split('.');\n\n    // If the length is 2, the first part of the path is a known key, such as \"solids\", \"resouces\",\n    // or \"loggers\", and the user has provided extra config for one of those. We will keep track of\n    // these in `knownKeyExtraPaths` just so we can display them with an extra description.\n    if (parts.length === 2) {\n      const [type, name] = parts;\n      if (!knownKeyExtraPaths[type]) {\n        knownKeyExtraPaths[type] = [];\n      }\n      knownKeyExtraPaths[type].push(name);\n    } else {\n      otherPaths.push(path);\n    }\n  }\n\n  const onClick = async () => {\n    await confirm({\n      title: 'Remove extra config',\n      description: (\n        <div>\n          <p>\n            {`You have provided extra configuration in your run config which does not conform to your\n            pipeline's config schema.`}\n          </p>\n          {Object.entries(knownKeyExtraPaths).length > 0 &&\n            Object.entries(knownKeyExtraPaths).map(([key, value]) => (\n              <>\n                <p>Extra {key}:</p>\n                <ul>\n                  {value.map((v) => (\n                    <li key={v}>\n                      <Code>{v}</Code>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            ))}\n          {otherPaths.length > 0 && (\n            <>\n              <p>Other extra paths:</p>\n              <ul>\n                {otherPaths.map((v) => (\n                  <li key={v}>\n                    <Code>{v}</Code>\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n          <p>\n            Clicking confirm will automatically remove this extra configuration from your run\n            config.\n          </p>\n        </div>\n      ),\n    });\n    onRemoveExtraPaths(extraNodes);\n  };\n\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n      <Button disabled={disabled} onClick={onClick}>\n        Remove extra config\n      </Button>\n      {disabled ? (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Icon name=\"check_circle\" color={Colors.Green500} />\n          No extra config to remove\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst ScaffoldConfigButton = ({\n  onScaffoldMissingConfig,\n  missingNodes,\n  disabled,\n}: {\n  missingNodes: string[];\n  onScaffoldMissingConfig: () => void;\n  disabled: boolean;\n}) => {\n  const confirm = useConfirmation();\n\n  const confirmationMessage = (\n    <div>\n      {missingNodes.length > 0 && (\n        <>\n          <p>Missing paths:</p>\n          <ul>\n            {missingNodes.map((v) => (\n              <li key={v}>\n                <Code>{v}</Code>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      <p>\n        Clicking confirm will automatically scaffold this missing configuration into your run config\n        with default values. You will need to change the values appropriately.\n      </p>\n    </div>\n  );\n\n  const onClick = async () => {\n    await confirm({\n      title: 'Scaffold missing config',\n      description: confirmationMessage,\n    });\n    onScaffoldMissingConfig();\n  };\n\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n      <Button disabled={disabled} onClick={onClick}>\n        Scaffold missing config\n      </Button>\n      {disabled ? (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Icon name=\"check_circle\" color={Colors.Green500} />\n          No missing config\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\ninterface RunPreviewProps {\n  validation: RunPreviewValidationFragment | null;\n  document: any | null;\n  launchpadType: LaunchpadType;\n\n  runConfigSchema?: ConfigEditorRunConfigSchemaFragment;\n  onHighlightPath: (path: string[]) => void;\n  onRemoveExtraPaths: (paths: string[]) => void;\n  onScaffoldMissingConfig: () => void;\n  solidSelection: string[] | null;\n}\n\nexport const RunPreview: React.FC<RunPreviewProps> = (props) => {\n  const {\n    document,\n    validation,\n    onHighlightPath,\n    launchpadType,\n    onRemoveExtraPaths,\n    onScaffoldMissingConfig,\n    solidSelection,\n    runConfigSchema,\n  } = props;\n  const [errorsOnly, setErrorsOnly] = React.useState(false);\n\n  const rootCompositeChildren = React.useMemo(() => {\n    if (!runConfigSchema) {\n      return {};\n    }\n\n    const {allConfigTypes, rootConfigType} = runConfigSchema;\n    const children: {\n      [fieldName: string]: ConfigEditorRunConfigSchemaFragment_allConfigTypes_CompositeConfigType;\n    } = {};\n\n    const root = allConfigTypes.find((t) => t.key === rootConfigType.key);\n    if (root?.__typename !== 'CompositeConfigType') {\n      return children;\n    }\n\n    root.fields.forEach((field) => {\n      const allConfigVersion = allConfigTypes.find((t) => t.key === field.configTypeKey);\n      if (allConfigVersion?.__typename !== 'CompositeConfigType') {\n        return;\n      }\n      children[field.name] = allConfigVersion;\n    });\n\n    return children;\n  }, [runConfigSchema]);\n\n  const extraNodes: string[] = [];\n  const missingNodes: string[] = [];\n  const errorsAndPaths: {\n    pathKey: string;\n    error: ValidationErrorOrNode;\n  }[] = [];\n\n  if (validation && validation.__typename === 'RunConfigValidationInvalid') {\n    validation.errors.forEach((e) => {\n      const path = errorStackToYamlPath(e.stack.entries);\n\n      errorsAndPaths.push({pathKey: path.join('.'), error: e});\n\n      if (e.__typename === 'MissingFieldConfigError') {\n        missingNodes.push([...path, e.field.name].join('.'));\n      } else if (e.__typename === 'MissingFieldsConfigError') {\n        for (const field of e.fields) {\n          missingNodes.push([...path, field.name].join('.'));\n        }\n      } else if (e.__typename === 'FieldNotDefinedConfigError') {\n        extraNodes.push([...path, e.fieldName].join('.'));\n      } else if (e.__typename === 'FieldsNotDefinedConfigError') {\n        for (const fieldName of e.fieldNames) {\n          extraNodes.push([...path, fieldName].join('.'));\n        }\n      } else if (e.__typename === 'RuntimeMismatchConfigError') {\n        // If an entry at a path is the wrong type,\n        // it is equivalent to it being missing\n        missingNodes.push(path.join('.'));\n      }\n    });\n  }\n\n  if (validation?.__typename === 'InvalidSubsetError') {\n    errorsAndPaths.push({pathKey: '', error: validation.message});\n  }\n\n  if (validation?.__typename === 'PythonError') {\n    const info = <PythonErrorInfo error={validation} />;\n    errorsAndPaths.push({\n      pathKey: '',\n      error: (\n        <span>\n          PythonError:{' '}\n          <ButtonLink onClick={() => showCustomAlert({body: info})}>Click for details</ButtonLink>\n        </span>\n      ),\n    });\n  }\n\n  const {resources, ops, solids, ...rest} = rootCompositeChildren;\n  const hasOps = !!ops?.fields;\n\n  const itemsIn = (parents: string[], items: {name: string; isRequired: boolean}[]) => {\n    const boxes = items\n      .map((item) => {\n        // If a solid selection is in use, discard anything not in it.\n        if (solidSelection?.length && !solidSelection?.includes(item.name)) {\n          return null;\n        }\n\n        const path = [...parents, item.name];\n        const pathKey = path.join('.');\n        const pathErrors = errorsAndPaths\n          .filter((e) => e.pathKey === pathKey || e.pathKey.startsWith(`${pathKey}.`))\n          .map((e) => e.error);\n\n        const isPresent = pathExistsInObject(path, document);\n        const containsMissing = missingNodes.some((missingNode) =>\n          missingNode.includes(path.join('.')),\n        );\n        const isInvalid = pathErrors.length || containsMissing;\n        const isMissing = path.some((_, idx) =>\n          missingNodes.includes(path.slice(0, idx + 1).join('.')),\n        );\n\n        if (errorsOnly && !isInvalid) {\n          return false;\n        }\n\n        const state =\n          isMissing && item.isRequired\n            ? 'missing'\n            : isInvalid\n            ? 'invalid'\n            : isPresent\n            ? 'present'\n            : 'none';\n\n        return (\n          <Tooltip\n            position=\"bottom\"\n            content={stateToHint[state].title}\n            intent={stateToHint[state].intent}\n            key={item.name}\n          >\n            <Tag\n              key={item.name}\n              intent={stateToHint[state].intent}\n              onClick={() => {\n                const first = pathErrors.find(isValidationError);\n                onHighlightPath(first ? errorStackToYamlPath(first.stack.entries) : path);\n              }}\n            >\n              {item.name}\n            </Tag>\n          </Tooltip>\n        );\n      })\n      .filter(Boolean);\n\n    if (!boxes.length) {\n      return <ItemsEmptyNotice>Nothing to display.</ItemsEmptyNotice>;\n    }\n    return boxes;\n  };\n\n  return (\n    <SplitPanelContainer\n      identifier=\"run-preview\"\n      axis=\"horizontal\"\n      first={\n        <ErrorListContainer>\n          <Section>\n            <SectionTitle>Errors</SectionTitle>\n            {errorsAndPaths.length ? (\n              errorsAndPaths.map((item, idx) => (\n                <ErrorRow key={idx} error={item.error} onHighlight={onHighlightPath} />\n              ))\n            ) : (\n              <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n                <Icon name=\"check_circle\" color={Colors.Green500} />\n                No errors\n              </Box>\n            )}\n          </Section>\n          <Section>\n            <SectionTitle>Config actions:</SectionTitle>\n            <Box flex={{direction: 'column', gap: 8}} padding={{top: 4, bottom: 20}}>\n              <ScaffoldConfigButton\n                onScaffoldMissingConfig={onScaffoldMissingConfig}\n                missingNodes={missingNodes}\n                disabled={!missingNodes.length}\n              />\n              <RemoveExtraConfigButton\n                onRemoveExtraPaths={onRemoveExtraPaths}\n                extraNodes={extraNodes}\n                disabled={!extraNodes.length}\n              />\n            </Box>\n          </Section>\n        </ErrorListContainer>\n      }\n      firstInitialPercent={50}\n      firstMinSize={150}\n      second={\n        <>\n          <div style={{overflowY: 'scroll', width: '100%', height: '100%'}}>\n            <RuntimeAndResourcesSection>\n              <Section>\n                <SectionTitle>Runtime</SectionTitle>\n                <ItemSet>\n                  {itemsIn(\n                    [],\n                    Object.keys(rest).map((name) => ({name, isRequired: false})),\n                  )}\n                </ItemSet>\n              </Section>\n              {(resources?.fields.length || 0) > 0 && (\n                <Section>\n                  <SectionTitle>Resources</SectionTitle>\n                  <ItemSet>{itemsIn(['resources'], resources?.fields || [])}</ItemSet>\n                </Section>\n              )}\n            </RuntimeAndResourcesSection>\n            <Section>\n              <SectionTitle>{launchpadType === 'asset' ? 'Assets (Ops)' : 'Ops'}</SectionTitle>\n              <ItemSet>\n                {itemsIn(\n                  [hasOps ? 'ops' : 'solids'],\n                  (hasOps ? ops?.fields : solids?.fields) || [],\n                )}\n              </ItemSet>\n            </Section>\n            <div style={{height: 50}} />\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              right: 0,\n              padding: '12px 15px 0px 10px',\n              background: 'rgba(255,255,255,0.7)',\n            }}\n          >\n            <Checkbox\n              label=\"Errors Only\"\n              checked={errorsOnly}\n              onChange={() => setErrorsOnly(!errorsOnly)}\n            />\n          </div>\n        </>\n      }\n    />\n  );\n};\n\nexport const RUN_PREVIEW_VALIDATION_FRAGMENT = gql`\n  fragment RunPreviewValidationFragment on PipelineConfigValidationResult {\n    __typename\n    ... on RunConfigValidationInvalid {\n      errors {\n        __typename\n        reason\n        message\n        stack {\n          entries {\n            __typename\n            ... on EvaluationStackPathEntry {\n              fieldName\n            }\n            ... on EvaluationStackListItemEntry {\n              listIndex\n            }\n            ... on EvaluationStackMapKeyEntry {\n              mapKey\n            }\n            ... on EvaluationStackMapValueEntry {\n              mapKey\n            }\n          }\n        }\n        ... on MissingFieldConfigError {\n          field {\n            name\n          }\n        }\n        ... on MissingFieldsConfigError {\n          fields {\n            name\n          }\n        }\n        ... on FieldNotDefinedConfigError {\n          fieldName\n        }\n        ... on FieldsNotDefinedConfigError {\n          fieldNames\n        }\n      }\n    }\n    ... on PipelineNotFoundError {\n      message\n    }\n    ... on InvalidSubsetError {\n      message\n    }\n    ...PythonErrorFragment\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst SectionTitle = styled.div`\n  color: ${Colors.Gray400};\n  text-transform: uppercase;\n  font-size: 12px;\n  margin-bottom: 8px;\n`;\n\nconst Section = styled.div`\n  margin-top: 14px;\n  margin-left: 10px;\n`;\n\nconst ItemSet = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n\nconst ItemsEmptyNotice = styled.div`\n  font-size: 13px;\n  padding-top: 7px;\n  padding-bottom: 7px;\n`;\n\nconst ErrorListContainer = styled.div`\n  margin-left: 10px;\n  overflow-y: scroll;\n  height: 100%;\n`;\n\nconst ErrorRowContainer = styled.div<{hoverable: boolean}>`\n  text-align: left;\n  font-size: 13px;\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-family: ${FontFamily.monospace};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  border-bottom: 1px solid #ccc;\n  padding: 8px;\n  margin: 8px 12px 0 -8px;\n  &:last-child {\n    border-bottom: 0;\n    margin-bottom: 15px;\n  }\n  ${({hoverable}) =>\n    hoverable &&\n    `&:hover {\n      background: ${Colors.Gray50};\n    }\n  `}\n`;\n\nconst RuntimeAndResourcesSection = styled.div`\n  display: flex;\n  gap: 12px;\n  @media (max-width: 800px) {\n    flex-direction: column;\n  }\n`;\n\nconst ErrorRow: React.FC<{\n  error: ValidationError | React.ReactNode;\n  onHighlight: (path: string[]) => void;\n}> = ({error, onHighlight}) => {\n  let message = error;\n  let target: ValidationError | null = null;\n  if (isValidationError(error)) {\n    message = error.message;\n    target = error;\n  }\n\n  let displayed = message;\n  if (typeof message === 'string' && message.length > 400) {\n    displayed = truncateErrorMessage(message);\n  }\n\n  return (\n    <ErrorRowContainer\n      hoverable={!!target}\n      onClick={() => target && onHighlight(errorStackToYamlPath(target.stack.entries))}\n    >\n      <div style={{paddingRight: 4}}>\n        <Icon name=\"error\" color={Colors.Red500} />\n      </div>\n      <div>\n        {displayed}\n        {displayed !== message && (\n          <>\n            &nbsp;\n            <ButtonLink\n              onClick={() =>\n                showCustomAlert({\n                  body: <div style={{whiteSpace: 'pre-wrap'}}>{message}</div>,\n                })\n              }\n            >\n              View all\n            </ButtonLink>\n          </>\n        )}\n      </div>\n    </ErrorRowContainer>\n  );\n};\n\nfunction truncateErrorMessage(message: string) {\n  let split = message.indexOf('{');\n  if (split === -1) {\n    split = message.indexOf('. ');\n  }\n  if (split === -1) {\n    split = 400;\n  }\n  return message.substr(0, split) + '... ';\n}\n\nfunction pathExistsInObject(path: string[], object: any): boolean {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  if (path.length === 0) {\n    return true;\n  }\n  const [first, ...rest] = path;\n  return pathExistsInObject(rest, object[first]);\n}\n","import {assertUnreachable} from '../app/Util';\nimport {\n  ConfigEditorRunConfigSchemaFragment_allConfigTypes,\n  ConfigEditorRunConfigSchemaFragment,\n} from '../configeditor/types/ConfigEditorRunConfigSchemaFragment';\n\nexport const scaffoldType = (\n  configTypeKey: string,\n  typeLookup: {[key: string]: ConfigEditorRunConfigSchemaFragment_allConfigTypes},\n): any => {\n  const type = typeLookup[configTypeKey];\n\n  switch (type.__typename) {\n    case 'CompositeConfigType':\n      if (type.isSelector) {\n        // Could potentially do something better here, like scaffold out\n        // all the types and let the user delete the ones they don't want.\n        return '<selector>';\n      }\n\n      const config = {};\n      for (const field of type.fields) {\n        const {name, isRequired, configTypeKey} = field;\n        if (isRequired) {\n          config[name] = scaffoldType(configTypeKey, typeLookup);\n        }\n      }\n\n      return config;\n    case 'ArrayConfigType':\n      return [];\n    case 'MapConfigType':\n      return {};\n    case 'NullableConfigType':\n      // If a type is nullable we include it in the scaffolded config anyway\n      // by using the inner type\n      const innerType = type.typeParamKeys[0];\n      return scaffoldType(innerType, typeLookup);\n    case 'EnumConfigType':\n      // Here we just join all the potential enum values with a |. The user needs to delete\n      // all the values but the ones they want to use.\n      return type.values.map((i) => i.value).join('|');\n    case 'ScalarUnionConfigType':\n      // Here we just scaffold the scalar value. Could potentially try to\n      // scaffold the other type instead.\n      const {scalarTypeKey} = type;\n      return scaffoldType(scalarTypeKey, typeLookup);\n    case 'RegularConfigType':\n      return {\n        String: '',\n        Int: 0,\n        Float: 0.0,\n        Bool: true,\n        Any: 'AnyType',\n      }[type.key];\n    default:\n      assertUnreachable(type);\n  }\n};\n\nexport const createTypeLookup = (\n  allConfigTypes: ConfigEditorRunConfigSchemaFragment_allConfigTypes[],\n) => {\n  const typeLookup: {[key: string]: ConfigEditorRunConfigSchemaFragment_allConfigTypes} = {};\n  for (const type of allConfigTypes) {\n    typeLookup[type.key] = type;\n  }\n\n  return typeLookup;\n};\n\nexport const scaffoldPipelineConfig = (configSchema: ConfigEditorRunConfigSchemaFragment) => {\n  const {allConfigTypes, rootConfigType} = configSchema;\n  const typeLookup = createTypeLookup(allConfigTypes);\n  const config = scaffoldType(rootConfigType.key, typeLookup);\n  return config;\n};\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  ConfigEditor,\n  ConfigEditorHelpContext,\n  Group,\n  Icon,\n  SecondPanelToggle,\n  SplitPanelContainer,\n  isHelpContextEqual,\n  ConfigEditorHelp,\n  TextInput,\n} from '@dagster-io/ui';\nimport merge from 'deepmerge';\nimport uniqBy from 'lodash/uniqBy';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\nimport * as yaml from 'yaml';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {\n  IExecutionSession,\n  IExecutionSessionChanges,\n  PipelineRunTag,\n  SessionBase,\n} from '../app/ExecutionSessionStorage';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {\n  CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT,\n  CONFIG_EDITOR_VALIDATION_FRAGMENT,\n  responseToYamlValidationResult,\n} from '../configeditor/ConfigEditorUtils';\nimport {DagsterTag} from '../runs/RunTag';\nimport {PipelineSelector, RepositorySelector} from '../types/globalTypes';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  ConfigEditorConfigPicker,\n  CONFIG_PARTITION_SELECTION_QUERY,\n} from './ConfigEditorConfigPicker';\nimport {ConfigEditorModePicker} from './ConfigEditorModePicker';\nimport {useLaunchPadHooks} from './LaunchpadHooksContext';\nimport {LaunchpadType} from './LaunchpadRoot';\nimport {LoadingOverlay} from './LoadingOverlay';\nimport {OpSelector} from './OpSelector';\nimport {RunPreview, RUN_PREVIEW_VALIDATION_FRAGMENT} from './RunPreview';\nimport {SessionSettingsBar} from './SessionSettingsBar';\nimport {TagContainer, TagEditor} from './TagEditor';\nimport {scaffoldPipelineConfig} from './scaffoldType';\nimport {ConfigEditorGeneratorPipelineFragment_presets} from './types/ConfigEditorGeneratorPipelineFragment';\nimport {\n  ConfigPartitionSelectionQuery,\n  ConfigPartitionSelectionQueryVariables,\n} from './types/ConfigPartitionSelectionQuery';\nimport {LaunchpadSessionPartitionSetsFragment} from './types/LaunchpadSessionPartitionSetsFragment';\nimport {LaunchpadSessionPipelineFragment} from './types/LaunchpadSessionPipelineFragment';\nimport {\n  PipelineExecutionConfigSchemaQuery,\n  PipelineExecutionConfigSchemaQueryVariables,\n} from './types/PipelineExecutionConfigSchemaQuery';\nimport {PreviewConfigQuery, PreviewConfigQueryVariables} from './types/PreviewConfigQuery';\n\nconst YAML_SYNTAX_INVALID = `The YAML you provided couldn't be parsed. Please fix the syntax errors and try again.`;\nconst LOADING_CONFIG_FOR_PARTITION = `Generating configuration...`;\nconst LOADING_CONFIG_SCHEMA = `Loading config schema...`;\nconst LOADING_RUN_PREVIEW = `Checking config...`;\n\ntype Preset = ConfigEditorGeneratorPipelineFragment_presets;\n\ninterface LaunchpadSessionProps {\n  session: IExecutionSession;\n  onSave: (changes: IExecutionSessionChanges) => void;\n  launchpadType: LaunchpadType;\n  pipeline: LaunchpadSessionPipelineFragment;\n  partitionSets: LaunchpadSessionPartitionSetsFragment;\n  repoAddress: RepoAddress;\n  initialExecutionSessionState?: Partial<IExecutionSession>;\n}\n\ninterface ILaunchpadSessionState {\n  preview: PreviewConfigQuery | null;\n  previewLoading: boolean;\n  previewedDocument: any | null;\n  configLoading: boolean;\n  editorHelpContext: ConfigEditorHelpContext | null;\n  tagEditorOpen: boolean;\n}\n\ntype Action =\n  | {type: 'preview-loading'; payload: boolean}\n  | {\n      type: 'set-preview';\n      payload: {\n        preview: PreviewConfigQuery | null;\n        previewLoading: boolean;\n        previewedDocument: string | null;\n      };\n    }\n  | {type: 'toggle-tag-editor'; payload: boolean}\n  | {type: 'toggle-config-loading'; payload: boolean}\n  | {type: 'set-editor-help-context'; payload: ConfigEditorHelpContext | null};\n\nconst reducer = (state: ILaunchpadSessionState, action: Action) => {\n  switch (action.type) {\n    case 'preview-loading':\n      return {...state, previewLoading: action.payload};\n    case 'set-preview': {\n      const {preview, previewedDocument, previewLoading} = action.payload;\n      return {\n        ...state,\n        preview,\n        previewedDocument,\n        previewLoading,\n      };\n    }\n    case 'toggle-tag-editor':\n      return {...state, tagEditorOpen: action.payload};\n    case 'toggle-config-loading':\n      return {...state, configLoading: action.payload};\n    case 'set-editor-help-context':\n      return {...state, editorHelpContext: action.payload};\n    default:\n      return state;\n  }\n};\n\nconst LaunchButtonContainer: React.FC<{launchpadType: LaunchpadType}> = ({\n  launchpadType,\n  children,\n}) => {\n  if (launchpadType === 'asset') {\n    return (\n      <Box\n        flex={{direction: 'row'}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n        padding={{right: 12, vertical: 8}}\n      >\n        <div style={{flexGrow: 1}} />\n        {children}\n      </Box>\n    );\n  } else {\n    // job\n    return <div style={{position: 'absolute', bottom: 12, right: 12, zIndex: 1}}>{children}</div>;\n  }\n};\n\nconst initialState: ILaunchpadSessionState = {\n  preview: null,\n  previewLoading: false,\n  previewedDocument: null,\n  configLoading: false,\n  editorHelpContext: null,\n  tagEditorOpen: false,\n};\n\nconst LaunchpadSession: React.FC<LaunchpadSessionProps> = (props) => {\n  const {\n    launchpadType,\n    session: currentSession,\n    onSave,\n    partitionSets,\n    pipeline,\n    repoAddress,\n  } = props;\n\n  const client = useApolloClient();\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const mounted = React.useRef<boolean>(false);\n  const editor = React.useRef<ConfigEditor | null>(null);\n  const editorSplitPanelContainer = React.useRef<SplitPanelContainer | null>(null);\n  const previewCounter = React.useRef(0);\n\n  const {isJob} = pipeline;\n  const tagsFromSession = React.useMemo(() => currentSession.tags || [], [currentSession]);\n\n  const pipelineSelector: PipelineSelector = {\n    ...repoAddressToSelector(repoAddress),\n    pipelineName: pipeline.name,\n    solidSelection: currentSession.solidSelection || undefined,\n    assetSelection: currentSession.assetSelection?.map(({assetKey: {path}}) => ({path})),\n  };\n\n  const configResult = useQuery<\n    PipelineExecutionConfigSchemaQuery,\n    PipelineExecutionConfigSchemaQueryVariables\n  >(PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY, {\n    variables: {selector: pipelineSelector, mode: currentSession?.mode},\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n  });\n\n  const configSchemaOrError = configResult?.data?.runConfigSchemaOrError;\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  });\n\n  const onSaveSession = (changes: IExecutionSessionChanges) => {\n    onSave(changes);\n  };\n\n  const onConfigChange = (config: any) => {\n    onSaveSession({\n      runConfigYaml: config,\n    });\n  };\n\n  const onOpSelectionChange = (\n    solidSelection: string[] | null,\n    solidSelectionQuery: string | null,\n  ) => {\n    onSaveSession({\n      solidSelection,\n      solidSelectionQuery,\n    });\n  };\n\n  const onFlattenGraphsChange = (flattenGraphs: boolean) => {\n    onSaveSession({flattenGraphs});\n  };\n\n  const onModeChange = (mode: string) => {\n    onSaveSession({mode});\n  };\n\n  const onRemoveExtraPaths = (paths: string[]) => {\n    try {\n      const runConfigData = yaml.parse(sanitizeConfigYamlString(currentSession.runConfigYaml));\n      for (const path of paths) {\n        deletePropertyPath(runConfigData, path);\n      }\n      onSaveSession({runConfigYaml: yaml.stringify(runConfigData)});\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n  };\n\n  const runConfigSchema =\n    configSchemaOrError?.__typename === 'RunConfigSchema' ? configSchemaOrError : undefined;\n  const modeError =\n    configSchemaOrError?.__typename === 'ModeNotFoundError' ? configSchemaOrError : undefined;\n\n  const onScaffoldMissingConfig = () => {\n    const config = runConfigSchema ? scaffoldPipelineConfig(runConfigSchema) : {};\n    try {\n      const runConfigData = yaml.parse(sanitizeConfigYamlString(currentSession.runConfigYaml));\n      const updatedRunConfigData = merge(config, runConfigData);\n      const runConfigYaml = yaml.stringify(updatedRunConfigData);\n      onSaveSession({runConfigYaml});\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n    }\n  };\n\n  const buildExecutionVariables = () => {\n    if (!currentSession) {\n      return;\n    }\n\n    const configYamlOrEmpty = sanitizeConfigYamlString(currentSession.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n\n    return {\n      executionParams: {\n        runConfigData: configYamlOrEmpty,\n        selector: {\n          ...pipelineSelector,\n          assetSelection: currentSession.assetSelection\n            ? currentSession.assetSelection.map((a) => ({path: a.assetKey.path}))\n            : undefined,\n        },\n        mode: currentSession.mode || 'default',\n        executionMetadata: {\n          tags: uniqBy(\n            [\n              // pass solid selection query via tags\n              // clean up https://github.com/dagster-io/dagster/issues/2495\n              ...(currentSession.solidSelectionQuery\n                ? [\n                    {\n                      key: DagsterTag.SolidSelection,\n                      value: currentSession.solidSelectionQuery,\n                    },\n                  ]\n                : []),\n              ...(currentSession?.base?.['presetName']\n                ? [\n                    {\n                      key: DagsterTag.PresetName,\n                      value: currentSession?.base?.['presetName'],\n                    },\n                  ]\n                : []),\n\n              ...(currentSession.assetSelection\n                ? [\n                    {\n                      key: DagsterTag.StepSelection,\n                      value: currentSession.assetSelection.flatMap((o) => o.opNames).join(','),\n                    },\n                  ]\n                : []),\n\n              ...tagsFromSession.map(onlyKeyAndValue),\n\n              // note, we apply these last - uniqBy uses the first value it sees for\n              // each key, so these can be overridden in the session\n              ...pipeline.tags.map(onlyKeyAndValue),\n            ],\n            (tag) => tag.key,\n          ),\n        },\n      },\n    };\n  };\n\n  const saveTags = (tags: PipelineRunTag[]) => {\n    const tagDict = {};\n    const toSave: PipelineRunTag[] = [];\n    tags.forEach((tag: PipelineRunTag) => {\n      if (!(tag.key in tagDict)) {\n        tagDict[tag.key] = tag.value;\n        toSave.push(tag);\n      }\n    });\n    onSaveSession({tags: toSave});\n  };\n\n  const checkConfig = async (configYaml: string) => {\n    // Another request to preview a newer document may be made while this request\n    // is in flight, in which case completion of this async method should not set loading=false.\n    previewCounter.current += 1;\n    const currentPreviewCount = previewCounter.current;\n    const configYamlOrEmpty = sanitizeConfigYamlString(configYaml);\n\n    dispatch({type: 'preview-loading', payload: true});\n\n    const {data} = await client.query<PreviewConfigQuery, PreviewConfigQueryVariables>({\n      fetchPolicy: 'no-cache',\n      query: PREVIEW_CONFIG_QUERY,\n      variables: {\n        runConfigData: configYamlOrEmpty,\n        pipeline: pipelineSelector,\n        mode: currentSession.mode || 'default',\n      },\n    });\n\n    if (mounted.current) {\n      const isLatestRequest = currentPreviewCount === previewCounter.current;\n      dispatch({\n        type: 'set-preview',\n        payload: {\n          preview: data,\n          previewedDocument: configYamlOrEmpty,\n          previewLoading: isLatestRequest ? false : state.previewLoading,\n        },\n      });\n    }\n\n    return responseToYamlValidationResult(configYamlOrEmpty, data.isPipelineConfigValid);\n  };\n\n  const tagsApplyingNewBaseTags = (newBaseTags: PipelineRunTag[]) => {\n    // If you choose a new base (preset or partition), we want to make a best-effort to preserve\n    // the tags you've manually typed in, but remove:\n    // - Tags that were in your previous base and are unchanged\n    // - Tags that are specified in the new base\n    const preservedUserTags = currentSession.base\n      ? tagsFromSession.filter(\n          (t) =>\n            currentSession.base?.tags &&\n            !currentSession.base?.tags.some((bt) => bt.key === t.key && bt.value === t.value) &&\n            !newBaseTags.some((bt) => bt.key === t.key),\n        )\n      : [];\n\n    return [...newBaseTags, ...preservedUserTags];\n  };\n\n  const onSelectPreset = async (preset: Preset) => {\n    const newBaseTags = preset.tags.map(onlyKeyAndValue);\n\n    onSaveSession({\n      base: {presetName: preset.name, tags: newBaseTags},\n      name: preset.name,\n      runConfigYaml: preset.runConfigYaml || '',\n      solidSelection: preset.solidSelection,\n      solidSelectionQuery: preset.solidSelection === null ? '*' : preset.solidSelection.join(','),\n      mode: preset.mode,\n      tags: tagsApplyingNewBaseTags(newBaseTags),\n      needsRefresh: false,\n    });\n  };\n\n  const onSelectPartition = async (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n    sessionSolidSelection?: string[] | null,\n  ) => {\n    onConfigLoading();\n    try {\n      const {base} = currentSession;\n      const {data} = await client.query<\n        ConfigPartitionSelectionQuery,\n        ConfigPartitionSelectionQueryVariables\n      >({\n        query: CONFIG_PARTITION_SELECTION_QUERY,\n        variables: {repositorySelector, partitionSetName, partitionName},\n      });\n\n      if (\n        !data ||\n        !data.partitionSetOrError ||\n        data.partitionSetOrError.__typename !== 'PartitionSet' ||\n        !data.partitionSetOrError.partition\n      ) {\n        onConfigLoaded();\n        return;\n      }\n\n      const {partition} = data.partitionSetOrError;\n\n      let newBaseTags: {key: string; value: string}[] = [];\n      if (partition.tagsOrError.__typename === 'PythonError') {\n        showCustomAlert({\n          body: <PythonErrorInfo error={partition.tagsOrError} />,\n        });\n      } else {\n        newBaseTags = partition.tagsOrError.results.map(onlyKeyAndValue);\n      }\n\n      let runConfigYaml;\n      if (partition.runConfigOrError.__typename === 'PythonError') {\n        runConfigYaml = '';\n        showCustomAlert({\n          body: <PythonErrorInfo error={partition.runConfigOrError} />,\n        });\n      } else {\n        runConfigYaml = partition.runConfigOrError.yaml;\n      }\n\n      const solidSelection = sessionSolidSelection || partition.solidSelection;\n\n      onSaveSession({\n        name: partition.name,\n        base: Object.assign({}, base, {partitionName: partition.name, tags: newBaseTags}),\n        runConfigYaml,\n        solidSelection,\n        solidSelectionQuery: solidSelection === null ? '*' : solidSelection.join(','),\n        mode: partition.mode,\n        tags: tagsApplyingNewBaseTags(newBaseTags),\n        needsRefresh: false,\n      });\n    } catch {}\n    onConfigLoaded();\n  };\n\n  const onRefreshConfig = async (base: SessionBase) => {\n    // Handle preset-based configuration.\n    if ('presetName' in base) {\n      const {presetName} = base;\n      const matchingPreset = pipeline.presets.find((preset) => preset.name === presetName);\n      if (matchingPreset) {\n        onSelectPreset({\n          ...matchingPreset,\n          solidSelection: currentSession.solidSelection || matchingPreset.solidSelection,\n        });\n      }\n      return;\n    }\n\n    // Otherwise, handle partition-based configuration.\n    const {partitionName, partitionsSetName} = base;\n    const repositorySelector = repoAddressToSelector(repoAddress);\n\n    // It is expected that `partitionName` is set here, since we shouldn't be showing the\n    // button at all otherwise.\n    if (partitionName) {\n      onConfigLoading();\n      await onSelectPartition(\n        repositorySelector,\n        partitionsSetName,\n        partitionName,\n        currentSession.solidSelection,\n      );\n      onConfigLoaded();\n    }\n  };\n\n  const onDismissRefreshWarning = () => {\n    onSaveSession({needsRefresh: false});\n  };\n\n  const openTagEditor = () => dispatch({type: 'toggle-tag-editor', payload: true});\n  const closeTagEditor = () => dispatch({type: 'toggle-tag-editor', payload: false});\n\n  const onConfigLoading = () => dispatch({type: 'toggle-config-loading', payload: true});\n  const onConfigLoaded = () => dispatch({type: 'toggle-config-loading', payload: false});\n\n  const {\n    preview,\n    previewLoading,\n    previewedDocument,\n    configLoading,\n    editorHelpContext,\n    tagEditorOpen,\n  } = state;\n\n  const refreshableSessionBase = React.useMemo(() => {\n    const {base, needsRefresh} = currentSession;\n    if (\n      base &&\n      needsRefresh &&\n      ('presetName' in base || (base.partitionsSetName && base.partitionName))\n    ) {\n      return base;\n    }\n    return null;\n  }, [currentSession]);\n\n  let launchButtonTitle: string | undefined;\n  if (launchpadType === 'asset') {\n    launchButtonTitle = 'Materialize';\n  }\n\n  let launchButtonWarning: string | undefined;\n  if (\n    partitionSets.results.length &&\n    currentSession.base &&\n    'partitionsSetName' in currentSession.base &&\n    !currentSession.base.partitionName\n  ) {\n    launchButtonWarning =\n      'This job is partitioned. Are you sure you want to launch' +\n      ' a run without a partition specified?';\n  }\n\n  const {LaunchRootExecutionButton} = useLaunchPadHooks();\n\n  return (\n    <>\n      <SplitPanelContainer\n        axis=\"vertical\"\n        identifier=\"execution\"\n        firstMinSize={100}\n        firstInitialPercent={75}\n        first={\n          <>\n            <LoadingOverlay isLoading={configLoading} message={LOADING_CONFIG_FOR_PARTITION} />\n            <SessionSettingsBar>\n              <ConfigEditorConfigPicker\n                pipeline={pipeline}\n                partitionSets={partitionSets.results}\n                base={currentSession.base}\n                onSaveSession={onSaveSession}\n                onSelectPreset={onSelectPreset}\n                onSelectPartition={onSelectPartition}\n                repoAddress={repoAddress}\n              />\n              <SessionSettingsSpacer />\n              {launchpadType === 'asset' ? (\n                <TextInput\n                  readOnly\n                  value={\n                    currentSession.assetSelection\n                      ? currentSession.assetSelection\n                          .map((a) => tokenForAssetKey(a.assetKey))\n                          .join(', ')\n                      : '*'\n                  }\n                />\n              ) : (\n                <OpSelector\n                  serverProvidedSubsetError={\n                    preview?.isPipelineConfigValid.__typename === 'InvalidSubsetError'\n                      ? preview.isPipelineConfigValid\n                      : undefined\n                  }\n                  pipelineName={pipeline.name}\n                  value={currentSession.solidSelection || null}\n                  query={currentSession.solidSelectionQuery || null}\n                  onChange={onOpSelectionChange}\n                  flattenGraphs={currentSession.flattenGraphs}\n                  onFlattenGraphsChange={onFlattenGraphsChange}\n                  repoAddress={repoAddress}\n                />\n              )}\n\n              {isJob ? (\n                <span />\n              ) : (\n                <>\n                  <SessionSettingsSpacer />\n                  <ConfigEditorModePicker\n                    modes={pipeline.modes}\n                    modeError={modeError}\n                    onModeChange={onModeChange}\n                    modeName={currentSession.mode}\n                  />\n                </>\n              )}\n              <TagEditor\n                tagsFromDefinition={pipeline.tags}\n                tagsFromSession={tagsFromSession}\n                onChange={saveTags}\n                open={tagEditorOpen}\n                onRequestClose={closeTagEditor}\n              />\n              <div style={{flex: 1}} />\n              <ShortcutHandler\n                shortcutLabel=\"⌥T\"\n                shortcutFilter={(e) => e.code === 'KeyT' && e.altKey}\n                onShortcut={openTagEditor}\n              >\n                <Button onClick={openTagEditor} icon={<Icon name=\"edit\" />}>\n                  Edit tags\n                </Button>\n              </ShortcutHandler>\n              <SessionSettingsSpacer />\n              <SecondPanelToggle axis=\"horizontal\" container={editorSplitPanelContainer} />\n            </SessionSettingsBar>\n            {pipeline.tags.length || tagsFromSession.length ? (\n              <Box\n                padding={{vertical: 8, left: 12, right: 0}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray200}}\n              >\n                <TagContainer\n                  tagsFromDefinition={pipeline.tags}\n                  tagsFromSession={tagsFromSession}\n                  onRequestEdit={openTagEditor}\n                />\n              </Box>\n            ) : null}\n            {refreshableSessionBase ? (\n              <Box\n                padding={{vertical: 8, horizontal: 12}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray200}}\n              >\n                <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                  <Icon name=\"warning\" color={Colors.Yellow500} />\n                  <div>\n                    {repoAddressAsHumanString(repoAddress)} has been manually refreshed, and this\n                    configuration may now be out of date.\n                  </div>\n                  <Button\n                    intent=\"primary\"\n                    onClick={() => onRefreshConfig(refreshableSessionBase)}\n                    disabled={state.configLoading}\n                  >\n                    Refresh config\n                  </Button>\n                  <Button onClick={onDismissRefreshWarning}>Dismiss</Button>\n                </Group>\n              </Box>\n            ) : null}\n            <SplitPanelContainer\n              ref={editorSplitPanelContainer}\n              axis=\"horizontal\"\n              identifier=\"execution-editor\"\n              firstMinSize={100}\n              firstInitialPercent={70}\n              first={\n                <ConfigEditor\n                  ref={editor}\n                  readOnly={false}\n                  configSchema={runConfigSchema}\n                  configCode={currentSession.runConfigYaml}\n                  onConfigChange={onConfigChange}\n                  onHelpContextChange={(next) => {\n                    if (!isHelpContextEqual(editorHelpContext, next)) {\n                      dispatch({type: 'set-editor-help-context', payload: next});\n                    }\n                  }}\n                  checkConfig={checkConfig}\n                />\n              }\n              second={\n                <ConfigEditorHelp\n                  context={editorHelpContext}\n                  allInnerTypes={runConfigSchema?.allConfigTypes || []}\n                />\n              }\n            />\n          </>\n        }\n        second={\n          <>\n            <LoadingOverlay\n              isLoading={previewLoading}\n              message={!runConfigSchema ? LOADING_CONFIG_SCHEMA : LOADING_RUN_PREVIEW}\n            />\n            <RunPreview\n              launchpadType={launchpadType}\n              document={previewedDocument}\n              validation={preview ? preview.isPipelineConfigValid : null}\n              solidSelection={currentSession.solidSelection}\n              runConfigSchema={runConfigSchema}\n              onHighlightPath={(path) => editor.current?.moveCursorToPath(path)}\n              onRemoveExtraPaths={(paths) => onRemoveExtraPaths(paths)}\n              onScaffoldMissingConfig={onScaffoldMissingConfig}\n            />\n          </>\n        }\n      />\n\n      <LaunchButtonContainer launchpadType={launchpadType}>\n        <LaunchRootExecutionButton\n          title={launchButtonTitle}\n          warning={launchButtonWarning}\n          pipelineName={pipeline.name}\n          getVariables={buildExecutionVariables}\n          disabled={preview?.isPipelineConfigValid?.__typename !== 'PipelineConfigValidationValid'}\n          behavior=\"open\"\n        />\n      </LaunchButtonContainer>\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default LaunchpadSession;\n\n// This helper removes __typename, which prevents tags from being passed back to GraphQL\nconst onlyKeyAndValue = ({key, value}: {key: string; value: string}) => ({key, value});\n\nconst deletePropertyPath = (obj: any, path: string) => {\n  const parts = path.split('.');\n\n  // Here we iterate through the parts of the path to get to\n  // the second to last nested object. This is so we can call `delete` using\n  // this object and the last part of the path.\n  for (let i = 0; i < parts.length - 1; i++) {\n    obj = obj[parts[i]];\n    if (typeof obj === 'undefined') {\n      return;\n    }\n  }\n\n  const lastKey = parts.pop();\n  if (lastKey) {\n    delete obj[lastKey];\n  }\n};\n\nconst sanitizeConfigYamlString = (yamlString: string) => (yamlString || '').trim() || '{}';\n\nconst PREVIEW_CONFIG_QUERY = gql`\n  query PreviewConfigQuery(\n    $pipeline: PipelineSelector!\n    $runConfigData: RunConfigData!\n    $mode: String!\n  ) {\n    isPipelineConfigValid(pipeline: $pipeline, runConfigData: $runConfigData, mode: $mode) {\n      ...ConfigEditorValidationFragment\n      ...RunPreviewValidationFragment\n    }\n  }\n  ${RUN_PREVIEW_VALIDATION_FRAGMENT}\n  ${CONFIG_EDITOR_VALIDATION_FRAGMENT}\n`;\n\nconst SessionSettingsSpacer = styled.div`\n  width: 5px;\n`;\n\nconst RUN_CONFIG_SCHEMA_OR_ERROR_FRAGMENT = gql`\n  fragment LaunchpadSessionRunConfigSchemaFragment on RunConfigSchemaOrError {\n    __typename\n    ... on RunConfigSchema {\n      ...ConfigEditorRunConfigSchemaFragment\n    }\n    ... on ModeNotFoundError {\n      message\n    }\n  }\n  ${CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT}\n`;\n\nexport const PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY = gql`\n  query PipelineExecutionConfigSchemaQuery($selector: PipelineSelector!, $mode: String) {\n    runConfigSchemaOrError(selector: $selector, mode: $mode) {\n      ...LaunchpadSessionRunConfigSchemaFragment\n    }\n  }\n\n  ${RUN_CONFIG_SCHEMA_OR_ERROR_FRAGMENT}\n`;\n","import {NonIdealState, NonIdealStateProps, Spinner, SplitPanelContainer} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {SessionSettingsBar} from './SessionSettingsBar';\n\nexport const LaunchpadSessionError: React.FC<NonIdealStateProps> = (props) => (\n  <SplitPanelContainer\n    axis=\"vertical\"\n    identifier=\"execution\"\n    firstInitialPercent={75}\n    firstMinSize={100}\n    first={\n      <>\n        <SessionSettingsBar>\n          <Spinner purpose=\"section\" />\n        </SessionSettingsBar>\n        <NonIdealState {...props} />\n      </>\n    }\n    second={<div />}\n  />\n);\n","import {SplitPanelContainer} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LoadingOverlay} from './LoadingOverlay';\nimport {SessionSettingsBar} from './SessionSettingsBar';\n\nconst LOADING_PIPELINE = `Loading pipeline and partition sets...`;\n\nexport const LaunchpadSessionLoading = () => (\n  <SplitPanelContainer\n    axis=\"vertical\"\n    identifier=\"execution\"\n    firstInitialPercent={75}\n    firstMinSize={100}\n    first={\n      <>\n        <LoadingOverlay isLoading message={LOADING_PIPELINE} />\n        <SessionSettingsBar />\n      </>\n    }\n    second={<LoadingOverlay isLoading message=\"Loading pipeline and partition sets...\" />}\n  />\n);\n","import {Group, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const LoadingOverlay: React.FC<{\n  isLoading: boolean;\n  message: string;\n}> = ({isLoading, message}) => (\n  <LoadingOverlayContainer isLoading={isLoading}>\n    <Group direction=\"row\" spacing={8} alignItems=\"center\">\n      <Spinner purpose=\"body-text\" />\n      <div>{message}</div>\n    </Group>\n  </LoadingOverlayContainer>\n);\n\nconst LoadingOverlayContainer = styled.div<{isLoading: boolean}>`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background-color: #fff;\n  z-index: 20;\n  display: ${({isLoading}) => (!isLoading ? 'none' : 'flex')};\n  align-items: center;\n  justify-content: center;\n  opacity: ${({isLoading}) => (isLoading ? '0.7' : '0')};\n  transition: opacity 150ms linear;\n  transition-delay: 300ms;\n`;\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const SessionSettingsBar = styled.div`\n  color: white;\n  display: flex;\n  position: relative;\n  border-bottom: 1px solid ${Colors.Gray200};\n  background: ${Colors.White};\n  align-items: center;\n  height: 47px;\n  padding: 8px 10px;\n`;\n","import {\n  Box,\n  Button,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {RunTag} from '../runs/RunTag';\n\ninterface ITagEditorProps {\n  tagsFromDefinition?: PipelineRunTag[];\n  tagsFromSession: PipelineRunTag[];\n  open: boolean;\n  onChange: (tags: PipelineRunTag[]) => void;\n  onRequestClose: () => void;\n}\n\ninterface ITagContainerProps {\n  tagsFromDefinition?: PipelineRunTag[];\n  tagsFromSession: PipelineRunTag[];\n  onRequestEdit: () => void;\n}\n\nexport const TagEditor: React.FC<ITagEditorProps> = ({\n  tagsFromDefinition = [],\n  tagsFromSession = [],\n  open,\n  onChange,\n  onRequestClose,\n}) => {\n  const [editState, setEditState] = React.useState(() =>\n    tagsFromSession.length ? tagsFromSession : [{key: '', value: ''}],\n  );\n\n  // Reset the edit state when you close and re-open the modal, or when\n  // tagsFromSession change while the modal is closed.\n  React.useEffect(() => {\n    if (!open) {\n      setEditState(tagsFromSession.length ? tagsFromSession : [{key: '', value: ''}]);\n    }\n  }, [tagsFromSession, open]);\n\n  const toSave: PipelineRunTag[] = editState\n    .map((tag: PipelineRunTag) => ({\n      key: tag.key.trim(),\n      value: tag.value.trim(),\n    }))\n    .filter((tag) => tag.key && tag.value);\n  const toError = editState\n    .map((tag: PipelineRunTag) => ({\n      key: tag.key.trim(),\n      value: tag.value.trim(),\n    }))\n    .filter((tag) => !tag.key !== !tag.value);\n\n  const onSave = () => {\n    if (!toError.length) {\n      onChange(toSave);\n      onRequestClose();\n    }\n  };\n\n  const disabled = editState === tagsFromSession || !!toError.length;\n\n  const onTagEdit = (key: string, value: string, idx: number) => {\n    setEditState((current) => [...current.slice(0, idx), {key, value}, ...current.slice(idx + 1)]);\n  };\n\n  const onRemove = (idx: number) => {\n    setEditState((current) => {\n      if (idx === 0 && current.length === 1) {\n        // If we're deleting the only item, just wipe it out.\n        return [{key: '', value: ''}];\n      }\n      return [...current.slice(0, idx), ...current.slice(idx + 1)];\n    });\n  };\n\n  const addTagEntry = () => {\n    setEditState((current) => [...current, {key: '', value: ''}]);\n  };\n\n  return (\n    <Dialog\n      icon=\"info\"\n      onClose={onRequestClose}\n      style={{minWidth: 700}}\n      title=\"Add tags to run\"\n      isOpen={open}\n    >\n      <DialogBody>\n        <Group spacing={16} direction=\"column\">\n          {tagsFromDefinition.length ? (\n            <Group direction=\"column\" spacing={8}>\n              <Box margin={{left: 2}} style={{fontSize: '13px', fontWeight: 500}}>\n                Tags from definition:\n              </Box>\n              <TagList>\n                {tagsFromDefinition.map((tag, idx) => {\n                  const {key} = tag;\n                  const anyOverride = editState.some((editable) => editable.key === key);\n                  if (anyOverride) {\n                    return (\n                      <Tooltip key={key} content=\"Overriden by custom tag value\" placement=\"top\">\n                        <span style={{opacity: 0.2}}>\n                          <RunTag tag={tag} key={idx} />\n                        </span>\n                      </Tooltip>\n                    );\n                  }\n                  return <RunTag tag={tag} key={key} />;\n                })}\n              </TagList>\n            </Group>\n          ) : null}\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>Custom tags:</div>\n            <Box flex={{direction: 'column', gap: 8}}>\n              {editState.map((tag, idx) => {\n                const {key, value} = tag;\n                return (\n                  <div\n                    key={idx}\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'row',\n                      gap: 8,\n                    }}\n                  >\n                    <TextInput\n                      placeholder=\"Tag Key\"\n                      value={key}\n                      onChange={(e) => onTagEdit(e.target.value, value, idx)}\n                    />\n                    <TextInput\n                      placeholder=\"Tag Value\"\n                      value={value}\n                      onChange={(e) => onTagEdit(key, e.target.value, idx)}\n                    />\n                    <Button\n                      disabled={editState.length === 1 && !key.trim() && !value.trim()}\n                      onClick={() => onRemove(idx)}\n                      icon={<Icon name=\"delete\" />}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                );\n              })}\n            </Box>\n            <Box margin={{left: 2}} flex={{direction: 'row'}}>\n              <Button onClick={addTagEntry} icon={<Icon name=\"add_circle\" />}>\n                Add custom tag\n              </Button>\n            </Box>\n          </Box>\n        </Group>\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onRequestClose}>Cancel</Button>\n        <ShortcutHandler\n          shortcutLabel=\"⌥Enter\"\n          shortcutFilter={(e) => e.code === 'Enter' && e.altKey}\n          onShortcut={onSave}\n        >\n          <Button intent=\"primary\" onClick={onSave} disabled={disabled}>\n            Apply\n          </Button>\n        </ShortcutHandler>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const TagContainer = ({tagsFromSession, tagsFromDefinition}: ITagContainerProps) => {\n  return (\n    <Container>\n      <TagList>\n        {tagsFromDefinition\n          ? tagsFromDefinition.map((tag, idx) => {\n              const {key} = tag;\n              const anyOverride = tagsFromSession.some((sessionTag) => sessionTag.key === key);\n              if (anyOverride) {\n                return (\n                  <Tooltip key={key} content=\"Overriden by custom tag value\" placement=\"top\">\n                    <span style={{opacity: 0.2}}>\n                      <RunTag tag={tag} key={idx} />\n                    </span>\n                  </Tooltip>\n                );\n              }\n              return <RunTag tag={tag} key={idx} />;\n            })\n          : undefined}\n        {tagsFromSession.map((tag, idx) => (\n          <RunTag tag={tag} key={idx} />\n        ))}\n      </TagList>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  align-items: flex-start;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst TagList = styled.div`\n  display: flex;\n  flex: 1;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n","import {Icon, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {ClearButton} from '../ui/ClearButton';\n\nimport {partitionsToText, textToPartitions} from './SpanRepresentation';\n\nexport const PartitionRangeInput: React.FC<{\n  value: string[];\n  onChange: (partitionNames: string[]) => void;\n  partitionKeys: string[];\n  isTimeseries: boolean;\n}> = ({value, onChange, partitionKeys, isTimeseries}) => {\n  const [valueString, setValueString] = React.useState('');\n  const partitionNameJSON = React.useMemo(() => JSON.stringify(partitionKeys), [partitionKeys]);\n\n  React.useEffect(() => {\n    const partitionNameArr = JSON.parse(partitionNameJSON);\n    setValueString(isTimeseries ? partitionsToText(value, partitionNameArr) : value.join(', '));\n  }, [value, partitionNameJSON, isTimeseries]);\n\n  const placeholder = React.useMemo(() => {\n    return placeholderForPartitions(partitionKeys, isTimeseries);\n  }, [partitionKeys, isTimeseries]);\n\n  const tryCommit = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    try {\n      onChange(textToPartitions(valueString, partitionKeys));\n    } catch (err: any) {\n      e.preventDefault();\n      showCustomAlert({body: err.message});\n    }\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      tryCommit(e);\n    }\n  };\n\n  return (\n    <TextInput\n      placeholder={placeholder}\n      value={valueString}\n      style={{display: 'flex', width: '100%', flex: 1, flexGrow: 1}}\n      onChange={(e) => setValueString(e.currentTarget.value)}\n      onKeyDown={onKeyDown}\n      onBlur={tryCommit}\n      rightElement={\n        <ClearButton\n          style={{display: valueString.length ? 'initial' : 'none'}}\n          onClick={() => onChange([])}\n        >\n          <Icon name=\"cancel\" />\n        </ClearButton>\n      }\n    />\n  );\n};\nexport function placeholderForPartitions(names: string[], isTimeseries: boolean) {\n  if (names.length === 0) {\n    return '';\n  }\n  if (names.length < 4 || !isTimeseries) {\n    return `ex: ${names[0]}, ${names[1]}`;\n  }\n  return `ex: ${names[0]}, ${names[1]}, [${names[2]}...${names[names.length - 1]}]`;\n}\n","import {Box, Button} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {isTimeseriesPartition} from '../assets/MultipartitioningSupport';\n\nimport {PartitionRangeInput} from './PartitionRangeInput';\nimport {PartitionState, PartitionStatus} from './PartitionStatus';\n\nexport const PartitionRangeWizard: React.FC<{\n  selected: string[];\n  setSelected: (selected: string[]) => void;\n  partitionKeys: string[];\n  partitionStateForKey: (partitionKey: string, partitionIdx: number) => PartitionState;\n}> = ({selected, setSelected, partitionKeys, partitionStateForKey}) => {\n  const isTimeseries = isTimeseriesPartition(partitionKeys[0]);\n\n  return (\n    <>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 8}} padding={{vertical: 4}}>\n        <Box flex={{direction: 'column'}} style={{flex: 1}}>\n          <PartitionRangeInput\n            value={selected}\n            partitionKeys={partitionKeys}\n            onChange={setSelected}\n            isTimeseries={isTimeseries}\n          />\n        </Box>\n        {isTimeseries && (\n          <Button small={true} onClick={() => setSelected(partitionKeys.slice(-1))}>\n            Latest\n          </Button>\n        )}\n        <Button small={true} onClick={() => setSelected(partitionKeys)}>\n          All\n        </Button>\n      </Box>\n      <Box margin={{bottom: 8}}>\n        <PartitionStatus\n          partitionNames={partitionKeys}\n          partitionStateForKey={partitionStateForKey}\n          splitPartitions={!isTimeseries}\n          selected={selected}\n          onSelect={setSelected}\n        />\n      </Box>\n    </>\n  );\n};\n","import {Box, Checkbox} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PartitionState, partitionStatusToText} from './PartitionStatus';\n\nexport const PartitionStateCheckboxes: React.FC<{\n  partitionKeysForCounts: {partitionKey: string; state: PartitionState}[];\n  value: PartitionState[];\n  allowed: PartitionState[];\n  onChange: (selected: PartitionState[]) => void;\n}> = ({partitionKeysForCounts, value, onChange, allowed}) => {\n  const byState = React.useMemo(() => {\n    const result: {[state: string]: number} = {\n      [PartitionState.SUCCESS]: 0,\n      [PartitionState.SUCCESS_MISSING]: 0,\n      [PartitionState.MISSING]: 0,\n      [PartitionState.FAILURE]: 0,\n      [PartitionState.QUEUED]: 0,\n      [PartitionState.STARTED]: 0,\n    };\n    for (const key of partitionKeysForCounts) {\n      result[key.state] = (result[key.state] || 0) + 1;\n    }\n    return result;\n  }, [partitionKeysForCounts]);\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 12}} style={{overflow: 'hidden'}}>\n      {allowed.map((state) => (\n        <Checkbox\n          key={state}\n          style={{marginBottom: 0, marginLeft: 10, minWidth: 200}}\n          checked={value.includes(state)}\n          label={`${partitionStatusToText(state)} (${byState[state]})`}\n          onChange={() =>\n            onChange(value.includes(state) ? value.filter((v) => v !== state) : [...value, state])\n          }\n        />\n      ))}\n    </Box>\n  );\n};\n","import {NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  isGraph: boolean;\n  repoAddress?: RepoAddress;\n  result:\n    | {\n        __typename: 'PipelineSnapshotNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PipelineNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'RepositoryNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PythonError';\n        message: string;\n      };\n}\n\nexport const NonIdealPipelineQueryResult: React.FC<Props> = ({isGraph, repoAddress, result}) => {\n  if (result.__typename === 'PipelineSnapshotNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph snapshot not found' : 'Pipeline snapshot not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PipelineNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph not found' : 'Pipeline not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'RepositoryNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={`${repoAddress ? repoAddressAsHumanString(repoAddress) : 'Definitions'} not found`}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PythonError') {\n    return <NonIdealState icon=\"error\" title=\"Query error\" description={result.message} />;\n  }\n  return <span />;\n};\n","import * as React from 'react';\n\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {ExplorerPath} from './PipelinePathUtils';\n\nexport const useJobTitle = (explorerPath: ExplorerPath, isJob: boolean) => {\n  const {pipelineName} = explorerPath;\n\n  const value = React.useMemo(() => {\n    if (isJob) {\n      return `Job: ${pipelineName}`;\n    }\n    return `Pipeline: ${pipelineName}`;\n  }, [isJob, pipelineName]);\n\n  useDocumentTitle(value);\n};\n","import {Colors, IconWrapper} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const ClearButton = styled.button`\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  margin: 0 -2px 0 0;\n  padding: 2px;\n\n  ${IconWrapper} {\n    background-color: ${Colors.Gray400};\n    transition: background-color 100ms linear;\n  }\n\n  :hover ${IconWrapper}, :focus ${IconWrapper} {\n    background-color: ${Colors.Gray700};\n  }\n\n  :active ${IconWrapper} {\n    background-color: ${Colors.Dark};\n  }\n\n  :focus {\n    outline: none;\n  }\n`;\n","import LRUCache from 'lru-cache';\nimport remark from 'remark';\nimport gfm from 'remark-gfm';\nimport toPlainText from 'remark-plain-text';\n\nconst Remark = remark()\n  .use(gfm)\n  .use(toPlainText as any);\nconst markdownCache = new LRUCache<string, string>({max: 500});\nexport const markdownToPlaintext = (md: string) => {\n  // Compile the Markdown file to plain text:\n  const cached = markdownCache.get(md);\n  if (cached) {\n    return cached;\n  }\n\n  // Clean up escaping left behind.\n  const str = Remark.processSync(md).toString().replaceAll(/\\\\/g, '').trim();\n  markdownCache.set(md, str);\n\n  return str;\n};\n","import {FontFamily} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const Version = styled.div`\n  font-family: ${FontFamily.monospace};\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","/* eslint-disable no-restricted-imports */\nimport {IPopoverProps} from '@blueprintjs/core';\nimport {Select as BlueprintSelect, SelectProps} from '@blueprintjs/select';\n/* eslint-enable no-restricted-imports */\nimport deepmerge from 'deepmerge';\nimport * as React from 'react';\n\nexport const Select = <T,>(props: React.PropsWithChildren<SelectProps<T>>) => {\n  const popoverProps: Partial<IPopoverProps> = {\n    ...props.popoverProps,\n    minimal: true,\n    modifiers: deepmerge(\n      {offset: {enabled: true, offset: '0, 8px'}},\n      props.popoverProps?.modifiers || {},\n    ),\n    popoverClassName: `dagit-popover ${props.popoverProps?.className || ''}`,\n  };\n\n  return <BlueprintSelect {...props} popoverProps={popoverProps} />;\n};\n"],"names":["AssetEdges","edges","highlighted","strokeWidth","baseColor","Colors","AssetEdgeSet","color","filter","fromId","toId","React","id","btoa","viewBox","refX","refY","markerUnits","markerWidth","orient","d","fill","map","edge","idx","buildSVGPath","source","from","target","to","stroke","markerEnd","LaunchAssetObservationButton","assetKeys","preferredJobName","intent","canLaunchPipelineExecution","usePermissions","launchWithTelemetry","useLaunchWithTelemetry","useLaunchPadHooks","type","state","setState","client","useApolloClient","count","length","label","enabled","Tooltip","content","Button","icon","Icon","name","disabled","onClick","e","query","LAUNCH_ASSET_LOADER_QUERY","variables","path","result","data","assetNodeDefinitionCollisions","showCustomAlert","buildAssetCollisionsAlert","assets","assetNodes","forceLaunchpad","shiftKey","stateForObservingAssets","next","title","body","error","executionParams","Spinner","purpose","_client","_forceLaunchpad","some","x","isSource","isObservable","repoAddress","buildRepoAddress","repository","location","repoName","repoAddressAsHumanString","every","a","jobName","getCommonJob","executionParamsForAssetJob","AssetGraphJobSidebar","pipelineSelector","queryResult","useQuery","ASSET_GRAPH_JOB_SIDEBAR","fetchPolicy","partialRefetch","repositoryName","repositoryLocationName","Loading","pipelineSnapshotOrError","__typename","NonIdealPipelineQueryResult","isGraph","SidebarContainerOverview","S","container","gql","SIDEBAR_ROOT_CONTAINER_FRAGMENT","PYTHON_ERROR_FRAGMENT","LatestMaterializationMetadata","latest","liveData","latestRun","runOrError","repositoryOrigin","repo","useRepository","Box","padding","top","bottom","NonIdealState","description","latestEvent","latestAssetLineage","assetLineage","MetadataTable","runId","timestamp","titleForRun","isHiddenAssetGroupJob","pipelineName","left","PipelineReference","showIcon","pipelineHrefContext","snapshotId","pipelineSnapshotId","isJob","isThisThingAJob","Group","direction","spacing","alignItems","linkToRunEvent","stepKey","partition","flex","gap","Timestamp","ms","Number","StaleTag","AssetLineageElements","elements","metadataEntries","entry","MetadataEntry","expandSmallValues","repoLocation","styled","Table","METADATA_ENTRY_FRAGMENT","AssetSidebarActivitySummary","assetKey","assetLastMaterializedAt","assetHasDefinedPartitions","useRecentAssetEvents","materializations","observations","loadedPartitionKeys","loading","refetch","xAxis","grouped","useGroupedEvents","vertical","FailedRunsSinceMaterializationBanner","border","side","width","CurrentRunsBanner","freshnessPolicy","margin","horizontal","CurrentMinutesLateTag","freshnessPolicyDescription","style","maxWidth","overflowX","fontSize","AssetMaterializationGraphs","asSidebarSection","groups","columnCount","SidebarAssetInfo","assetNode","partitionHealthData","usePartitionHealthData","SIDEBAR_ASSET_QUERY","lastMaterialization","asset","assetNodeOrError","Header","metadataForAssetNode","assetMetadata","assetType","hasAssetMetadata","assetConfigSchema","configField","configType","OpMetadataPlugin","op","metadata","pluginForMetadata","opName","AssetDefinedInMultipleReposNotice","loadedFromRepo","padded","partitionDefinition","borderBottom","nodeDependsOnSelf","DependsOnSelfBanner","SidebarComponent","Description","definition","opVersion","Version","ConfigTypeSchema","typesInScope","recursiveConfigTypes","AssetMetadata","TypeSidebarSection","PartitionHealthSummary","DagsterType","displayName","displayNameForAssetKey","right","marginBottom","display","justifyContent","flexWrap","opacity","size","undefined","AssetCatalogLink","assetDetailsPathForKey","Link","SIDEBAR_ASSET_FRAGMENT","ASSET_NODE_CONFIG_FRAGMENT","ASSET_NODE_OP_METADATA_FRAGMENT","ASSET_FOR_NAVIGATION_QUERY","MINIMAL_SCALE","GROUPS_ONLY_SCALE","AssetGraphExplorer","props","useAssetGraphData","explorerPath","opsQuery","fetchOptions","fetchResult","assetGraphData","graphQueryItems","graphAssetKeys","allAssetKeys","applyingEmptyDefault","useLiveDataForAssetKeys","liveDataByNode","liveDataRefreshState","runWatchers","allowStaleData","graphHasCycles","AssetGraphExplorerWithData","options","setOptions","onChangeExplorerPath","onNavigateToSourceAssetNode","findAssetLocation","apollo","key","assetOrError","def","opNames","jobNames","find","groupName","useFindAssetLocation","setHighlighted","selectedAssetValues","split","selectedGraphNodes","Object","values","nodes","node","includes","tokenForAssetKey","lastSelectedNode","useAssetLayout","layout","async","viewportEl","onSelectNode","stopPropagation","token","nodeIsInDisplayedGraph","nextOpsNameSelection","metaKey","tokensToAdd","tokensInRange","opsInRange","graph","existing","without","uniq","join","nextCenter","current","zoomToSVGCoords","bounds","y","lastRenderedLayout","setLastRenderedLayout","renderingNewLayout","focus","autocenter","allowGroupsOnlyZoomLevel","keys","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","nodeType","SVGViewport","ref","r","interactor","graphWidth","graphHeight","height","graphHasNoMinimumZoom","onArrowKeyDown","dir","layoutWithoutExternalLinks","pickBy","nextId","closestNodeInDirection","zoomToSVGBox","onDoubleClick","maxZoom","maxAutocenterZoom","scale","SVGContainer","Math","max","sort","b","group","targetScale","scaleForSVGBounds","AssetGroupNode","graphNode","JSON","parse","onMouseEnter","onMouseLeave","overflow","AssetNode","selected","Checkbox","format","checked","preferAssetRendering","onChange","position","QueryRefresh","refreshState","dataDescription","n","LaunchAssetExecutionButton","liveDataForStale","scope","all","fetchOptionFilters","GraphQueryInput","items","value","placeholder","popoverPosition","second","graphDirectionOf","stack","pop","downstream","Boolean","push","seen","ledToTarget","repositoryDisambiguationRequired","fontWeight","userSelect","workspacePath","GroupRepoName","withMiddleTruncation","buildRepoPathForHuman","maxLength","GroupOutline","inset","background","fontFamily","FontFamily","AssetInsetForHoverEffect","AssetNodeContainer","$selected","AssetNodeBox","$isSource","Name","marginTop","textOverflow","ASSET_NODE_NAME_MAX_LENGTH","$color","markdownToPlaintext","Stats","StatsRow","lastObservation","textAlign","event","timeFormat","showSeconds","showTimezone","AssetNodeStatusRow","computeKind","minified","paddingTop","tags","window","requestAnimationFrame","document","dispatchEvent","Event","isEqual","AssetNodeStatusBox","children","borderBottomLeftRadius","borderBottomRightRadius","whiteSpace","lineHeight","runWhichFailedToMaterialize","inProgressRunIds","unstartedRunIds","materializingRunId","late","isAssetLate","lastMaterializationLink","humanizedLateString","freshnessInfo","currentMinutesLate","isAssetStale","AssetNodeMinimal","MinimalAssetNodeContainer","MinimalAssetNodeBox","$background","$border","MinimalName","ASSET_NODE_LIVE_FRAGMENT","ASSET_NODE_FRAGMENT","AssetNodeShowOnHover","p","AssetLatestRunSpinner","stopped","AssetLatestRunWithNotices","includeFreshness","includeRunStatus","MISSING_LIVE_DATA","runTagContent","AssetRunLink","policyOnHover","rel","AssetNodeLink","AssetNodeLinkContainer","className","ASSET_GRAPH_QUERY","notifyOnNetworkStatusChange","groupSelector","matching","hideNodesMatching","reject","buildGraphQueryItems","filterByQuery","buildGraphData","hideEdgesToNodesOutsideQuery","removeEdgesToHiddenAssets","inputs","dependencyKeys","dependsOn","solid","outputs","dependedByKeys","dependedBy","graphData","allNodes","allNodesById","groupBy","toGraphId","notSourceAsset","upstream","calculateGraphDistances","keyBy","g","start","dfsUpstream","depth","flatMap","i","dname","dfsDownstream","SUBSCRIPTION_MAX_POLL_RATE","liveResult","ASSETS_GRAPH_LIVE_QUERY","skip","buildLiveData","fetching","NetworkStatus","networkStatus","timerRef","onRefreshDebounced","setTimeout","fire","clearTimeout","useQueryRefreshAtInterval","useDidLaunchEvent","assetKeyTokens","Set","assetStepKeys","runInProgressId","slice","RunLogObserver","callback","counter","console","log","useSubscription","ASSET_LIVE_RUN_LOGS_SUBSCRIPTION","onSubscriptionData","logs","subscriptionData","pipelineRunLogs","messages","m","has","ASSET_LATEST_INFO_FRAGMENT","CONFIG_TYPE_SCHEMA_FRAGMENT","MULTIPLE_DEFINITIONS_WARNING","ASSET_DEFINITION_COLLISION_QUERY","collision","allReposWithAsset","repositories","underline","addr","AssetLineageInfoElement","lineage_info","partition_list_label","partitions","partition_list_str","asOf","modifiers","offset","placement","reduce","accum","curr","ii","collapsed","setCollapsed","info","ASSET_LINEAGE_FRAGMENT","xHover","setXHover","reversed","reverse","graphDataByMetadataLabel","extractNumericData","graphLabels","gridTemplateColumns","repeat","onHoverX","shrinkable","action","href","datapoints","series","numericMetadataLabels","k","append","minX","maxX","minY","maxY","existingForPartition","v","isNaN","xNumeric","l","NaN","intValue","parseInt","intRepr","floatValue","serie","xs","ys","minXNumeric","min","maxXNumeric","AssetMetadataTable","rows","DAGSTER_TYPE_FRAGMENT","minLate","moment","humanize","h","cronSchedule","maximumLagMinutes","cronDesc","humanCronString","replace","lagDesc","messageForLaunchBackfillError","launchPartitionBackfill","errors","invalidStepKey","invalidOutputName","ButtonLink","showBackfillErrorToast","SharedToaster","message","showBackfillSuccessToast","history","backfillId","text","RunningBackfillsNotice","partitionSetName","RUNNING_BACKFILLS_NOTICE_QUERY","runningBackfillCount","partitionBackfillsOrError","results","LaunchAssetChoosePartitionsDialog","Dialog","isOpen","open","canEscapeKeyClose","canOutsideClickClose","onClose","setOpen","LaunchAssetChoosePartitionsDialogBody","assetJobName","upstreamAssetKeys","partitionedAssets","canLaunchPartitionBackfill","launching","setLaunching","previewCount","setPreviewCount","morePreviewsCount","assetHealth","mergedHealth","mergedAssetHealth","usePartitionDimensionRanges","knownDimensionNames","partitionKeysByDimension","modifyQueryString","ranges","setRanges","PartitionState","stateFilters","setStateFilters","allInRanges","explodePartitionKeysInRanges","dimensionKeys","stateForKey","allSelected","useHistory","usePartitionNameForPipeline","partitionSet","partitionSetError","onLaunch","CONFIG_PARTITION_SELECTION_QUERY","repositorySelector","partitionName","partitionKey","tagAndConfigData","partitionSetOrError","tagsOrError","runConfigOrError","runConfigData","yaml","mode","mutate","mutation","LAUNCH_PARTITION_BACKFILL_MUTATION","backfillParams","selector","assetSelection","partitionNames","fromFailure","launchBackfillData","range","PartitionRangeWizard","partitionKeys","dimension","partitionStateForKey","dimensionKey","stateForSingleDimension","setSelected","PartitionStateCheckboxes","partitionKeysForCounts","allowed","marginLeft","marginRight","overflowY","maxHeight","showAssetKey","UpstreamUnavailableWarning","disabledReason","upstreamAssetHealth","upstreamUnavailable","singleDimensionKey","upstreamUnavailableSpans","assembleIntoSpans","s","status","span","stringForSpan","Error","countOrBlank","isAnyPartitioned","isPartitioned","useMaterializationAction","launchpadElement","setIsOpen","skipAllTerm","missingOrStale","isAssetMissing","optionsForButton","firstOption","borderTopRightRadius","borderRight","Popover","onInteraction","nextOpen","Menu","option","role","minWidth","borderTopLeftRadius","confirm","useConfirmation","stateForLaunchingAssets","upstreamAssetsWithNoMaterializations","missing","sessionPresets","LAUNCH_ASSET_LOADER_RESOURCE_QUERY","resourceResult","pipeline","pipelineOrError","partitionSets","partitionSetsOrError","requiredResourceKeys","requiredResources","resourceKey","resources","modes","anyResourcesHaveRequiredConfig","isRequired","anyAssetsHaveRequiredConfig","assumeConfigPresent","assetOpNames","flattenGraphs","solidSelectionQuery","base","partitionsSetName","getUpstreamAssetKeys","jobsInCommon","stringify","LAUNCH_ASSET_CHECK_UPSTREAM_QUERY","assetMaterializations","executionMetadata","t","pick","DagsterTag","o","ridx","LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT","isTimeseriesDimension","isTimeseriesPartition","aPartitionKey","test","dimensions","stateForPartialKey","dim","mergedStates","health","dimensionIdx","otherDimensionSelectedKeys","states","subkey","placeholderDimensionRange","assetData","minHeight","keysForTotals","total","success","combinations","dkeys","toLocaleString","small","splitPartitions","currentLogicalVersion","projectedLogicalVersion","fillColor","textColor","interactive","NO_PARTITION_KEY","sortByEventTimestamp","events","definedPartitionKeys","orderedPartitionKeys","sorted","groupByPartition","serializer","defaults","encode","fromEntries","rangeText","decode","qs","entries","endsWith","opts","useQueryPersistedState","setQuery","local","setLocal","knownDimensionNamesJSON","saved","textToPartitions","partitionsToText","allPartitionsSpan","loadPartitionHealthData","loadKey","PARTITION_HEALTH_QUERY","counts","partitionMaterializationCounts","materializationCounts","stateByKey","materializationCountsGrouped","dim0","idx0","idx1","setResult","assetKeyJSONs","assetKeyJSON","missingKeyJSON","fetchedAt","run","loaded","partitionSetsData","ASSET_JOB_PARTITION_SETS_QUERY","params","before","xAxisDefault","time","loadUsingPartitionKeys","ASSET_EVENTS_QUERY","partitionInLast","limit","assetObservations","allPartitionKeys","ASSET_MATERIALIZATION_FRAGMENT","ASSET_OBSERVATION_FRAGMENT","ConfigEditorConfigPicker","onSaveSession","onSelectPreset","onSelectPartition","presets","configGenerators","localeCompare","PickerContainer","ConfigEditorConfigGeneratorPicker","presetName","onSelect","item","ConfigEditorPartitionPicker","basePath","AppContext","repoAddressToSelector","CONFIG_PARTITIONS_QUERY","sortOrderKey","useStateWithStorage","sortOrder","setSortOrder","retrieved","partitionsOrError","onClickSort","preventDefault","order","rightElement","SortButton","onMouseDown","inputProps","Intent","itemRenderer","noResults","inputValueRenderer","str","selectedItem","onItemSelect","defaultSelectedItem","itemPredicate","active","handleClick","button","shortcutLabel","shortcutFilter","code","altKey","onShortcut","click","configGenerator","itemListRenderer","itemsParentRef","renderItem","filteredItems","renderedPresetItems","renderedPartitionSetItems","bothTypesPresent","ulRef","solidSelection","rightIcon","IconWrapper","CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT","CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT","LaunchRootExecutionButton","getVariables","behavior","LaunchButton","runCount","config","warning","tooltip","useMutation","LAUNCH_PIPELINE_EXECUTION_MUTATION","launchPipelineExecution","logTelemetry","useTelemetryAction","opSelection","TelemetryAction","handleLaunchResult","showLaunchError","LaunchpadHooksContext","overrideLaunchRootExecutionButton","overrideUseLaunchWithTelemetry","CodeMirrorInDialogStyle","createGlobalStyle","LaunchpadTransientSessionContainer","launchpadType","initialData","useInitialDataForMode","initialSessionComplete","createSingleSession","runConfigYaml","session","setSession","LaunchpadSession","onSave","changes","newSession","LaunchpadStoredSessionsContainer","AssetLaunchpad","LaunchpadAllowedRoot","pipelinePath","JobLaunchpad","useParams","repoPath","useTrackPageView","explorerPathFromString","useJobTitle","useStripSnapshotFromPath","PIPELINE_EXECUTION_ROOT_QUERY","LaunchpadSessionLoading","LaunchpadSessionError","fallback","EXECUTION_SESSION_CONTAINER_PIPELINE_FRAGMENT","EXECUTION_SESSION_CONTAINER_PARTITION_SETS_FRAGMENT","GUTTER_ID","rm","elt","parentNode","removeChild","showTooltipFor","tt","createElement","nodeRect","getBoundingClientRect","appendChild","cloneNode","clientHeight","showTooltip","hide","CodeMirror","poll","setInterval","host","clearInterval","clearMarks","cm","lint","hasGutter","clearGutter","marked","clear","makeMarker","labels","severity","multiple","tooltips","marker","inner","annotationTooltip","ann","tip","messageHTML","innerHTML","createTextNode","updateLinting","annotationsNotSorted","annotations","lines","line","groupByLine","anns","maxSeverity","tipLabel","createDocumentFragment","formatAnnotation","markText","__annotation","setGutterMarker","onUpdateLinting","startLinting","passOptions","getAnnotations","getHelper","waitingFor","abort","off","on","getValue","arg2","operation","lintAsync","then","issues","timeout","delay","onMouseOver","box","srcElement","pos","coordsChar","spans","findMarksAt","docs","getDocs","docsEl","textContent","paddingBottom","popupTooltip","LintState","this","val","old","lintOnChange","getWrapperElement","gutters","getOption","hasLintGutter","Function","AUTO_COMPLETE_AFTER_KEY","performLint","debounce","editor","ConfigEditorStyle","ConfigEditor","_editor","moveCursor","ch","setCursor","scroll","getScrollInfo","cursorCoords","scrollIntoView","moveCursorToPath","codeMirrorDoc","getDoc","yamlDoc","configCode","findRangeInDocumentFromPath","posFromIndex","prevProps","configSchema","performInitialPass","readOnly","context","expandAutocompletionContextAtCursor","onHelpContextChange","closestMappingType","theme","lineNumbers","indentUnit","smartIndent","showCursorWhenSelecting","checkConfig","hintOptions","completeSingle","closeOnUnfocus","schema","keyMap","extraKeys","showHint","execCommand","Tab","foldGutter","editorDidMount","onBeforeChange","onConfigChange","onCursorActivity","getSelection","onBlur","onKeyUp","isHelpContextEqual","prev","ConfigEditorHelp","allInnerTypes","Container","ConfigScrollWrap","maxDepth","AutocompletionsNote","CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT","CONFIG_EDITOR_VALIDATION_FRAGMENT","errorStackToYamlPath","fieldName","listIndex","mapKey","responseToYamlValidationResult","configYaml","response","isValid","err","reason","parsed","topLevelKey","forEach","ConfigEditorModePicker","resolvedMode","modeName","onModeChange","singleMode","valid","modeError","Select","activeItem","filterable","SOLID_SELECTOR_QUERY","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","OpSelector","serverProvidedSubsetError","onFlattenGraphsChange","focused","setFocused","inputRef","requestScopeHandleID","ops","explodeCompositesInHandleGraph","solidHandles","flattenGraphsEnabled","f","opsFetchError","queryResultOps","errorMessage","PopoverErrorWrap","ShortcutHandler","nextQuery","onFocus","linkToPreview","setFlattenGraphs","isValidationError","stateToHint","invalid","present","none","RemoveExtraConfigButton","onRemoveExtraPaths","extraNodes","knownKeyExtraPaths","otherPaths","parts","ScaffoldConfigButton","onScaffoldMissingConfig","missingNodes","confirmationMessage","RunPreview","validation","onHighlightPath","runConfigSchema","errorsOnly","setErrorsOnly","rootCompositeChildren","allConfigTypes","rootConfigType","root","fields","field","allConfigVersion","configTypeKey","errorsAndPaths","pathKey","fieldNames","PythonErrorInfo","solids","rest","hasOps","itemsIn","parents","boxes","pathErrors","startsWith","isPresent","pathExistsInObject","containsMissing","missingNode","isInvalid","isMissing","_","Tag","ItemsEmptyNotice","axis","ErrorListContainer","Section","SectionTitle","ErrorRow","onHighlight","RuntimeAndResourcesSection","ItemSet","RUN_PREVIEW_VALIDATION_FRAGMENT","ErrorRowContainer","hoverable","displayed","indexOf","substr","truncateErrorMessage","paddingRight","object","scaffoldType","typeLookup","isSelector","typeParamKeys","scalarTypeKey","String","Int","Float","Bool","Any","assertUnreachable","scaffoldPipelineConfig","createTypeLookup","YAML_SYNTAX_INVALID","reducer","previewLoading","payload","preview","previewedDocument","tagEditorOpen","configLoading","editorHelpContext","LaunchButtonContainer","flexGrow","zIndex","initialState","currentSession","dispatch","mounted","editorSplitPanelContainer","previewCounter","tagsFromSession","configResult","PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY","configSchemaOrError","runConfigSchemaOrError","launchButtonTitle","launchButtonWarning","currentPreviewCount","configYamlOrEmpty","sanitizeConfigYamlString","PREVIEW_CONFIG_QUERY","isLatestRequest","isPipelineConfigValid","tagsApplyingNewBaseTags","newBaseTags","preservedUserTags","bt","preset","onlyKeyAndValue","needsRefresh","sessionSolidSelection","onConfigLoading","onConfigLoaded","assign","onRefreshConfig","matchingPreset","openTagEditor","refreshableSessionBase","LoadingOverlay","isLoading","SessionSettingsBar","SessionSettingsSpacer","TextInput","TagEditor","tagsFromDefinition","tagDict","toSave","tag","onRequestClose","onRequestEdit","paths","deletePropertyPath","updatedRunConfigData","merge","uniqBy","obj","lastKey","yamlString","trim","RUN_CONFIG_SCHEMA_OR_ERROR_FRAGMENT","LoadingOverlayContainer","editState","setEditState","toError","onTagEdit","TagList","editable","flexDirection","onRemove","TagContainer","sessionTag","PartitionRangeInput","isTimeseries","valueString","setValueString","partitionNameJSON","partitionNameArr","names","placeholderForPartitions","tryCommit","currentTarget","onKeyDown","C","byState","partitionStatusToText","useDocumentTitle","ClearButton","Remark","remark","use","gfm","toPlainText","markdownCache","LRUCache","md","cached","get","processSync","toString","replaceAll","set","popoverProps","minimal","deepmerge","popoverClassName"],"sourceRoot":""}