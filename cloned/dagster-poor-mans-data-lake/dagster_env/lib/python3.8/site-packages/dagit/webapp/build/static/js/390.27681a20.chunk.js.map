{"version":3,"file":"static/js/390.27681a20.chunk.js","mappings":"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","sources":["../../core/src/instance/LastRunSummary.tsx","../../core/src/instance/StepSummaryForRun.tsx","../../core/src/instigation/InstigationTick.tsx","../../core/src/instigation/InstigationUtils.tsx","../../core/src/runs/RunStatusPez.tsx","../../core/src/runs/ScheduledRunListRoot.tsx","../../core/src/schedules/ScheduleUtils.tsx","../../core/src/schedules/SchedulerInfo.tsx","../../core/src/schedules/SchedulesNextTicks.tsx"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunTimeFragment';\nimport {RunStatus} from '../types/globalTypes';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary: React.FC<Props> = React.memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}) => {\n    const {status} = run;\n\n    const intent = React.useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, Caption} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {StepEventStatus} from '../types/globalTypes';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRunQuery';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const {data} = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {variables: {runId}},\n  );\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = React.useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0];\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0];\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tag,\n  Body,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {InstigationTickStatus, InstigationType} from '../types/globalTypes';\n\nimport {LaunchedRunListQuery, LaunchedRunListQueryVariables} from './types/LaunchedRunListQuery';\nimport {TickTagFragment} from './types/TickTagFragment';\n\nexport const TickTag: React.FC<{\n  tick: TickTagFragment;\n  instigationType?: InstigationType;\n}> = ({tick, instigationType}) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  switch (tick.status) {\n    case InstigationTickStatus.STARTED:\n      return <Tag>Started</Tag>;\n    case InstigationTickStatus.SUCCESS:\n      if (!tick.runIds.length) {\n        return <Tag intent=\"primary\">Requested</Tag>;\n      }\n      const tag = (\n        <>\n          <Tag intent=\"primary\" interactive>\n            <ButtonLink underline=\"never\" onClick={() => setOpen(true)}>\n              {tick.runIds.length} Requested\n            </ButtonLink>\n          </Tag>\n          <Dialog\n            isOpen={open}\n            onClose={() => setOpen(false)}\n            style={{width: '90vw'}}\n            title=\"Launched runs\"\n          >\n            <RunList runIds={tick.runIds} />\n            <DialogFooter>\n              <Button intent=\"primary\" onClick={() => setOpen(false)}>\n                OK\n              </Button>\n            </DialogFooter>\n          </Dialog>\n        </>\n      );\n      if (tick.runKeys.length > tick.runIds.length) {\n        const message = `${tick.runKeys.length} runs requested, but ${\n          tick.runKeys.length - tick.runIds.length\n        } skipped because the runs already exist for those requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            {tag}\n          </Tooltip>\n        );\n      }\n      return tag;\n\n    case InstigationTickStatus.SKIPPED:\n      if (tick.runKeys.length) {\n        const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      if (tick.skipReason) {\n        return (\n          <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      return <Tag intent=\"warning\">Skipped</Tag>;\n    case InstigationTickStatus.FAILURE:\n      if (!tick.error) {\n        return <Tag intent=\"danger\">Failure</Tag>;\n      } else {\n        const error = tick.error;\n        const showError = () =>\n          showCustomAlert({\n            title: instigationType\n              ? instigationType === InstigationType.SCHEDULE\n                ? 'Schedule Response'\n                : 'Sensor Response'\n              : 'Python Error',\n            body: <PythonErrorInfo error={error} />,\n          });\n        return (\n          <>\n            <LinkButton onClick={showError}>\n              <Tag minimal={true} intent=\"danger\">\n                Failure\n              </Tag>\n            </LinkButton>\n            <ButtonLink onClick={showError} style={{marginLeft: 8, fontSize: 12}}>\n              View\n            </ButtonLink>\n          </>\n        );\n      }\n    default:\n      return assertUnreachable(tick.status);\n  }\n};\n\nexport const RunList: React.FC<{runIds: string[]}> = ({runIds}) => {\n  const {data, loading} = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const FailedRunList: React.FC<{\n  originRunIds?: string[];\n}> = ({originRunIds}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.Gray200}}>\n        <Body>\n          Failed Runs\n          <Tooltip content=\"Failed runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\nconst LinkButton = styled.button`\n  background: inherit;\n  border: none;\n  cursor: pointer;\n  font-size: inherit;\n  text-decoration: none;\n  padding: 0;\n`;\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n          runId\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Mono} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {InstigationStateFragment} from './types/InstigationStateFragment';\nimport {RunStatusFragment} from './types/RunStatusFragment';\n\nexport const InstigatedRunStatus: React.FC<{\n  instigationState: InstigationStateFragment;\n}> = ({instigationState}) => {\n  if (!instigationState.runs.length) {\n    return <span style={{color: Colors.Gray300}}>None</span>;\n  }\n  return <LastRunSummary run={instigationState.runs[0]} name={instigationState.name} />;\n};\n\nexport const RunStatusLink: React.FC<{run: RunStatusFragment}> = ({run}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.runId}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({runId: run.runId})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    runId\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.Gray500};\n  }\n`;\n","import {Box, Colors, FontFamily, Mono, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\nimport {RunStatus} from '../types/globalTypes';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunTimeFragment';\n\nconst RUN_STATUS_COLORS = {\n  QUEUED: Colors.Blue500,\n  NOT_STARTED: Colors.Blue500,\n  STARTING: Colors.Blue500,\n  MANAGED: Colors.Blue500,\n  STARTED: Colors.Blue500,\n  SUCCESS: Colors.Green500,\n  FAILURE: Colors.Red500,\n  CANCELING: Colors.Red500,\n  CANCELED: Colors.Red500,\n};\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.runId}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.runId}\n            runId={run.runId}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.runId}`}>\n            <Mono style={{fontSize: '14px'}}>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}} padding={{top: 2}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.KeylineGray};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.Dark};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  font-size: 12px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Page, Alert, ButtonLink, Colors, Group} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {REPOSITORY_SCHEDULES_FRAGMENT} from '../schedules/ScheduleUtils';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {SchedulesNextTicks} from '../schedules/SchedulesNextTicks';\nimport {Loading} from '../ui/Loading';\n\nimport {RunsPageHeader} from './RunsPageHeader';\nimport {SchedulerInfoQuery} from './types/SchedulerInfoQuery';\n\nexport const ScheduledRunListRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Scheduled runs');\n\n  const queryResult = useQuery<SchedulerInfoQuery>(SCHEDULER_INFO_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <Page>\n      <RunsPageHeader refreshStates={[refreshState]} />\n      <Loading queryResult={queryResult}>\n        {(result) => {\n          const {repositoriesOrError, instance} = result;\n          if (repositoriesOrError.__typename === 'PythonError') {\n            const message = repositoriesOrError.message;\n            return (\n              <Alert\n                intent=\"warning\"\n                title={\n                  <Group direction=\"row\" spacing={4}>\n                    <div>Could not load scheduled ticks.</div>\n                    <ButtonLink\n                      color={Colors.Link}\n                      underline=\"always\"\n                      onClick={() => {\n                        showCustomAlert({\n                          title: 'Python error',\n                          body: message,\n                        });\n                      }}\n                    >\n                      View error\n                    </ButtonLink>\n                  </Group>\n                }\n              />\n            );\n          }\n          return (\n            <>\n              <SchedulerInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n              <SchedulesNextTicks repos={repositoriesOrError.nodes} />\n            </>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default ScheduledRunListRoot;\n\nconst SCHEDULER_INFO_QUERY = gql`\n  query SchedulerInfoQuery {\n    instance {\n      ...InstanceHealthFragment\n    }\n    repositoriesOrError {\n      ... on RepositoryConnection {\n        nodes {\n          __typename\n          id\n          ... on Repository {\n            ...RepositorySchedulesFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${INSTANCE_HEALTH_FRAGMENT}\n  ${REPOSITORY_SCHEDULES_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {REPOSITORY_INFO_FRAGMENT} from '../workspace/RepositoryInformation';\n\nexport const SCHEDULE_FRAGMENT = gql`\n  fragment ScheduleFragment on Schedule {\n    id\n    name\n    cronSchedule\n    executionTimezone\n    pipelineName\n    solidSelection\n    mode\n    description\n    partitionSet {\n      id\n      name\n    }\n    scheduleState {\n      id\n      ...InstigationStateFragment\n    }\n    futureTicks(limit: 5) {\n      results {\n        timestamp\n      }\n    }\n  }\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n\nexport const REPOSITORY_SCHEDULES_FRAGMENT = gql`\n  fragment RepositorySchedulesFragment on Repository {\n    name\n    id\n    location {\n      id\n      name\n    }\n    schedules {\n      id\n      ...ScheduleFragment\n    }\n    ...RepositoryInfoFragment\n  }\n  ${REPOSITORY_INFO_FRAGMENT}\n  ${SCHEDULE_FRAGMENT}\n`;\n\nexport const SCHEDULES_ROOT_QUERY = gql`\n  query SchedulesRootQuery(\n    $repositorySelector: RepositorySelector!\n    $instigationType: InstigationType!\n  ) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        ...RepositorySchedulesFragment\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: $instigationType) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${REPOSITORY_SCHEDULES_FRAGMENT}\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonHealthFragment';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths) {\n      const schedulerHealth = schedulerHealths[0];\n      healthy = !!(schedulerHealth.required && schedulerHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  MenuItem,\n  Menu,\n  NonIdealState,\n  Popover,\n  Spinner,\n  Table,\n  Subheading,\n  StyledReadOnlyCodeMirror,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useCopyToClipboard} from '../app/browser';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RunTags} from '../runs/RunTags';\nimport {InstigationStatus} from '../types/globalTypes';\nimport {MenuLink} from '../ui/MenuLink';\nimport {\n  findRepositoryAmongOptions,\n  isThisThingAJob,\n  useRepository,\n  useRepositoryOptions,\n} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {RepositorySchedulesFragment} from './types/RepositorySchedulesFragment';\nimport {ScheduleFragment} from './types/ScheduleFragment';\nimport {\n  ScheduleTickConfigQuery,\n  ScheduleTickConfigQueryVariables,\n  ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult,\n  ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult_runRequests,\n} from './types/ScheduleTickConfigQuery';\n\ninterface ScheduleTick {\n  schedule: ScheduleFragment;\n  timestamp: number;\n  repoAddress: RepoAddress;\n}\n\nexport const SchedulesNextTicks: React.FC<{\n  repos: RepositorySchedulesFragment[];\n}> = React.memo(({repos}) => {\n  const nextTicks: ScheduleTick[] = [];\n  let anyPipelines = false;\n  let anySchedules = false;\n\n  const {options} = useRepositoryOptions();\n\n  repos.forEach((repo) => {\n    const {schedules} = repo;\n    anySchedules = anySchedules || schedules.length > 0;\n\n    const repoAddress = {\n      name: repo.name,\n      location: repo.location.name,\n    };\n\n    const futureTickSchedules = schedules.filter(\n      (schedule) =>\n        schedule.futureTicks.results.length &&\n        schedule.scheduleState.status === InstigationStatus.RUNNING,\n    );\n\n    const minMaxTimestamp = Math.min(\n      ...futureTickSchedules.map(\n        (schedule) =>\n          schedule.futureTicks.results[schedule.futureTicks.results.length - 1].timestamp,\n      ),\n    );\n\n    futureTickSchedules.forEach((schedule) => {\n      schedule.futureTicks.results.forEach((tick) => {\n        if (tick.timestamp <= minMaxTimestamp) {\n          nextTicks.push({schedule, timestamp: tick.timestamp, repoAddress});\n        }\n      });\n    });\n\n    if (!anyPipelines) {\n      anyPipelines = schedules.some((schedule) => !!schedule.mode);\n    }\n  });\n\n  nextTicks.sort((a, b) => a.timestamp - b.timestamp);\n\n  if (!nextTicks.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No scheduled ticks\"\n          description={\n            anySchedules ? (\n              <>\n                There are no running schedules.{' '}\n                <Link to=\"/overview/schedules\">Start a schedule</Link> to see scheduled ticks.\n              </>\n            ) : (\n              <>\n                There are no schedules in this workspace. Create a running schedule to view its\n                scheduled ticks.\n              </>\n            )\n          }\n          action={\n            anySchedules ? null : (\n              <ExternalAnchorButton\n                icon={<Icon name=\"open_in_new\" />}\n                href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\"\n              >\n                View documentation\n              </ExternalAnchorButton>\n            )\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '260px'}}>Timestamp</th>\n          <th style={{width: '30%'}}>Schedule</th>\n          <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          <th>Metadata</th>\n        </tr>\n      </thead>\n      <tbody>\n        {nextTicks.map(({schedule, timestamp, repoAddress}) => {\n          const repo = findRepositoryAmongOptions(options, repoAddress);\n          return (\n            <tr key={`${schedule.id}:${timestamp}`}>\n              <td>\n                <TimestampDisplay\n                  timestamp={timestamp}\n                  timezone={schedule.executionTimezone}\n                  timeFormat={{showSeconds: false, showTimezone: true}}\n                />\n              </td>\n              <td>\n                <Link to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}>\n                  {schedule.name}\n                </Link>\n              </td>\n              <td>\n                <PipelineReference\n                  pipelineName={schedule.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isThisThingAJob(repo, schedule.pipelineName)}\n                />\n              </td>\n              <td>\n                <NextTickMenu\n                  repoAddress={repoAddress}\n                  schedule={schedule}\n                  tickTimestamp={timestamp}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n});\n\nconst NextTickMenu: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleFragment;\n  tickTimestamp: number;\n}> = React.memo(({repoAddress, schedule, tickTimestamp}) => {\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName: schedule.name,\n  };\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const [loadTickConfig, {called, loading, data}] = useLazyQuery<\n    ScheduleTickConfigQuery,\n    ScheduleTickConfigQueryVariables\n  >(SCHEDULE_TICK_CONFIG_QUERY, {\n    variables: {\n      scheduleSelector,\n      tickTimestamp,\n    },\n  });\n\n  const infoReady = called ? !loading : false;\n  const evaluationResult =\n    data?.scheduleOrError?.__typename === 'Schedule'\n      ? data.scheduleOrError.futureTick.evaluationResult\n      : null;\n\n  const menuItems = infoReady ? (\n    <NextTickMenuItems\n      repoAddress={repoAddress}\n      schedule={schedule}\n      loading={loading}\n      onItemOpen={setOpen}\n      evaluationResult={evaluationResult}\n    />\n  ) : (\n    <Spinner purpose=\"body-text\" />\n  );\n  return (\n    <>\n      <Popover\n        content={<Menu>{menuItems}</Menu>}\n        position=\"bottom-right\"\n        onOpening={() => {\n          if (!called) {\n            loadTickConfig();\n          }\n        }}\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <NextTickDialog\n        repoAddress={repoAddress}\n        isOpen={isOpen}\n        setOpen={setOpen}\n        schedule={schedule}\n        tickTimestamp={tickTimestamp}\n        evaluationResult={evaluationResult}\n      />\n    </>\n  );\n});\n\nconst NextTickMenuItems: React.FC<{\n  repoAddress: RepoAddress;\n  evaluationResult: ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult | null;\n  schedule: ScheduleFragment;\n  loading: boolean;\n  onItemOpen: (value: boolean) => void;\n}> = ({repoAddress, schedule, evaluationResult, loading, onItemOpen}) => {\n  if (!evaluationResult) {\n    return <MenuItem text=\"Could not preview tick for this schedule\" />;\n  }\n\n  if (evaluationResult.skipReason) {\n    return <MenuItem text=\"View skip reason...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (evaluationResult.error) {\n    return <MenuItem text=\"View error...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (!evaluationResult.runRequests || !evaluationResult.runRequests.length) {\n    return <MenuItem text=\"No runs requested for this projected schedule tick\" />;\n  }\n\n  if (evaluationResult.runRequests.length === 1) {\n    const runRequest = evaluationResult.runRequests[0];\n    const runConfigYaml = runRequest ? runRequest.runConfigYaml : '';\n    return (\n      <>\n        <MenuItem\n          text={loading ? 'Loading Configuration...' : 'View Configuration...'}\n          icon=\"open_in_new\"\n          onClick={() => onItemOpen(true)}\n        />\n        <MenuLink\n          text=\"Open in Launchpad...\"\n          icon=\"edit\"\n          target=\"_blank\"\n          to={workspacePathFromAddress(\n            repoAddress,\n            `/pipeline_or_job/${schedule.pipelineName}/playground/setup?${qs.stringify({\n              mode: schedule.mode,\n              config: runConfigYaml,\n              solidSelection: schedule.solidSelection,\n            })}`,\n          )}\n        />\n      </>\n    );\n  }\n\n  return (\n    <MenuItem\n      text={`View ${evaluationResult.runRequests.length} run requests...`}\n      icon=\"edit\"\n      target=\"_blank\"\n      onClick={() => onItemOpen(true)}\n    />\n  );\n};\n\nconst NextTickDialog: React.FC<{\n  repoAddress: RepoAddress;\n  isOpen: boolean;\n  setOpen: (value: boolean) => void;\n  evaluationResult: ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult | null;\n  schedule: ScheduleFragment;\n  tickTimestamp: number;\n}> = ({repoAddress, evaluationResult, schedule, tickTimestamp, setOpen, isOpen}) => {\n  const [\n    selectedRunRequest,\n    setSelectedRunRequest,\n  ] = React.useState<ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult_runRequests | null>(\n    evaluationResult && evaluationResult.runRequests && evaluationResult.runRequests.length === 1\n      ? evaluationResult.runRequests[0]\n      : null,\n  );\n\n  const copy = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, schedule.pipelineName);\n\n  React.useEffect(() => {\n    if (\n      evaluationResult &&\n      evaluationResult.runRequests &&\n      evaluationResult.runRequests.length === 1\n    ) {\n      setSelectedRunRequest(evaluationResult.runRequests[0]);\n    }\n  }, [evaluationResult]);\n\n  const close = () => {\n    setSelectedRunRequest(null);\n    setOpen(false);\n  };\n\n  let body;\n  if (!evaluationResult) {\n    body = null;\n  } else if (selectedRunRequest) {\n    body = (\n      <Box flex={{direction: 'column', gap: 20}}>\n        <Box flex={{direction: 'column', gap: 12}} padding={{top: 16, horizontal: 24}}>\n          <Subheading>Tags</Subheading>\n          {selectedRunRequest.tags.length ? (\n            <RunTags tags={selectedRunRequest.tags} mode={isJob ? null : schedule.mode} />\n          ) : null}\n        </Box>\n        <div>\n          <Box\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            padding={{left: 24, bottom: 16}}\n          >\n            <Subheading>Config</Subheading>\n          </Box>\n          <StyledReadOnlyCodeMirror\n            value={selectedRunRequest.runConfigYaml}\n            options={{lineNumbers: true, mode: 'yaml'}}\n          />\n        </div>\n      </Box>\n    );\n  } else if (evaluationResult.error) {\n    body = (\n      <DialogBody>\n        <PythonErrorInfo error={evaluationResult.error} />\n      </DialogBody>\n    );\n  } else if (evaluationResult.skipReason) {\n    body = (\n      <DialogBody>\n        <SkipWrapper>{evaluationResult.skipReason}</SkipWrapper>\n      </DialogBody>\n    );\n  } else if (evaluationResult.runRequests) {\n    body = (\n      <DialogBody>\n        <RunRequestBody>\n          <Table>\n            <thead>\n              <tr>\n                <th>Run key</th>\n                <th>Config</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {evaluationResult.runRequests.map((runRequest, idx) => {\n                if (!runRequest) {\n                  return null;\n                }\n                return (\n                  <tr key={idx}>\n                    <td>{runRequest.runKey || <span>&mdash;</span>}</td>\n                    <td>\n                      <ButtonLink\n                        onClick={() => setSelectedRunRequest(runRequest)}\n                        underline={false}\n                      >\n                        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                          <Icon name=\"open_in_new\" color={Colors.Gray400} />\n                          <span>View config</span>\n                        </Group>\n                      </ButtonLink>\n                    </td>\n                    <td>\n                      <Popover\n                        content={\n                          <Menu>\n                            <MenuLink\n                              text=\"Open in Launchpad...\"\n                              icon=\"edit\"\n                              target=\"_blank\"\n                              to={workspacePathFromAddress(\n                                repoAddress,\n                                `/${isJob ? 'jobs' : 'pipelines'}/${\n                                  schedule.pipelineName\n                                }/playground/setup?${qs.stringify({\n                                  mode: schedule.mode,\n                                  config: runRequest.runConfigYaml,\n                                  solidSelection: schedule.solidSelection,\n                                })}`,\n                              )}\n                            />\n                          </Menu>\n                        }\n                        position=\"bottom\"\n                      >\n                        <Button icon={<Icon name=\"expand_more\" />} />\n                      </Popover>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </RunRequestBody>\n      </DialogBody>\n    );\n  }\n\n  return (\n    <Dialog\n      onClose={() => close()}\n      style={{width: '50vw'}}\n      title={\n        <Box flex={{direction: 'row', gap: 4}}>\n          <TimestampDisplay timestamp={tickTimestamp} timezone={schedule.executionTimezone} />\n          {selectedRunRequest?.runKey ? <div>: {selectedRunRequest?.runKey}</div> : null}\n        </Box>\n      }\n      isOpen={isOpen}\n    >\n      {body}\n      <DialogFooter topBorder>\n        {selectedRunRequest ? (\n          <Button\n            autoFocus={false}\n            onClick={() => {\n              copy(selectedRunRequest.runConfigYaml);\n              SharedToaster.show({\n                intent: 'success',\n                icon: 'copy_to_clipboard_done',\n                message: 'Copied!',\n              });\n            }}\n          >\n            Copy config\n          </Button>\n        ) : null}\n        <Button intent=\"primary\" autoFocus={true} onClick={() => close()}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst SCHEDULE_TICK_CONFIG_QUERY = gql`\n  query ScheduleTickConfigQuery($scheduleSelector: ScheduleSelector!, $tickTimestamp: Int!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        futureTick(tickTimestamp: $tickTimestamp) {\n          evaluationResult {\n            runRequests {\n              runKey\n              runConfigYaml\n              tags {\n                key\n                value\n              }\n            }\n            skipReason\n            error {\n              ...PythonErrorFragment\n            }\n          }\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst RunRequestBody = styled.div`\n  font-size: 13px;\n`;\n\nconst SkipWrapper = styled.div`\n  background-color: #fdfcf2;\n  border: 1px solid ${Colors.Yellow500};\n  border-radius: 3px;\n`;\n"],"names":["LastRunSummary","React","name","run","showHover","showButton","showSummary","status","intent","RunStatus","flex","direction","justifyContent","alignItems","gap","tagElement","size","position","interactionKind","content","hoverOpenDelay","tag","failedStatuses","inProgressStatuses","runId","id","undefined","A","to","StepSummaryForRun","props","data","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","color","Colors","stepKey","gql","TickTag","tick","instigationType","open","setOpen","InstigationTickStatus","runIds","interactive","underline","onClick","isOpen","onClose","style","width","title","RunList","runKeys","message","skipReason","targetTagName","error","showError","showCustomAlert","InstigationType","body","LinkButton","minimal","marginLeft","fontSize","assertUnreachable","LAUNCHED_RUN_LIST_QUERY","loading","padding","purpose","pipelineRunsOrError","icon","description","bottom","runs","results","FailedRunList","originRunIds","spacing","border","side","margin","styled","TICK_TAG_FRAGMENT","PYTHON_ERROR_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","InstigatedRunStatus","instigationState","RunStatusLink","target","rel","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","RUN_STATUS_COLORS","QUEUED","NOT_STARTED","STARTING","MANAGED","STARTED","SUCCESS","FAILURE","CANCELING","CANCELED","RunStatusPez","opacity","Pez","$color","$opacity","RunStatusPezList","fade","jobName","count","max","map","ii","RunStatusOverlay","OverlayContainer","OverlayTitle","RunRow","top","SummaryContainer","FontFamily","ScheduledRunListRoot","useTrackPageView","useDocumentTitle","queryResult","SCHEDULER_INFO_QUERY","fetchPolicy","partialRefetch","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","refreshStates","result","repositoriesOrError","instance","daemonHealth","vertical","horizontal","repos","nodes","INSTANCE_HEALTH_FRAGMENT","REPOSITORY_SCHEDULES_FRAGMENT","SCHEDULE_FRAGMENT","REPOSITORY_INFO_FRAGMENT","SCHEDULES_ROOT_QUERY","SchedulerInfo","boxProps","healthy","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","href","SchedulesNextTicks","nextTicks","anyPipelines","anySchedules","options","useRepositoryOptions","forEach","repo","schedules","repoAddress","location","futureTickSchedules","schedule","futureTicks","scheduleState","InstigationStatus","minMaxTimestamp","min","timestamp","push","some","mode","sort","a","b","findRepositoryAmongOptions","timezone","executionTimezone","timeFormat","showSeconds","showTimezone","workspacePathFromAddress","pipelineName","pipelineHrefContext","isJob","isThisThingAJob","NextTickMenu","tickTimestamp","action","scheduleSelector","repoAddressToSelector","scheduleName","useLazyQuery","SCHEDULE_TICK_CONFIG_QUERY","loadTickConfig","called","infoReady","evaluationResult","scheduleOrError","futureTick","menuItems","NextTickMenuItems","onItemOpen","onOpening","NextTickDialog","text","runRequests","runRequest","runConfigYaml","config","solidSelection","selectedRunRequest","setSelectedRunRequest","copy","useCopyToClipboard","useRepository","close","tags","left","value","lineNumbers","SkipWrapper","RunRequestBody","idx","runKey","topBorder","autoFocus","SharedToaster"],"sourceRoot":""}