{"version":3,"file":"static/js/42.7758f970.chunk.js","mappings":"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","sources":["../../core/src/app/browser.tsx","../../core/src/gantt/toGraphQueryItems.tsx","../../core/src/runs/AssetKeyTagCollection.tsx","../../core/src/runs/DeletionDialog.tsx","../../core/src/runs/CellTruncationProvider.tsx","../../core/src/runs/LogsRowStructuredContent.tsx","../../core/src/runs/LogsRow.tsx","../../core/src/runs/LogsScrollingTable.tsx","../../core/src/runs/RunDetails.tsx","../../core/src/runs/RunFragments.tsx","../../core/src/runs/RunStatusTag.tsx","../../core/src/runs/RunTags.tsx","../../core/src/runs/getRunFilterProviders.ts","../../core/src/runs/logNodeLevel.tsx","../../core/src/ui/AnchorButton.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A hook that provides a mechanism for copying a string, triggered by user\n * behavior. If the Clipboard API is available, use it directly.\n *\n * The Clipboard can be undefined in an insecure context\n * (https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API), so we\n * also provide a fallback that uses an offscreen input and `execCommand` to\n * copy the contents. This is less ideal because it steals focus and is a DOM\n * hack, but it should still be effective enough for our needs.\n */\nexport const useCopyToClipboard = () => {\n  const clipboardAPI = navigator.clipboard;\n  const node = React.useRef<HTMLInputElement | null>(null);\n\n  React.useEffect(() => {\n    if (!clipboardAPI) {\n      node.current = document.createElement('input');\n      node.current.style.position = 'fixed';\n      node.current.style.top = '-10000px';\n      document.body.appendChild(node.current);\n    }\n\n    return () => {\n      node.current && document.body.removeChild(node.current);\n    };\n  }, [clipboardAPI]);\n\n  return React.useCallback(\n    (text: string) => {\n      if (clipboardAPI) {\n        clipboardAPI.writeText(text);\n      } else if (node.current) {\n        node.current.value = text;\n        node.current.select();\n        document.execCommand('copy');\n      }\n    },\n    [clipboardAPI],\n  );\n};\n","import {gql} from '@apollo/client';\n\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {IStepMetadata, IStepState} from '../runs/RunMetadataProvider';\nimport {StepKind} from '../types/globalTypes';\n\nimport {invocationsOfPlannedDynamicStep, replacePlannedIndex} from './DynamicStepSupport';\nimport {ExecutionPlanToGraphFragment} from './types/ExecutionPlanToGraphFragment';\n\n/**\n * Converts a Run execution plan into a tree of `GraphQueryItem` items that\n * can be used as the input to the \"solid query\" filtering algorithm or rendered\n * into the Gannt visualization or the SVG DAG visualization. The idea\n * is that this data structure is generic, but it's really a fake solid tree.\n *\n * Pass runtimeStepKeys to duplicate dynamic step sub-trees for each occurrence of\n * the step key found at runtime.\n */\n\nexport const toGraphQueryItems = (\n  plan: ExecutionPlanToGraphFragment,\n  runtimeStepMetadata: {[key: string]: IStepMetadata},\n) => {\n  // Step 1: Find unresolved steps in the initial plan and build a mapping\n  // of their unresolved names to their resolved step keys, eg:\n  // \"multiply_input[*]\" => [\"multiply_input[1]\", \"multiply_input[2]\"]\n  const keyExpansionMap: {[key: string]: string[]} = {};\n  const runtimeStepKeys = Object.keys(runtimeStepMetadata);\n\n  for (const step of plan.steps) {\n    if (step.kind === StepKind.UNRESOLVED_MAPPED) {\n      const keys = invocationsOfPlannedDynamicStep(step.key, runtimeStepKeys);\n\n      // If the upstream steps have NOT succeeded, it's expected that there are zero runtime step keys\n      // matching the dynamic step. Until upstream steps run, we should show the [*] placeholder item\n      // in the runtime graph (rather than just showing nothing.)\n      const invocationsHappened = step.inputs.every((i) =>\n        i.dependsOn.every((s) => IStepState.SUCCEEDED === runtimeStepMetadata[s.key]?.state),\n      );\n      if (!invocationsHappened && keys.length === 0) {\n        keyExpansionMap[step.key] = [step.key];\n        continue;\n      }\n      // The order matters here: add the planned dynamic step at the end, so when displaying the gantt\n      // chart, we can ignore planned dynamic step if any of its invocation exists (i.e. hide the\n      // unresolved node if any resolved node exists).\n      keyExpansionMap[step.key] = [...keys, step.key];\n    }\n  }\n\n  // Step 2: Create a graph node for each resolved step without any inputs or outputs.\n  const nodeTable: {[key: string]: GraphQueryItem} = {};\n  for (const step of plan.steps) {\n    const stepRuntimeKeys = keyExpansionMap[step.key] ? keyExpansionMap[step.key] : [step.key];\n    for (const key of stepRuntimeKeys) {\n      nodeTable[key] = {\n        name: key,\n        inputs: [],\n        outputs: [],\n      };\n    }\n  }\n\n  // Step 3: For each step in the original plan, visit each input and create inputs/outputs\n  // in our Gantt Node result set.\n  for (const step of plan.steps) {\n    const stepRuntimeKeys = keyExpansionMap[step.key] ? keyExpansionMap[step.key] : [step.key];\n    for (const key of stepRuntimeKeys) {\n      for (const input of step.inputs) {\n        // Add the input to our node in the result set\n        const nodeInput: GraphQueryItem['inputs'][0] = {dependsOn: []};\n        nodeTable[key].inputs.push(nodeInput);\n\n        // For each upstream step in the plan, map it to upstream nodes in the runtime graph\n        // and attach inputs / outputs to our result graph.\n        for (const upstream of input.dependsOn) {\n          let upstreamKeys = [];\n          if (step.kind === StepKind.UNRESOLVED_COLLECT) {\n            // If we are a collect, there may be N runtime keys fanning in to this input,\n            // fetch the keys if they exist or fall back to the sigle upstream step case.\n            upstreamKeys = keyExpansionMap[upstream.key] || [upstream.key];\n          } else {\n            // If the input was coming from an unresolved mapped step and WE are not a collector,\n            // assume our own dynamic key index applies to the upstream mapped step as well.\n            upstreamKeys = [\n              upstream.kind === StepKind.UNRESOLVED_MAPPED\n                ? replacePlannedIndex(upstream.key, key)\n                : upstream.key,\n            ];\n          }\n\n          for (const upstreamKey of upstreamKeys) {\n            if (!nodeTable[upstreamKey]) {\n              continue;\n            }\n            nodeInput.dependsOn.push({solid: {name: upstreamKey}});\n            let upstreamOutput: GraphQueryItem['outputs'][0] = nodeTable[upstreamKey].outputs[0];\n            if (!upstreamOutput) {\n              upstreamOutput = {dependedBy: []};\n              nodeTable[upstreamKey].outputs.push(upstreamOutput);\n            }\n            upstreamOutput.dependedBy.push({\n              solid: {name: key},\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return Object.values(nodeTable);\n};\n\nexport const EXECUTION_PLAN_TO_GRAPH_FRAGMENT = gql`\n  fragment ExecutionPlanToGraphFragment on ExecutionPlan {\n    steps {\n      key\n      kind\n      inputs {\n        dependsOn {\n          key\n          kind\n        }\n      }\n    }\n  }\n`;\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Icon,\n  Table,\n  Tag,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {displayNameForAssetKey, tokenForAssetKey} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetKey} from '../assets/types';\n\nconst MAX_ASSET_TAGS = 3;\n\nexport const AssetKeyTagCollection: React.FC<{\n  assetKeys: AssetKey[] | null;\n  modalTitle?: string;\n  clickableTags?: boolean;\n}> = React.memo(({assetKeys, clickableTags, modalTitle = 'Assets in Run'}) => {\n  const [showMore, setShowMore] = React.useState(false);\n\n  if (!assetKeys || !assetKeys.length) {\n    return null;\n  }\n\n  const assetCount = assetKeys.length;\n  const displayed = assetCount <= MAX_ASSET_TAGS ? assetKeys : [];\n  const hidden = assetCount - displayed.length;\n\n  if (clickableTags) {\n    return (\n      <>\n        {displayed.map((assetKey, ii) => (\n          <Link to={assetDetailsPathForKey(assetKey)} key={`${tokenForAssetKey(assetKey)}-${ii}`}>\n            <Tag intent=\"none\" interactive icon=\"asset\">\n              {displayNameForAssetKey(assetKey)}\n            </Tag>\n          </Link>\n        ))}\n        {hidden > 0 && (\n          <ButtonLink onClick={() => setShowMore(true)}>\n            <Tag intent=\"none\" icon=\"asset\">\n              {hidden} assets\n            </Tag>\n          </ButtonLink>\n        )}\n        <Dialog\n          title={modalTitle}\n          onClose={() => setShowMore(false)}\n          style={{minWidth: '400px', maxWidth: '80vw', maxHeight: '70vh'}}\n          isOpen={showMore}\n        >\n          {showMore ? (\n            <Box\n              padding={{bottom: 12}}\n              border={{side: 'bottom', color: Colors.KeylineGray, width: 1}}\n              style={{overflowY: 'auto'}}\n              background={Colors.White}\n            >\n              <Table>\n                <thead>\n                  <tr>\n                    <th>Asset key</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {assetKeys.map((assetKey, ii) => (\n                    <tr key={`${tokenForAssetKey(assetKey)}-${ii}`}>\n                      <td>\n                        <Link\n                          to={assetDetailsPathForKey(assetKey)}\n                          key={tokenForAssetKey(assetKey)}\n                        >\n                          {displayNameForAssetKey(assetKey)}\n                        </Link>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </Box>\n          ) : null}\n          <DialogFooter>\n            <Button intent=\"primary\" autoFocus onClick={() => setShowMore(false)}>\n              OK\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      </>\n    );\n  }\n\n  return (\n    <Box flex={{direction: 'row', gap: 8, wrap: 'wrap', alignItems: 'center'}}>\n      <Icon color={Colors.Gray400} name=\"asset\" size={16} />\n      {`${displayed.map(displayNameForAssetKey).join(', ')}\n      ${\n        hidden > 0 && displayed.length > 0\n          ? ` + ${hidden} more`\n          : hidden > 0\n          ? `${hidden} assets`\n          : ''\n      }`}\n    </Box>\n  );\n});\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {Button, Colors, DialogBody, DialogFooter, Dialog, Group, Icon, Mono} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {NavigationBlock} from './NavitationBlock';\nimport {DELETE_MUTATION} from './RunUtils';\nimport {\n  Delete,\n  Delete_deletePipelineRun_RunNotFoundError,\n  Delete_deletePipelineRun_PythonError,\n  Delete_deletePipelineRun_UnauthorizedError,\n  DeleteVariables,\n} from './types/Delete';\n\nexport interface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  onTerminateInstead: () => void;\n  selectedRuns: SelectedRuns;\n}\n\ntype SelectedRuns = {[id: string]: boolean};\n\ntype Error =\n  | Delete_deletePipelineRun_PythonError\n  | Delete_deletePipelineRun_UnauthorizedError\n  | Delete_deletePipelineRun_RunNotFoundError\n  | undefined;\n\ntype DeletionDialogState = {\n  step: 'initial' | 'deleting' | 'completed';\n  frozenRuns: SelectedRuns;\n  deletion: {completed: number; errors: {[id: string]: Error}};\n};\n\ntype DeletionDialogAction =\n  | {type: 'reset'; frozenRuns: SelectedRuns}\n  | {type: 'start'}\n  | {type: 'deletion-success'}\n  | {type: 'deletion-error'; id: string; error: Error}\n  | {type: 'complete'};\n\nconst initializeState = (frozenRuns: SelectedRuns): DeletionDialogState => {\n  return {\n    step: 'initial',\n    frozenRuns,\n    deletion: {completed: 0, errors: {}},\n  };\n};\n\nconst deletionDialogReducer = (\n  prevState: DeletionDialogState,\n  action: DeletionDialogAction,\n): DeletionDialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initializeState(action.frozenRuns);\n    case 'start':\n      return {...prevState, step: 'deleting'};\n    case 'deletion-success': {\n      const {deletion} = prevState;\n      return {\n        ...prevState,\n        step: 'deleting',\n        deletion: {...deletion, completed: deletion.completed + 1},\n      };\n    }\n    case 'deletion-error': {\n      const {deletion} = prevState;\n      return {\n        ...prevState,\n        step: 'deleting',\n        deletion: {\n          ...deletion,\n          completed: deletion.completed + 1,\n          errors: {...deletion.errors, [action.id]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const DeletionDialog = (props: Props) => {\n  const {isOpen, onClose, onComplete, onTerminateInstead, selectedRuns} = props;\n  const frozenRuns = React.useRef<SelectedRuns>(selectedRuns);\n\n  const [state, dispatch] = React.useReducer(\n    deletionDialogReducer,\n    frozenRuns.current,\n    initializeState,\n  );\n\n  const runIDs = Object.keys(state.frozenRuns);\n  const count = runIDs.length;\n  const terminatableCount = runIDs.filter((id) => state.frozenRuns[id]).length;\n\n  // If the dialog is newly open, update state to match the frozen list.\n  React.useEffect(() => {\n    if (isOpen) {\n      dispatch({type: 'reset', frozenRuns: frozenRuns.current});\n    }\n  }, [isOpen]);\n\n  // If the dialog is not open, update the ref so that the frozen list will be entered\n  // into state the next time the dialog opens.\n  React.useEffect(() => {\n    if (!isOpen) {\n      frozenRuns.current = selectedRuns;\n    }\n  }, [isOpen, selectedRuns]);\n\n  const [destroy] = useMutation<Delete, DeleteVariables>(DELETE_MUTATION);\n\n  const mutate = async () => {\n    dispatch({type: 'start'});\n\n    const runList = Object.keys(state.frozenRuns);\n    for (let ii = 0; ii < runList.length; ii++) {\n      const runId = runList[ii];\n      const {data} = await destroy({variables: {runId}});\n\n      if (data?.deletePipelineRun.__typename === 'DeletePipelineRunSuccess') {\n        dispatch({type: 'deletion-success'});\n      } else {\n        dispatch({type: 'deletion-error', id: runId, error: data?.deletePipelineRun});\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    switch (state.step) {\n      case 'initial':\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <div>{`${count} ${count === 1 ? 'run' : 'runs'} will be deleted.`}</div>\n            <div>\n              Deleting runs will not prevent them from continuing to execute, and may result in\n              unexpected behavior.\n            </div>\n            {terminatableCount ? (\n              <div>\n                {terminatableCount > 1 ? (\n                  <>\n                    {`${terminatableCount} of these runs can be terminated. `}\n                    <strong>\n                      Please consider terminating these runs instead of deleting them.\n                    </strong>\n                  </>\n                ) : (\n                  <>\n                    {`1 run can be terminated instead. `}\n                    <strong>Please consider terminating this run instead of deleting it.</strong>\n                  </>\n                )}\n              </div>\n            ) : null}\n            <div>Do you wish to continue with deletion?</div>\n          </Group>\n        );\n      case 'deleting':\n      case 'completed':\n        const value = count > 0 ? state.deletion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <div>Deleting…</div>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'deleting' ? (\n              <NavigationBlock message=\"Deletion in progress, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    switch (state.step) {\n      case 'initial':\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"danger\" onClick={mutate}>\n              {`Yes, delete ${`${count} ${count === 1 ? 'run' : 'runs'}`}`}\n            </Button>\n            {terminatableCount ? (\n              <Button intent=\"primary\" onClick={onTerminateInstead}>\n                {`Terminate ${`${terminatableCount} ${\n                  terminatableCount === 1 ? 'run' : 'runs'\n                }`} instead`}\n              </Button>\n            ) : null}\n          </>\n        );\n      case 'deleting':\n        return (\n          <Button intent=\"danger\" disabled>\n            Deleting…\n          </Button>\n        );\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'deleting') {\n      return <div>Please do not close the window or navigate away during deletion.</div>;\n    }\n\n    const errors = state.deletion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.deletion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"center\">\n            <Icon name=\"check_circle\" color={Colors.Green500} />\n            <div>{`Successfully deleted ${successCount} ${\n              successCount === 1 ? 'run' : 'runs'\n            }.`}</div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"center\">\n              <Icon name=\"warning\" color={Colors.Yellow500} />\n              <div>{`Could not delete ${errorCount} ${errorCount === 1 ? 'run' : 'runs'}.`}</div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((runId) => (\n                <li key={runId}>\n                  <Group direction=\"row\" spacing={8}>\n                    <Mono>{runId.slice(0, 8)}</Mono>\n                    {errors[runId] ? <div>{errors[runId]?.message}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'deleting';\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      title=\"Delete runs\"\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\n\nconst OverflowFade = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 40px;\n  user-select: none;\n  pointer-events: none;\n  background: linear-gradient(to bottom, rgba(245, 248, 250, 0) 0%, rgba(245, 248, 250, 255) 100%);\n`;\n\nconst OverflowButtonContainer = styled.div`\n  position: absolute;\n  bottom: 6px;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst OverflowButton = styled.button`\n  border: 0;\n  cursor: pointer;\n  user-select: none;\n  font-size: 12px;\n  font-weight: 500;\n  background: rgba(100, 100, 100, 0.7);\n  border-radius: 4px;\n  line-height: 32px;\n  padding: 0 12px;\n  color: ${Colors.White};\n  &:hover {\n    background: rgba(100, 100, 100, 0.85);\n  }\n\n  &:focus,\n  &:active {\n    outline: none;\n  }\n\n  &:active {\n    background: rgba(0, 0, 0, 0.7);\n  }\n`;\n\nexport class CellTruncationProvider extends React.Component<\n  {\n    style: React.CSSProperties;\n    onExpand?: () => void;\n    forceExpandability?: boolean;\n  },\n  {isOverflowing: boolean}\n> {\n  state = {\n    isOverflowing: false,\n  };\n\n  private contentContainerRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  componentDidMount() {\n    this.detectOverflow();\n  }\n\n  componentDidUpdate() {\n    this.detectOverflow();\n  }\n\n  detectOverflow() {\n    const child =\n      this.contentContainerRef.current && this.contentContainerRef.current.firstElementChild;\n\n    if (!child) {\n      return;\n    }\n\n    const isOverflowing = child.scrollHeight > this.props.style.height!;\n    if (isOverflowing !== this.state.isOverflowing) {\n      this.setState({isOverflowing});\n    }\n  }\n\n  defaultExpand() {\n    const message =\n      this.contentContainerRef.current && this.contentContainerRef.current.textContent;\n    message &&\n      showCustomAlert({\n        body: <div style={{whiteSpace: 'pre-wrap'}}>{message}</div>,\n      });\n  }\n\n  onView = () => {\n    const {onExpand} = this.props;\n    onExpand ? onExpand() : this.defaultExpand();\n  };\n\n  render() {\n    const style = {...this.props.style, overflow: 'hidden'};\n\n    return (\n      <div style={style}>\n        <div ref={this.contentContainerRef}>{this.props.children}</div>\n        {(this.state.isOverflowing || this.props.forceExpandability) && (\n          <>\n            <OverflowFade />\n            <OverflowButtonContainer>\n              <OverflowButton onClick={this.onView}>View full message</OverflowButton>\n            </OverflowButtonContainer>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line no-restricted-imports\nimport {Intent} from '@blueprintjs/core';\nimport {Box, Colors, Tag} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link, useLocation} from 'react-router-dom';\n\nimport {assertUnreachable} from '../app/Util';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetKey} from '../assets/types';\nimport {\n  LogRowStructuredContentTable,\n  MetadataEntries,\n  MetadataEntryLink,\n} from '../metadata/MetadataEntry';\nimport {MetadataEntryFragment} from '../metadata/types/MetadataEntryFragment';\nimport {DagsterEventType, ErrorSource} from '../types/globalTypes';\n\nimport {EventTypeColumn} from './LogsRowComponents';\nimport {IRunMetadataDict} from './RunMetadataProvider';\nimport {eventTypeToDisplayType} from './getRunFilterProviders';\nimport {LogsRowStructuredFragment} from './types/LogsRowStructuredFragment';\n\ninterface IStructuredContentProps {\n  node: LogsRowStructuredFragment;\n  metadata: IRunMetadataDict;\n}\n\nexport const LogsRowStructuredContent: React.FC<IStructuredContentProps> = ({node, metadata}) => {\n  const location = useLocation();\n  const eventType = node.eventType as string;\n  switch (node.__typename) {\n    case 'ExecutionStepFailureEvent':\n      return (\n        <FailureContent\n          eventType={eventType}\n          error={node.error}\n          metadataEntries={node?.failureMetadata?.metadataEntries}\n          errorSource={node.errorSource}\n          message={node.error ? undefined : node.message}\n        />\n      );\n\n    case 'ExecutionStepUpForRetryEvent':\n      return <StepUpForRetryContent error={node.error} message={node.message} />;\n\n    case 'ExecutionStepStartEvent':\n      if (!node.stepKey || metadata.logCaptureSteps) {\n        return <DefaultContent message={node.message} eventType={eventType} />;\n      } else {\n        const currentQuery = qs.parse(location.search);\n        const updatedQuery = {\n          ...currentQuery,\n          logType: 'stdout',\n          logs: `query:${node.stepKey}`,\n          selection: node.stepKey,\n        };\n        const href = `${location.pathname}?${qs.stringify(updatedQuery)}`;\n        return (\n          <DefaultContent message={node.message} eventType={eventType}>\n            <LogRowStructuredContentTable\n              rows={[\n                {\n                  label: 'step_logs',\n                  item: (\n                    <Link to={href} style={{color: 'inherit'}}>\n                      View Raw Step Output\n                    </Link>\n                  ),\n                },\n              ]}\n            />\n          </DefaultContent>\n        );\n      }\n    case 'ExecutionStepSkippedEvent':\n      return (\n        <DefaultContent\n          message={node.message}\n          eventType={eventType}\n          eventColor=\"rgba(173, 185, 152, 0.3)\"\n        />\n      );\n\n    case 'ExecutionStepRestartEvent':\n      return <DefaultContent message={node.message} eventType={eventType} />;\n\n    case 'ExecutionStepSuccessEvent':\n      return <DefaultContent message={node.message} eventType={eventType} eventIntent=\"success\" />;\n    case 'ExecutionStepInputEvent':\n      return (\n        <DefaultContent\n          message={\n            node.message + (node.typeCheck.description ? ' ' + node.typeCheck.description : '')\n          }\n          eventType={eventType}\n          eventIntent={node.typeCheck.success ? 'success' : 'warning'}\n        >\n          <MetadataEntries entries={node.typeCheck.metadataEntries} />\n        </DefaultContent>\n      );\n    case 'ExecutionStepOutputEvent':\n      return (\n        <DefaultContent\n          message={\n            node.message + (node.typeCheck.description ? ' ' + node.typeCheck.description : '')\n          }\n          eventType={eventType}\n          eventIntent={node.typeCheck.success ? 'success' : 'warning'}\n        >\n          <>\n            <MetadataEntries entries={node.typeCheck.metadataEntries} />\n            <MetadataEntries entries={node.metadataEntries} />\n          </>\n        </DefaultContent>\n      );\n    case 'StepExpectationResultEvent':\n      return (\n        <DefaultContent\n          message={node.message}\n          eventType={eventType}\n          eventIntent={node.expectationResult.success ? 'success' : 'warning'}\n        >\n          <MetadataEntries entries={node.expectationResult.metadataEntries} />\n        </DefaultContent>\n      );\n    case 'MaterializationEvent':\n      return (\n        <AssetMetadataContent\n          message={node.message}\n          assetKey={node.assetKey}\n          metadataEntries={node.metadataEntries}\n          eventType={eventType}\n          timestamp={node.timestamp}\n        />\n      );\n    case 'ObservationEvent':\n      return (\n        <AssetMetadataContent\n          message=\"\"\n          assetKey={node.assetKey}\n          metadataEntries={node.metadataEntries}\n          eventType={eventType}\n          timestamp={node.timestamp}\n        />\n      );\n    case 'AssetMaterializationPlannedEvent':\n      return <DefaultContent eventType={eventType} message={node.message} />;\n    case 'ObjectStoreOperationEvent':\n      return (\n        <DefaultContent message={node.message} eventType={eventType}>\n          <MetadataEntries entries={node.operationResult.metadataEntries} />\n        </DefaultContent>\n      );\n    case 'HandledOutputEvent':\n      return (\n        <DefaultContent message={node.message} eventType={eventType}>\n          <MetadataEntries entries={node.metadataEntries} />\n        </DefaultContent>\n      );\n    case 'LoadedInputEvent':\n      return (\n        <DefaultContent message={node.message} eventType={eventType}>\n          <MetadataEntries entries={node.metadataEntries} />\n        </DefaultContent>\n      );\n    case 'HookCompletedEvent':\n      return <DefaultContent eventType={eventType} message={node.message} />;\n    case 'HookSkippedEvent':\n      return <DefaultContent eventType={eventType} message={node.message} />;\n    case 'HookErroredEvent':\n      return <FailureContent eventType={eventType} error={node.error} />;\n    case 'AlertStartEvent':\n      return <DefaultContent eventType={eventType} message={node.message} />;\n    case 'AlertSuccessEvent':\n      return <DefaultContent eventType={eventType} message={node.message} />;\n    case 'AlertFailureEvent':\n      return <DefaultContent eventType={eventType} message={node.message} eventIntent=\"warning\" />;\n    case 'ResourceInitFailureEvent':\n    case 'RunFailureEvent':\n      if (node.error) {\n        return <FailureContent message={node.message} error={node.error} eventType={eventType} />;\n      }\n      return <DefaultContent message={node.message} eventType={eventType} eventIntent=\"danger\" />;\n    case 'RunSuccessEvent':\n      return <DefaultContent message={node.message} eventType={eventType} eventIntent=\"success\" />;\n    case 'RunStartEvent':\n    case 'RunEnqueuedEvent':\n    case 'RunDequeuedEvent':\n    case 'RunStartingEvent':\n    case 'RunCancelingEvent':\n    case 'ResourceInitStartedEvent':\n    case 'ResourceInitSuccessEvent':\n    case 'StepWorkerStartedEvent':\n    case 'StepWorkerStartingEvent':\n      return <DefaultContent message={node.message} eventType={eventType} />;\n    case 'RunCanceledEvent':\n      return <FailureContent message={node.message} eventType={eventType} />;\n    case 'EngineEvent':\n      if (node.error) {\n        return <FailureContent message={node.message} error={node.error} eventType={eventType} />;\n      }\n      return (\n        <DefaultContent\n          message={node.message}\n          eventType={eventType}\n          eventColor=\"rgba(27,164,206,0.2)\"\n        >\n          <MetadataEntries entries={node.metadataEntries} />\n        </DefaultContent>\n      );\n    case 'LogMessageEvent':\n      return <DefaultContent message={node.message} />;\n    case 'LogsCapturedEvent':\n      const currentQuery = qs.parse(location.search, {ignoreQueryPrefix: true});\n      const updatedQuery = {...currentQuery, logType: 'stdout', logFileKey: node.stepKey};\n      const rawLogsUrl = `${location.pathname}?${qs.stringify(updatedQuery)}`;\n      const rawLogsLink = (\n        <Link to={rawLogsUrl} style={{color: 'inherit'}}>\n          View stdout / stderr\n        </Link>\n      );\n      const rows = node.stepKey\n        ? [\n            {\n              label: 'captured_logs',\n              item: rawLogsLink,\n            },\n          ]\n        : [\n            {\n              label: 'step_keys',\n              item: <>{JSON.stringify(node.stepKeys)}</>,\n            },\n            {\n              label: 'captured_logs',\n              item: rawLogsLink,\n            },\n          ];\n      return (\n        <DefaultContent eventType={eventType} message={node.message}>\n          <LogRowStructuredContentTable rows={rows} />\n        </DefaultContent>\n      );\n    default:\n      // This allows us to check that the switch is exhaustive because the union type should\n      // have been narrowed following each successive case to `never` at this point.\n      return assertUnreachable(node);\n  }\n};\n\n// Structured Content Renderers\n\nconst DefaultContent: React.FC<{\n  message: string;\n  eventType?: string;\n  eventColor?: string;\n  eventIntent?: Intent;\n  metadataEntries?: MetadataEntryFragment[];\n  children?: React.ReactElement;\n}> = ({message, eventType, eventColor, eventIntent, children}) => {\n  return (\n    <>\n      <EventTypeColumn>\n        {eventType && (\n          <Tag\n            intent={eventIntent}\n            style={\n              eventColor\n                ? {\n                    fontSize: '0.9em',\n                    color: 'black',\n                    background: eventColor,\n                  }\n                : {\n                    fontSize: '0.9em',\n                  }\n            }\n          >\n            {eventTypeToDisplayType(eventType)}\n          </Tag>\n        )}\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {message}\n        {children}\n      </Box>\n    </>\n  );\n};\n\nconst FailureContent: React.FC<{\n  message?: string;\n  eventType: string;\n  error?: PythonErrorFragment | null;\n  errorSource?: ErrorSource | null;\n  metadataEntries?: MetadataEntryFragment[];\n}> = ({message, error, errorSource, eventType, metadataEntries}) => {\n  let contextMessage = null;\n  let errorMessage = null;\n  let errorStack = null;\n  let errorCause = null;\n\n  if (message) {\n    contextMessage = (\n      <>\n        <span>{message}</span>\n        <br />\n      </>\n    );\n  }\n\n  if (error) {\n    errorMessage = <span style={{color: Colors.Red500}}>{`${error.message}`}</span>;\n\n    // omit the outer stack for user code errors with a cause\n    // as the outer stack is just framework code\n    if (\n      error.stack.length &&\n      !(errorSource === ErrorSource.USER_CODE_ERROR && error.causes.length)\n    ) {\n      errorStack = <span style={{color: Colors.Red500}}>{`\\nStack Trace:\\n${error.stack}`}</span>;\n    }\n\n    if (error.causes.length) {\n      errorCause = error.causes.map((cause) => (\n        <>\n          {`The above exception was caused by the following exception:\\n`}\n          <span style={{color: Colors.Red500}}>{`${cause.message}`}</span>\n          {cause?.stack.length ? (\n            <span style={{color: Colors.Red500}}>{`\\nStack Trace:\\n${cause.stack}`}</span>\n          ) : null}\n        </>\n      ));\n    }\n  }\n\n  return (\n    <>\n      <EventTypeColumn>\n        <Tag minimal intent=\"danger\">\n          {eventTypeToDisplayType(eventType)}\n        </Tag>\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {contextMessage}\n        {errorMessage}\n        <MetadataEntries entries={metadataEntries} />\n        {errorStack}\n        {errorCause}\n      </Box>\n    </>\n  );\n};\n\nconst StepUpForRetryContent: React.FC<{\n  message?: string;\n  error?: PythonErrorFragment | null;\n}> = ({message, error}) => {\n  let contextMessage = null;\n  let errorCause = null;\n  let errorMessage = null;\n  let errorStack = null;\n\n  if (message) {\n    contextMessage = (\n      <>\n        <span>{message}</span>\n        <br />\n      </>\n    );\n  }\n\n  if (error) {\n    // If no cause, this was a `raise RetryRequest` inside the op. Show the trace for the main error.\n    if (!error.causes.length) {\n      errorMessage = <span style={{color: Colors.Red500}}>{`${error.message}`}</span>;\n      errorStack = <span style={{color: Colors.Red500}}>{`\\nStack Trace:\\n${error.stack}`}</span>;\n    } else {\n      // If there is a cause, this was a different exception. Show that instead.\n      errorCause = (\n        <>\n          {error.causes.map((cause, index) => (\n            <>\n              {index === 0\n                ? `The retry request was caused by the following exception:\\n`\n                : `The above exception was caused by the following exception:\\n`}\n              <span style={{color: Colors.Red500}}>{`${cause.message}`}</span>\n              <span style={{color: Colors.Red500}}>{`\\nStack Trace:\\n${cause.stack}`}</span>\n            </>\n          ))}\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n      <EventTypeColumn>\n        <Tag minimal intent=\"warning\">\n          {eventTypeToDisplayType(DagsterEventType.STEP_UP_FOR_RETRY)}\n        </Tag>\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {contextMessage}\n        {errorMessage}\n        {errorStack}\n        {errorCause}\n      </Box>\n    </>\n  );\n};\n\nconst AssetMetadataContent: React.FC<{\n  message: string;\n  assetKey: AssetKey | null;\n  metadataEntries: MetadataEntryFragment[];\n  eventType: string;\n  timestamp: string;\n}> = ({message, assetKey, metadataEntries, eventType, timestamp}) => {\n  if (!assetKey) {\n    return (\n      <DefaultContent message={message} eventType={eventType}>\n        <MetadataEntries entries={metadataEntries} />\n      </DefaultContent>\n    );\n  }\n\n  const to = assetDetailsPathForKey(assetKey, {asOf: timestamp});\n\n  const assetDashboardLink = (\n    <span style={{marginLeft: 10}}>\n      [<MetadataEntryLink to={to}>View Asset</MetadataEntryLink>]\n    </span>\n  );\n\n  return (\n    <DefaultContent message={message} eventType={eventType}>\n      <>\n        <LogRowStructuredContentTable\n          styles={metadataEntries?.length ? {paddingBottom: 0} : {}}\n          rows={[\n            {\n              label: 'asset_key',\n              item: (\n                <>\n                  {displayNameForAssetKey(assetKey)}\n                  {assetDashboardLink}\n                </>\n              ),\n            },\n          ]}\n        />\n        <MetadataEntries entries={metadataEntries} />\n      </>\n    </DefaultContent>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {setHighlightedGanttChartTime} from '../gantt/GanttChart';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {LogLevel} from '../types/globalTypes';\n\nimport {CellTruncationProvider} from './CellTruncationProvider';\nimport {\n  EventTypeColumn,\n  Row,\n  OpColumn,\n  StructuredContent,\n  TimestampColumn,\n} from './LogsRowComponents';\nimport {LogsRowStructuredContent} from './LogsRowStructuredContent';\nimport {IRunMetadataDict} from './RunMetadataProvider';\nimport {LogsRowStructuredFragment} from './types/LogsRowStructuredFragment';\nimport {LogsRowUnstructuredFragment} from './types/LogsRowUnstructuredFragment';\n\ninterface StructuredProps {\n  node: LogsRowStructuredFragment;\n  metadata: IRunMetadataDict;\n  style: React.CSSProperties;\n  highlighted: boolean;\n}\n\ninterface StructuredState {\n  expanded: boolean;\n}\n\nexport class Structured extends React.Component<StructuredProps, StructuredState> {\n  onExpand = () => {\n    const {node, metadata} = this.props;\n\n    if (node.__typename === 'ExecutionStepFailureEvent') {\n      showCustomAlert({\n        title: 'Error',\n        body: (\n          <PythonErrorInfo\n            error={node.error ? node.error : node}\n            failureMetadata={node.failureMetadata}\n            errorSource={node.errorSource}\n          />\n        ),\n      });\n    } else if (node.__typename === 'ExecutionStepUpForRetryEvent') {\n      showCustomAlert({\n        title: 'Step Retry',\n        body: <PythonErrorInfo error={node.error ? node.error : node} />,\n      });\n    } else if (\n      (node.__typename === 'EngineEvent' && node.error) ||\n      (node.__typename === 'RunFailureEvent' && node.error) ||\n      node.__typename === 'HookErroredEvent' ||\n      node.__typename === 'ResourceInitFailureEvent'\n    ) {\n      showCustomAlert({\n        title: 'Error',\n        body: <PythonErrorInfo error={node.error ? node.error : node} />,\n      });\n    } else {\n      showCustomAlert({\n        title: node.stepKey || 'Info',\n        body: (\n          <StructuredContent>\n            <LogsRowStructuredContent node={node} metadata={metadata} />\n          </StructuredContent>\n        ),\n      });\n    }\n  };\n\n  render() {\n    return (\n      <CellTruncationProvider style={this.props.style} onExpand={this.onExpand}>\n        <StructuredMemoizedContent\n          node={this.props.node}\n          metadata={this.props.metadata}\n          highlighted={this.props.highlighted}\n        />\n      </CellTruncationProvider>\n    );\n  }\n}\n\nexport const LOGS_ROW_STRUCTURED_FRAGMENT = gql`\n  fragment LogsRowStructuredFragment on DagsterRunEvent {\n    __typename\n    ... on MessageEvent {\n      message\n      eventType\n      timestamp\n      level\n      stepKey\n    }\n    ... on DisplayableEvent {\n      label\n      description\n      metadataEntries {\n        ...MetadataEntryFragment\n      }\n    }\n    ... on MarkerEvent {\n      markerStart\n      markerEnd\n    }\n    ... on ErrorEvent {\n      error {\n        ...PythonErrorFragment\n      }\n    }\n    ... on MaterializationEvent {\n      assetKey {\n        path\n      }\n    }\n    ... on ObservationEvent {\n      assetKey {\n        path\n      }\n    }\n    ... on ExecutionStepFailureEvent {\n      errorSource\n      failureMetadata {\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n      }\n    }\n    ... on ExecutionStepInputEvent {\n      inputName\n      typeCheck {\n        label\n        description\n        success\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n      }\n    }\n    ... on ExecutionStepOutputEvent {\n      outputName\n      typeCheck {\n        label\n        description\n        success\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n      }\n    }\n    ... on StepExpectationResultEvent {\n      expectationResult {\n        success\n        label\n        description\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n      }\n    }\n    ... on ObjectStoreOperationEvent {\n      operationResult {\n        op\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n      }\n    }\n    ... on HandledOutputEvent {\n      outputName\n      managerKey\n    }\n    ... on LoadedInputEvent {\n      inputName\n      managerKey\n      upstreamOutputName\n      upstreamStepKey\n    }\n    ... on LogsCapturedEvent {\n      fileKey\n      stepKeys\n      externalUrl\n    }\n  }\n  ${METADATA_ENTRY_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst StructuredMemoizedContent: React.FC<{\n  node: LogsRowStructuredFragment;\n  metadata: IRunMetadataDict;\n  highlighted: boolean;\n}> = React.memo(({node, metadata, highlighted}) => {\n  const stepKey = node.stepKey;\n  const step = stepKey ? metadata.steps[stepKey] : null;\n  const stepStartTime = step?.start;\n\n  return (\n    <Row\n      level={LogLevel.INFO}\n      onMouseEnter={() => setHighlightedGanttChartTime(node.timestamp)}\n      onMouseLeave={() => setHighlightedGanttChartTime(null)}\n      highlighted={highlighted}\n    >\n      <OpColumn stepKey={'stepKey' in node && node.stepKey} />\n      <StructuredContent>\n        <LogsRowStructuredContent node={node} metadata={metadata} />\n      </StructuredContent>\n      <TimestampColumn\n        time={'timestamp' in node ? node.timestamp : null}\n        runStartTime={metadata.startedPipelineAt}\n        stepStartTime={stepStartTime}\n      />\n    </Row>\n  );\n});\n\nStructuredMemoizedContent.displayName = 'StructuredMemoizedContent';\n\ninterface UnstructuredProps {\n  node: LogsRowUnstructuredFragment;\n  style: React.CSSProperties;\n  highlighted: boolean;\n  metadata: IRunMetadataDict;\n}\n\nexport class Unstructured extends React.Component<UnstructuredProps> {\n  onExpand = () => {\n    showCustomAlert({\n      title: 'Log',\n      body: <div style={{whiteSpace: 'pre-wrap'}}>{this.props.node.message}</div>,\n    });\n  };\n\n  render() {\n    return (\n      <CellTruncationProvider style={this.props.style} onExpand={this.onExpand}>\n        <UnstructuredMemoizedContent\n          node={this.props.node}\n          highlighted={this.props.highlighted}\n          metadata={this.props.metadata}\n        />\n      </CellTruncationProvider>\n    );\n  }\n}\n\nexport const LOGS_ROW_UNSTRUCTURED_FRAGMENT = gql`\n  fragment LogsRowUnstructuredFragment on DagsterRunEvent {\n    __typename\n    ... on MessageEvent {\n      message\n      timestamp\n      level\n      stepKey\n    }\n  }\n`;\n\nconst UnstructuredMemoizedContent: React.FC<{\n  node: LogsRowUnstructuredFragment;\n  metadata: IRunMetadataDict;\n  highlighted: boolean;\n}> = React.memo(({node, highlighted, metadata}) => {\n  const stepKey = node.stepKey;\n  const step = stepKey ? metadata.steps[stepKey] : null;\n  const stepStartTime = step?.start;\n\n  return (\n    <Row\n      level={node.level}\n      onMouseEnter={() => setHighlightedGanttChartTime(node.timestamp)}\n      onMouseLeave={() => setHighlightedGanttChartTime(null)}\n      highlighted={highlighted}\n    >\n      <OpColumn stepKey={node.stepKey} />\n      <EventTypeColumn>\n        <span style={{marginLeft: 8}}>{node.level}</span>\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {node.message}\n      </Box>\n      <TimestampColumn\n        time={node.timestamp}\n        runStartTime={metadata.startedPipelineAt}\n        stepStartTime={stepStartTime}\n      />\n    </Row>\n  );\n});\n\nUnstructuredMemoizedContent.displayName = 'UnstructuredMemoizedContent';\n","import {gql} from '@apollo/client';\nimport {Colors, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {CellMeasurer, CellMeasurerCache, List, ListRowProps, ScrollParams} from 'react-virtualized';\nimport styled from 'styled-components/macro';\n\nimport {LogFilter, LogsProviderLogs} from './LogsProvider';\nimport {\n  LOGS_ROW_STRUCTURED_FRAGMENT,\n  LOGS_ROW_UNSTRUCTURED_FRAGMENT,\n  Structured,\n  Unstructured,\n} from './LogsRow';\nimport {ColumnWidthsProvider, Headers} from './LogsScrollingTableHeader';\nimport {IRunMetadataDict} from './RunMetadataProvider';\nimport {eventTypeToDisplayType} from './getRunFilterProviders';\nimport {logNodeLevel} from './logNodeLevel';\nimport {RunDagsterRunEventFragment} from './types/RunDagsterRunEventFragment';\n\nconst LOGS_PADDING_BOTTOM = 50;\n\ninterface ILogsScrollingTableProps {\n  logs: LogsProviderLogs;\n  filter: LogFilter;\n  filterStepKeys: string[];\n\n  // We use this string to know whether the changes to `nodes` require us to\n  // re-layout the entire table. Appending new rows can be done very fast, but\n  // removing some rows requires the whole list be \"reflowed\" again. Checking\n  // `nodes` for equality doesn't let us optimize for the append- case.\n  filterKey: string;\n  metadata: IRunMetadataDict;\n}\n\ninterface ILogsScrollingTableSizedProps {\n  width: number;\n  height: number;\n\n  filteredNodes: (RunDagsterRunEventFragment & {clientsideKey: string})[];\n  textMatchNodes: (RunDagsterRunEventFragment & {clientsideKey: string})[];\n\n  filterKey: string;\n  loading: boolean;\n  focusedTime: number;\n  metadata: IRunMetadataDict;\n}\n\nfunction filterLogs(logs: LogsProviderLogs, filter: LogFilter, filterStepKeys: string[]) {\n  const filteredNodes = logs.allNodes.filter((node) => {\n    // These events are used to determine which assets a run will materialize and are not intended\n    // to be displayed in Dagit. Pagination is offset based, so we remove these logs client-side.\n    if (node.__typename === 'AssetMaterializationPlannedEvent') {\n      return false;\n    }\n    const l = logNodeLevel(node);\n    if (!filter.levels[l]) {\n      return false;\n    }\n    if (filter.sinceTime && Number(node.timestamp) < filter.sinceTime) {\n      return false;\n    }\n    return true;\n  });\n\n  const hasTextFilter = !!(filter.logQuery.length && filter.logQuery[0].value !== '');\n\n  const textMatchNodes = hasTextFilter\n    ? filteredNodes.filter((node) => {\n        return (\n          filter.logQuery.length > 0 &&\n          filter.logQuery.every((f) => {\n            if (f.token === 'query') {\n              return node.stepKey && filterStepKeys.includes(node.stepKey);\n            }\n            if (f.token === 'step') {\n              return node.stepKey && node.stepKey === f.value;\n            }\n            if (f.token === 'type') {\n              return node.eventType && f.value === eventTypeToDisplayType(node.eventType);\n            }\n            return node.message.toLowerCase().includes(f.value.toLowerCase());\n          })\n        );\n      })\n    : [];\n\n  return {\n    filteredNodes: hasTextFilter && filter.hideNonMatches ? textMatchNodes : filteredNodes,\n    textMatchNodes,\n  };\n}\n\nexport const LogsScrollingTable: React.FC<ILogsScrollingTableProps> = (props) => {\n  const {filterKey, filterStepKeys, metadata, filter, logs} = props;\n  const table = React.useRef<LogsScrollingTableSized>(null);\n\n  return (\n    <ColumnWidthsProvider onWidthsChanged={() => table.current && table.current.didResize()}>\n      <Headers />\n      <div style={{flex: 1, minHeight: 0, marginTop: -1}}>\n        <AutoSizer>\n          {({width, height}) => (\n            <LogsScrollingTableSized\n              width={width}\n              height={height}\n              ref={table}\n              filterKey={filterKey}\n              loading={logs.loading}\n              metadata={metadata}\n              focusedTime={filter.focusedTime}\n              {...filterLogs(logs, filter, filterStepKeys)}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </ColumnWidthsProvider>\n  );\n};\n\nexport const LOGS_SCROLLING_TABLE_MESSAGE_FRAGMENT = gql`\n  fragment LogsScrollingTableMessageFragment on DagsterRunEvent {\n    __typename\n    ...LogsRowStructuredFragment\n    ...LogsRowUnstructuredFragment\n  }\n\n  ${LOGS_ROW_STRUCTURED_FRAGMENT}\n  ${LOGS_ROW_UNSTRUCTURED_FRAGMENT}\n`;\n\nclass LogsScrollingTableSized extends React.Component<ILogsScrollingTableSizedProps> {\n  list = React.createRef<List>();\n\n  get listEl() {\n    // eslint-disable-next-line react/no-find-dom-node\n    const el = this.list.current && ReactDOM.findDOMNode(this.list.current);\n    if (!(el instanceof HTMLElement)) {\n      return null;\n    }\n    return el;\n  }\n\n  cache = new CellMeasurerCache({\n    defaultHeight: 30,\n    fixedWidth: true,\n    keyMapper: (rowIndex) =>\n      this.props.filteredNodes ? this.props.filteredNodes[rowIndex].clientsideKey : '',\n  });\n\n  isAtBottomOrZero = true;\n  scrollToBottomObserver: MutationObserver | null = null;\n\n  componentDidMount() {\n    this.attachScrollToBottomObserver();\n    if (this.props.focusedTime) {\n      window.requestAnimationFrame(() => {\n        this.scrollToTime(this.props.focusedTime);\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: ILogsScrollingTableSizedProps) {\n    if (!this.list.current) {\n      return;\n    }\n\n    if (this.props.width !== prevProps.width) {\n      this.didResize();\n    }\n    if (this.props.filterKey !== prevProps.filterKey) {\n      this.list.current.recomputeGridSize();\n    }\n\n    if (\n      this.props.focusedTime &&\n      this.props.filteredNodes?.length !== prevProps.filteredNodes?.length\n    ) {\n      window.requestAnimationFrame(() => {\n        this.scrollToTime(this.props.focusedTime);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.scrollToBottomObserver) {\n      this.scrollToBottomObserver.disconnect();\n    }\n  }\n\n  didResize() {\n    this.cache.clearAll();\n    this.forceUpdate();\n  }\n\n  attachScrollToBottomObserver() {\n    const el = this.listEl;\n    if (!el) {\n      console.warn(`No container, LogsScrollingTable must render listEl`);\n      return;\n    }\n\n    let lastHeight: string | null = null;\n\n    this.scrollToBottomObserver = new MutationObserver(() => {\n      const rowgroupEl = el.querySelector('[role=rowgroup]') as HTMLElement;\n      if (!rowgroupEl) {\n        lastHeight = null;\n        return;\n      }\n      if (rowgroupEl.style.height === lastHeight) {\n        return;\n      }\n      if (!this.isAtBottomOrZero) {\n        return;\n      }\n\n      lastHeight = rowgroupEl.style.height;\n      el.scrollTop = el.scrollHeight - el.clientHeight;\n    });\n\n    this.scrollToBottomObserver.observe(el, {\n      attributes: true,\n      subtree: true,\n    });\n  }\n\n  onScroll = ({scrollTop, scrollHeight, clientHeight}: ScrollParams) => {\n    const atTopAndStarting = scrollTop === 0 && scrollHeight <= clientHeight;\n\n    // Note: The distance to the bottom can go negative if you scroll into the padding at the bottom of the list.\n    // react-virtualized seems to be faking these numbers (they're different than what you get if you inspect the el)\n    const distanceToBottom = scrollHeight - clientHeight - scrollTop;\n    const atBottom = distanceToBottom < 5;\n\n    this.isAtBottomOrZero = atTopAndStarting || atBottom;\n  };\n\n  scrollToTime = (ms: number) => {\n    if (!this.props.filteredNodes || !this.list.current) {\n      return;\n    }\n\n    // Stop the table from attempting to return to the bottom-of-feed\n    // if more logs arrive.\n    this.isAtBottomOrZero = false;\n\n    // Find the row immediately at or after the provided timestamp\n    const target: {index: number; alignment: 'center'} = {\n      index: this.props.filteredNodes.findIndex((n) => Number(n.timestamp) >= ms),\n      alignment: 'center',\n    };\n    if (target.index === -1) {\n      target.index = this.props.filteredNodes.length - 1;\n    }\n\n    // Move to the offset. For some reason, this takes multiple iterations but not multiple renders.\n    // It seems react-virtualized may be using default row height for rows more than X rows away and\n    // the number gets more accurate as we scroll, which is very annoying.\n    let offset = 0;\n    let iterations = 0;\n    while (offset !== this.list.current.getOffsetForRow(target)) {\n      offset = this.list.current.getOffsetForRow(target);\n      this.list.current.scrollToPosition(offset);\n      iterations += 1;\n      if (iterations > 20) {\n        break;\n      }\n    }\n  };\n\n  rowRenderer = ({parent, index, style}: ListRowProps) => {\n    if (!this.props.filteredNodes) {\n      return;\n    }\n    const node = this.props.filteredNodes[index];\n    const focusedTimeMatch = Number(node.timestamp) === this.props.focusedTime;\n    const textMatch = !!this.props.textMatchNodes?.includes(node);\n\n    const metadata = this.props.metadata;\n    if (!node) {\n      return <span />;\n    }\n    const isLastRow = index === this.props.filteredNodes.length - 1;\n    const lastRowStyles = isLastRow\n      ? {\n          borderBottom: `1px solid ${Colors.Gray100}`,\n        }\n      : {};\n\n    return (\n      <CellMeasurer cache={this.cache} index={index} parent={parent} key={node.clientsideKey}>\n        {node.__typename === 'LogMessageEvent' ? (\n          <Unstructured\n            node={node}\n            metadata={metadata}\n            style={{...style, width: this.props.width, ...lastRowStyles}}\n            highlighted={textMatch || focusedTimeMatch}\n          />\n        ) : (\n          <Structured\n            node={node}\n            metadata={metadata}\n            style={{...style, width: this.props.width, ...lastRowStyles}}\n            highlighted={textMatch || focusedTimeMatch}\n          />\n        )}\n      </CellMeasurer>\n    );\n  };\n\n  noContentRenderer = () => {\n    if (this.props.filteredNodes) {\n      return <NonIdealState icon=\"no-results\" title=\"No logs to display\" />;\n    }\n    return <span />;\n  };\n\n  render() {\n    const {filteredNodes, height, loading, width} = this.props;\n    return (\n      <div>\n        {loading ? (\n          <ListEmptyState>\n            <NonIdealState icon=\"spinner\" title=\"Fetching logs...\" />\n          </ListEmptyState>\n        ) : null}\n        <List\n          ref={this.list}\n          deferredMeasurementCache={this.cache}\n          rowCount={filteredNodes?.length || 0}\n          noContentRenderer={this.noContentRenderer}\n          rowHeight={this.cache.rowHeight}\n          rowRenderer={this.rowRenderer}\n          width={width}\n          height={height}\n          overscanRowCount={10}\n          style={{paddingBottom: LOGS_PADDING_BOTTOM}}\n          onScroll={this.onScroll}\n        />\n      </div>\n    );\n  }\n}\n\nclass AutoSizer extends React.Component<{\n  children: (size: {width: number; height: number}) => React.ReactNode;\n}> {\n  state = {\n    width: 0,\n    height: 0,\n  };\n\n  resizeObserver: any | undefined;\n\n  componentDidMount() {\n    this.measure();\n\n    // eslint-disable-next-line react/no-find-dom-node\n    const el = ReactDOM.findDOMNode(this);\n    if (el && el instanceof HTMLElement && 'ResizeObserver' in window) {\n      const RO = window['ResizeObserver'] as any;\n      this.resizeObserver = new RO((entries: any) => {\n        this.setState({\n          width: entries[0].contentRect.width,\n          height: entries[0].contentRect.height,\n        });\n      });\n      this.resizeObserver.observe(el);\n    }\n  }\n\n  componentDidUpdate() {\n    this.measure();\n  }\n\n  componentWillUnmount() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  measure() {\n    // eslint-disable-next-line react/no-find-dom-node\n    const el = ReactDOM.findDOMNode(this);\n    if (!el || !(el instanceof HTMLElement)) {\n      return;\n    }\n    if (el.clientWidth !== this.state.width || el.clientHeight !== this.state.height) {\n      this.setState({width: el.clientWidth, height: el.clientHeight});\n    }\n  }\n\n  render() {\n    return <div style={{width: '100%', height: '100%'}}>{this.props.children(this.state)}</div>;\n  }\n}\n\nconst ListEmptyState = styled.div`\n  background-color: rgba(255, 255, 255, 0.7);\n  z-index: 100;\n  position: absolute;\n  width: 100%;\n  height: calc(100% - 50px);\n`;\n","import {gql} from '@apollo/client';\nimport {\n  Button,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  MenuItem,\n  Menu,\n  MetadataTable,\n  Popover,\n  Tooltip,\n  Subheading,\n  Box,\n  StyledReadOnlyCodeMirror,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {SharedToaster} from '../app/DomUtils';\nimport {usePermissions} from '../app/Permissions';\nimport {useCopyToClipboard} from '../app/browser';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {RunStatus} from '../types/globalTypes';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePathFromRunDetails, workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {RunTags} from './RunTags';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {TimeElapsed} from './TimeElapsed';\nimport {RunDetailsFragment} from './types/RunDetailsFragment';\nimport {RunFragment} from './types/RunFragment';\n\nexport const timingStringForStatus = (status?: RunStatus) => {\n  switch (status) {\n    case RunStatus.QUEUED:\n      return 'Queued';\n    case RunStatus.CANCELED:\n      return 'Canceled';\n    case RunStatus.CANCELING:\n      return 'Canceling…';\n    case RunStatus.FAILURE:\n      return 'Failed';\n    case RunStatus.NOT_STARTED:\n      return 'Waiting to start…';\n    case RunStatus.STARTED:\n      return 'Started…';\n    case RunStatus.STARTING:\n      return 'Starting…';\n    case RunStatus.SUCCESS:\n      return 'Succeeded';\n    default:\n      return 'None';\n  }\n};\n\nconst LoadingOrValue: React.FC<{\n  loading: boolean;\n  children: () => React.ReactNode;\n}> = ({loading, children}) =>\n  loading ? <div style={{color: Colors.Gray400}}>Loading…</div> : <div>{children()}</div>;\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const RunDetails: React.FC<{\n  loading: boolean;\n  run: RunDetailsFragment | undefined;\n}> = ({loading, run}) => {\n  return (\n    <MetadataTable\n      spacing={0}\n      rows={[\n        {\n          key: 'Started',\n          value: (\n            <LoadingOrValue loading={loading}>\n              {() => {\n                if (run?.startTime) {\n                  return <TimestampDisplay timestamp={run.startTime} timeFormat={TIME_FORMAT} />;\n                }\n                return (\n                  <div style={{color: Colors.Gray400}}>{timingStringForStatus(run?.status)}</div>\n                );\n              }}\n            </LoadingOrValue>\n          ),\n        },\n        {\n          key: 'Ended',\n          value: (\n            <LoadingOrValue loading={loading}>\n              {() => {\n                if (run?.endTime) {\n                  return <TimestampDisplay timestamp={run.endTime} timeFormat={TIME_FORMAT} />;\n                }\n                return (\n                  <div style={{color: Colors.Gray400}}>{timingStringForStatus(run?.status)}</div>\n                );\n              }}\n            </LoadingOrValue>\n          ),\n        },\n        {\n          key: 'Duration',\n          value: (\n            <LoadingOrValue loading={loading}>\n              {() => {\n                if (run?.startTime) {\n                  return <TimeElapsed startUnix={run.startTime} endUnix={run.endTime} />;\n                }\n                return (\n                  <div style={{color: Colors.Gray400}}>{timingStringForStatus(run?.status)}</div>\n                );\n              }}\n            </LoadingOrValue>\n          ),\n        },\n      ]}\n    />\n  );\n};\n\ntype VisibleDialog = 'config' | 'delete' | 'terminate' | null;\n\nexport const RunConfigDialog: React.FC<{run: RunFragment; isJob: boolean}> = ({run, isJob}) => {\n  const {runConfigYaml} = run;\n  const [visibleDialog, setVisibleDialog] = React.useState<VisibleDialog>(null);\n\n  const {rootServerURI} = React.useContext(AppContext);\n  const {refetch} = React.useContext(RunsQueryRefetchContext);\n  const {canTerminatePipelineExecution, canDeletePipelineRun} = usePermissions();\n\n  const copy = useCopyToClipboard();\n  const history = useHistory();\n\n  const copyConfig = () => {\n    copy(runConfigYaml);\n    SharedToaster.show({\n      intent: 'success',\n      icon: 'copy_to_clipboard_done',\n      message: 'Copied!',\n    });\n  };\n\n  const jobPath = workspacePathFromRunDetails({\n    id: run.id,\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    pipelineName: run.pipelineName,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        <AnchorButton icon={<Icon name=\"edit\" />} to={jobPath}>\n          Open in Launchpad\n        </AnchorButton>\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        <Popover\n          position=\"bottom-right\"\n          content={\n            <Menu>\n              <Tooltip content=\"Loadable in dagit-debug\" position=\"left\" targetTagName=\"div\">\n                <MenuItem\n                  text=\"Download debug file\"\n                  icon={<Icon name=\"download_for_offline\" />}\n                  onClick={() => window.open(`${rootServerURI}/download_debug/${run.runId}`)}\n                />\n              </Tooltip>\n              {canDeletePipelineRun.enabled ? (\n                <MenuItem\n                  icon=\"delete\"\n                  text=\"Delete\"\n                  intent=\"danger\"\n                  onClick={() => setVisibleDialog('delete')}\n                />\n              ) : null}\n            </Menu>\n          }\n        >\n          <Button icon={<Icon name=\"expand_more\" />} />\n        </Popover>\n      </Group>\n      <Dialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        style={{\n          width: '90vw',\n          maxWidth: '1000px',\n          minWidth: '600px',\n          height: '90vh',\n          maxHeight: '1000px',\n          minHeight: '600px',\n        }}\n        title=\"Run configuration\"\n      >\n        <Box flex={{direction: 'column'}} style={{flex: 1, overflow: 'hidden'}}>\n          <Box flex={{direction: 'column', gap: 20}} style={{flex: 1, overflow: 'hidden'}}>\n            <Box flex={{direction: 'column', gap: 12}} padding={{top: 16, horizontal: 24}}>\n              <Subheading>Tags</Subheading>\n              <div>\n                <RunTags tags={run.tags} mode={isJob ? null : run.mode} />\n              </div>\n            </Box>\n            <Box flex={{direction: 'column'}} style={{flex: 1, overflow: 'hidden'}}>\n              <Box\n                border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n                padding={{left: 24, bottom: 16}}\n              >\n                <Subheading>Config</Subheading>\n              </Box>\n              <CodeMirrorContainer>\n                <StyledReadOnlyCodeMirror\n                  value={runConfigYaml}\n                  options={{lineNumbers: true, mode: 'yaml'}}\n                  theme={['config-editor']}\n                />\n              </CodeMirrorContainer>\n            </Box>\n          </Box>\n          <DialogFooter topBorder>\n            <Button onClick={() => copyConfig()} intent=\"none\">\n              Copy config\n            </Button>\n            <Button onClick={() => setVisibleDialog(null)} intent=\"primary\">\n              OK\n            </Button>\n          </DialogFooter>\n        </Box>\n      </Dialog>\n      {canDeletePipelineRun.enabled ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {canTerminatePipelineExecution.enabled ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nconst CodeMirrorContainer = styled.div`\n  flex: 1;\n  overflow: hidden;\n\n  .react-codemirror2,\n  .CodeMirror {\n    height: 100%;\n  }\n`;\n\nexport const RUN_DETAILS_FRAGMENT = gql`\n  fragment RunDetailsFragment on Run {\n    id\n    startTime\n    endTime\n    status\n  }\n`;\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\n\nimport {LOGS_SCROLLING_TABLE_MESSAGE_FRAGMENT} from './LogsScrollingTable';\nimport {RUN_DETAILS_FRAGMENT} from './RunDetails';\nimport {RUN_METADATA_PROVIDER_MESSAGE_FRAGMENT} from './RunMetadataProvider';\n\nexport const RUN_FRAGMENT_FOR_REPOSITORY_MATCH = gql`\n  fragment RunFragmentForRepositoryMatch on Run {\n    id\n    pipelineName\n    pipelineSnapshotId\n    parentPipelineSnapshotId\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n  }\n`;\n\nexport const RunFragments = {\n  RunFragment: gql`\n    fragment RunFragment on Run {\n      id\n      runConfigYaml\n      runId\n      canTerminate\n      status\n      mode\n      tags {\n        key\n        value\n      }\n      assets {\n        id\n        key {\n          path\n        }\n      }\n      rootRunId\n      parentRunId\n      pipelineName\n      solidSelection\n      assetSelection {\n        ... on AssetKey {\n          path\n        }\n      }\n      pipelineSnapshotId\n      parentPipelineSnapshotId\n      executionPlan {\n        artifactsPersisted\n        ...ExecutionPlanToGraphFragment\n      }\n      stepKeysToExecute\n      ...RunFragmentForRepositoryMatch\n      ...RunDetailsFragment\n      updateTime\n      stepStats {\n        stepKey\n        status\n        startTime\n        endTime\n        attempts {\n          startTime\n          endTime\n        }\n        markers {\n          startTime\n          endTime\n        }\n      }\n    }\n\n    ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n    ${RUN_FRAGMENT_FOR_REPOSITORY_MATCH}\n    ${RUN_DETAILS_FRAGMENT}\n  `,\n  RunDagsterRunEventFragment: gql`\n    fragment RunDagsterRunEventFragment on DagsterRunEvent {\n      ... on MessageEvent {\n        message\n        timestamp\n        level\n        stepKey\n      }\n\n      ...LogsScrollingTableMessageFragment\n      ...RunMetadataProviderMessageFragment\n    }\n\n    ${RUN_METADATA_PROVIDER_MESSAGE_FRAGMENT}\n    ${LOGS_SCROLLING_TABLE_MESSAGE_FRAGMENT}\n    ${PYTHON_ERROR_FRAGMENT}\n  `,\n};\n","import {Box, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {assertUnreachable} from '../app/Util';\nimport {RunStatus} from '../types/globalTypes';\n\nimport {RunStats} from './RunStats';\nimport {RunStatusIndicator} from './RunStatusDots';\n\nconst statusToIntent = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.QUEUED:\n    case RunStatus.NOT_STARTED:\n    case RunStatus.MANAGED:\n    case RunStatus.CANCELING:\n      return 'none';\n    case RunStatus.SUCCESS:\n      return 'success';\n    case RunStatus.STARTING:\n      return 'none';\n    case RunStatus.FAILURE:\n    case RunStatus.CANCELED:\n      return 'danger';\n    case RunStatus.STARTED:\n      return 'primary';\n    default:\n      return assertUnreachable(status);\n  }\n};\n\nconst statusToString = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.QUEUED:\n      return 'Queued';\n    case RunStatus.SUCCESS:\n      return 'Success';\n    case RunStatus.STARTING:\n      return 'Starting';\n    case RunStatus.NOT_STARTED:\n      return 'Not started';\n    case RunStatus.FAILURE:\n      return 'Failure';\n    case RunStatus.STARTED:\n      return 'Started';\n    case RunStatus.MANAGED:\n      return 'Managed';\n    case RunStatus.CANCELING:\n      return 'Canceling';\n    case RunStatus.CANCELED:\n      return 'Canceled';\n    default:\n      return assertUnreachable(status);\n  }\n};\n\nexport const RunStatusTag = (props: {status: RunStatus}) => {\n  const {status} = props;\n  return (\n    <Tag intent={statusToIntent(status)}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <RunStatusIndicator status={status} size={10} />\n        <div>{statusToString(status)}</div>\n      </Box>\n    </Tag>\n  );\n};\n\ninterface Props {\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusTagWithStats = (props: Props) => {\n  const {runId, status} = props;\n  return (\n    <Popover\n      position=\"bottom-left\"\n      interactionKind=\"hover\"\n      content={<RunStats runId={runId} />}\n      hoverOpenDelay={100}\n      usePortal\n    >\n      <RunStatusTag status={status} />\n    </Popover>\n  );\n};\n","import {Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {useCopyToClipboard} from '../app/browser';\nimport {__ASSET_JOB_PREFIX} from '../asset-graph/Utils';\n\nimport {DagsterTag, RunTag, TagType} from './RunTag';\nimport {RunFilterToken} from './RunsFilterInput';\n\n// Sort these tags to the start of the list.\nexport const priorityTagSet = new Set([\n  DagsterTag.ScheduleName as string,\n  DagsterTag.SensorName as string,\n  DagsterTag.Backfill as string,\n]);\n\nconst renamedTags = {\n  [DagsterTag.SolidSelection]: DagsterTag.OpSelection,\n};\n\nexport const canAddTagToFilter = (key: string) => {\n  return key !== DagsterTag.SolidSelection && key !== DagsterTag.OpSelection;\n};\n\nexport const RunTags: React.FC<{\n  tags: TagType[];\n  mode: string | null;\n  onAddTag?: (token: RunFilterToken) => void;\n}> = React.memo(({tags, onAddTag, mode}) => {\n  const copy = useCopyToClipboard();\n\n  const copyAction = React.useMemo(\n    () => ({\n      label: 'Copy tag',\n      onClick: (tag: TagType) => {\n        copy(`${tag.key}:${tag.value}`);\n        SharedToaster.show({intent: 'success', message: 'Copied tag!'});\n      },\n    }),\n    [copy],\n  );\n\n  const addToFilterAction = React.useMemo(\n    () =>\n      onAddTag\n        ? {\n            label: 'Add tag to filter',\n            onClick: (tag: TagType) => {\n              onAddTag({token: 'tag', value: `${tag.key}=${tag.value}`});\n            },\n          }\n        : null,\n    [onAddTag],\n  );\n\n  const actionsForTag = (tag: TagType) => {\n    const list = [copyAction];\n    if (addToFilterAction && canAddTagToFilter(tag.key)) {\n      list.push(addToFilterAction);\n    }\n    return list.filter((item) => !!item);\n  };\n\n  const displayedTags = React.useMemo(() => {\n    const priority = [];\n    const others = [];\n    const copiedTags = tags.map(({key, value}) => ({key, value}));\n    for (const tag of copiedTags) {\n      const {key} = tag;\n      if (renamedTags.hasOwnProperty(key)) {\n        tag.key = renamedTags[key];\n      }\n\n      if (\n        tag.value.startsWith(__ASSET_JOB_PREFIX) &&\n        (key === DagsterTag.PartitionSet || key === DagsterTag.StepSelection)\n      ) {\n        continue;\n      } else if (priorityTagSet.has(key)) {\n        priority.push(tag);\n      } else {\n        others.push(tag);\n      }\n    }\n    return [...priority, ...others];\n  }, [tags]);\n\n  if (!tags.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'row', wrap: 'wrap', gap: 4}}>\n      {mode ? <RunTag tag={{key: 'mode', value: mode}} /> : null}\n      {displayedTags.map((tag, idx) => (\n        <RunTag tag={tag} key={idx} actions={actionsForTag(tag)} />\n      ))}\n    </Box>\n  );\n});\n","import memoize from 'lodash/memoize';\nimport uniq from 'lodash/uniq';\n\nimport {DagsterEventType} from '../types/globalTypes';\nconst typeValues = memoize(() =>\n  uniq(Object.values(DagsterEventType).map(eventTypeToDisplayType)).sort(),\n);\n\nexport const eventTypeToDisplayType = (eventType: string) => {\n  switch (eventType) {\n    case DagsterEventType.PIPELINE_STARTING:\n      return DagsterEventType.RUN_STARTING;\n    case DagsterEventType.PIPELINE_ENQUEUED:\n      return DagsterEventType.RUN_ENQUEUED;\n    case DagsterEventType.PIPELINE_DEQUEUED:\n      return DagsterEventType.RUN_DEQUEUED;\n    case DagsterEventType.PIPELINE_STARTING:\n      return DagsterEventType.RUN_STARTING;\n    case DagsterEventType.PIPELINE_START:\n      return DagsterEventType.RUN_START;\n    case DagsterEventType.PIPELINE_SUCCESS:\n      return DagsterEventType.RUN_SUCCESS;\n    case DagsterEventType.PIPELINE_FAILURE:\n      return DagsterEventType.RUN_FAILURE;\n    case DagsterEventType.PIPELINE_CANCELING:\n      return DagsterEventType.RUN_CANCELING;\n    case DagsterEventType.PIPELINE_CANCELED:\n      return DagsterEventType.RUN_CANCELED;\n\n    default:\n      return eventType;\n  }\n};\n\nexport const getRunFilterProviders = memoize(\n  (stepNames: string[] = []) => {\n    return [\n      {\n        token: 'step',\n        values: () => stepNames,\n      },\n      {\n        token: 'type',\n        values: typeValues,\n      },\n      {\n        token: 'query',\n        values: () => [],\n      },\n    ];\n  },\n  (stepNames: string[] = []) => JSON.stringify(stepNames),\n);\n","import {LogLevel} from './LogLevel';\nimport {LogNode} from './types';\n\nexport const logNodeLevel = (node: LogNode): LogLevel =>\n  node.__typename === 'LogMessageEvent' ? node.level : LogLevel.EVENT;\n","// eslint-disable-next-line no-restricted-imports\nimport {AnchorButton as BlueprintAnchorButton} from '@blueprintjs/core';\nimport {\n  intentToFillColor,\n  intentToStrokeColor,\n  intentToTextColor,\n  StyledButton,\n  StyledButtonText,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\n\ninterface AnchorButtonProps\n  extends Omit<React.ComponentProps<typeof BlueprintAnchorButton>, 'loading' | 'onClick' | 'type'>,\n    LinkProps {\n  label?: React.ReactNode;\n}\n\nexport const AnchorButton = React.forwardRef(\n  (props: AnchorButtonProps, ref: React.ForwardedRef<HTMLAnchorElement>) => {\n    const {children, icon, intent, outlined, rightIcon, ...rest} = props;\n    return (\n      <StyledButton\n        {...rest}\n        as={Link}\n        $fillColor={intentToFillColor(intent, outlined)}\n        $strokeColor={intentToStrokeColor(intent, outlined)}\n        $textColor={intentToTextColor(intent, outlined)}\n        ref={ref}\n      >\n        {icon || null}\n        {children ? <StyledButtonText>{children}</StyledButtonText> : null}\n        {rightIcon || null}\n      </StyledButton>\n    );\n  },\n);\n\nAnchorButton.displayName = 'AnchorButton';\n"],"names":["useCopyToClipboard","clipboardAPI","navigator","clipboard","node","React","current","document","createElement","style","position","top","body","appendChild","removeChild","text","writeText","value","select","execCommand","toGraphQueryItems","plan","runtimeStepMetadata","keyExpansionMap","runtimeStepKeys","Object","keys","steps","step","kind","StepKind","invocationsOfPlannedDynamicStep","key","inputs","every","i","dependsOn","s","IStepState","state","length","nodeTable","stepRuntimeKeys","name","outputs","input","nodeInput","push","upstream","upstreamKeys","replacePlannedIndex","upstreamKey","solid","upstreamOutput","dependedBy","values","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","gql","AssetKeyTagCollection","assetKeys","clickableTags","modalTitle","showMore","setShowMore","assetCount","displayed","hidden","map","assetKey","ii","to","assetDetailsPathForKey","intent","interactive","icon","displayNameForAssetKey","tokenForAssetKey","onClick","title","onClose","minWidth","maxWidth","maxHeight","isOpen","padding","bottom","border","side","color","Colors","width","overflowY","background","autoFocus","flex","direction","gap","wrap","alignItems","size","join","initializeState","frozenRuns","deletion","completed","errors","deletionDialogReducer","prevState","action","type","id","error","DeletionDialog","props","onComplete","onTerminateInstead","selectedRuns","dispatch","runIDs","count","terminatableCount","filter","useMutation","DELETE_MUTATION","destroy","mutate","runList","runId","variables","data","deletePipelineRun","__typename","canQuicklyClose","canEscapeKeyClose","canOutsideClickClose","spacing","Math","max","animate","message","progressContent","errorCount","successCount","slice","completionContent","disabled","buttons","OverflowFade","styled","OverflowButtonContainer","OverflowButton","CellTruncationProvider","isOverflowing","contentContainerRef","onView","onExpand","defaultExpand","this","detectOverflow","child","firstElementChild","scrollHeight","height","setState","textContent","showCustomAlert","whiteSpace","overflow","ref","children","forceExpandability","LogsRowStructuredContent","metadata","location","useLocation","eventType","FailureContent","metadataEntries","failureMetadata","errorSource","undefined","StepUpForRetryContent","stepKey","logCaptureSteps","DefaultContent","currentQuery","qs","search","updatedQuery","logType","logs","selection","href","pathname","rows","label","item","eventColor","eventIntent","typeCheck","description","success","entries","expectationResult","AssetMetadataContent","timestamp","operationResult","ignoreQueryPrefix","logFileKey","rawLogsUrl","rawLogsLink","JSON","stringify","stepKeys","assertUnreachable","Tag","fontSize","eventTypeToDisplayType","Box","horizontal","contextMessage","errorMessage","errorStack","errorCause","stack","ErrorSource","causes","cause","minimal","index","DagsterEventType","asOf","assetDashboardLink","marginLeft","MetadataEntry","styles","paddingBottom","Structured","PythonErrorInfo","StructuredMemoizedContent","highlighted","LOGS_ROW_STRUCTURED_FRAGMENT","METADATA_ENTRY_FRAGMENT","PYTHON_ERROR_FRAGMENT","stepStartTime","start","level","LogLevel","onMouseEnter","setHighlightedGanttChartTime","onMouseLeave","time","runStartTime","startedPipelineAt","displayName","Unstructured","UnstructuredMemoizedContent","LOGS_ROW_UNSTRUCTURED_FRAGMENT","LogsScrollingTable","filterKey","filterStepKeys","table","onWidthsChanged","didResize","minHeight","marginTop","AutoSizer","LogsScrollingTableSized","loading","focusedTime","filteredNodes","allNodes","l","logNodeLevel","levels","sinceTime","Number","hasTextFilter","logQuery","textMatchNodes","f","token","includes","toLowerCase","hideNonMatches","filterLogs","LOGS_SCROLLING_TABLE_MESSAGE_FRAGMENT","list","cache","CellMeasurerCache","defaultHeight","fixedWidth","keyMapper","rowIndex","clientsideKey","isAtBottomOrZero","scrollToBottomObserver","onScroll","scrollTop","clientHeight","atTopAndStarting","atBottom","scrollToTime","ms","target","findIndex","n","alignment","offset","iterations","getOffsetForRow","scrollToPosition","rowRenderer","parent","focusedTimeMatch","textMatch","lastRowStyles","borderBottom","noContentRenderer","NonIdealState","el","ReactDOM","HTMLElement","attachScrollToBottomObserver","window","requestAnimationFrame","prevProps","recomputeGridSize","disconnect","clearAll","forceUpdate","listEl","lastHeight","MutationObserver","rowgroupEl","querySelector","observe","attributes","subtree","console","warn","ListEmptyState","deferredMeasurementCache","rowCount","rowHeight","overscanRowCount","resizeObserver","measure","RO","contentRect","clientWidth","timingStringForStatus","status","RunStatus","LoadingOrValue","TIME_FORMAT","showSeconds","showTimezone","RunDetails","run","startTime","timeFormat","endTime","startUnix","endUnix","RunConfigDialog","isJob","runConfigYaml","visibleDialog","setVisibleDialog","rootServerURI","AppContext","refetch","RunsQueryRefetchContext","usePermissions","canTerminatePipelineExecution","canDeletePipelineRun","copy","history","useHistory","jobPath","workspacePathFromRunDetails","repositoryName","repositoryOrigin","repositoryLocationName","pipelineName","A","content","targetTagName","open","enabled","tags","mode","left","CodeMirrorContainer","options","lineNumbers","theme","topBorder","SharedToaster","workspacePipelinePath","repoName","repoLocation","path","canTerminate","RUN_DETAILS_FRAGMENT","RUN_FRAGMENT_FOR_REPOSITORY_MATCH","RunFragments","RunFragment","RunDagsterRunEventFragment","RUN_METADATA_PROVIDER_MESSAGE_FRAGMENT","statusToIntent","statusToString","RunStatusTag","RunStatusTagWithStats","interactionKind","hoverOpenDelay","usePortal","priorityTagSet","Set","DagsterTag","renamedTags","RunTags","onAddTag","copyAction","tag","addToFilterAction","actionsForTag","displayedTags","priority","others","copiedTags","hasOwnProperty","startsWith","__ASSET_JOB_PREFIX","has","idx","actions","typeValues","memoize","uniq","sort","getRunFilterProviders","stepNames","AnchorButton","outlined","rightIcon","rest","S","as","Link","$fillColor","intentToFillColor","$strokeColor","intentToStrokeColor","$textColor","intentToTextColor"],"sourceRoot":""}