{"version":3,"file":"static/js/284.4a7a9764.chunk.js","mappings":"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","sources":["../../core/src/pipelines/PipelineExplorerRoot.tsx","../../core/src/pipelines/PipelineRunsRoot.tsx","../../core/src/schedules/ScheduleUtils.tsx","../../core/src/schedules/SchedulesNextTicks.tsx","../../core/src/assets/AssetGroupRoot.tsx","../../core/src/launchpad/LaunchpadSetupFromRunRoot.tsx","../../core/src/launchpad/LaunchpadSetupRoot.tsx","../../core/src/nav/LatestRunTag.tsx","../../core/src/nav/JobMetadata.tsx","../../core/src/nav/PipelineNav.tsx","../../core/src/partitions/JobBackfillsTable.tsx","../../core/src/partitions/BackfillSelector.tsx","../../core/src/partitions/PartitionGraph.tsx","../../core/src/partitions/OpJobPartitionsView.tsx","../../core/src/partitions/AssetJobPartitionsView.tsx","../../core/src/partitions/PipelinePartitionsRoot.tsx","../../core/src/pipelines/PipelineOrJobDisambiguationRoot.tsx","../../core/src/pipelines/PipelineOverviewRoot.tsx","../../core/src/pipelines/PipelineRoot.tsx","../../core/src/TickLogDialog.tsx","../../core/src/instigation/LiveTickTimeline.tsx","../../core/src/instigation/TickDetailsDialog.tsx","../../core/src/instigation/TickHistory.tsx","../../core/src/schedules/ScheduleDetails.tsx","../../core/src/schedules/ScheduleRoot.tsx","../../core/src/sensors/SensorFragment.tsx","../../core/src/sensors/SensorPreviousRuns.tsx","../../core/src/sensors/SensorRoot.tsx","../../core/src/workspace/GraphRoot.tsx","../../core/src/workspace/VirtualizedAssetTable.tsx","../../core/src/workspace/WorkspaceTabs.tsx","../../core/src/workspace/WorkspaceHeader.tsx","../../core/src/workspace/WorkspaceAssetsRoot.tsx","../../core/src/workspace/VirtualizedGraphTable.tsx","../../core/src/workspace/WorkspaceGraphsRoot.tsx","../../core/src/workspace/VirtualizedJobTable.tsx","../../core/src/workspace/WorkspaceJobsRoot.tsx","../../core/src/ops/OpCard.tsx","../../core/src/ops/OpDetailsRoot.tsx","../../core/src/ops/OpsRoot.tsx","../../core/src/workspace/WorkspaceOpsRoot.tsx","../../core/src/workspace/WorkspacePipelineRoot.tsx","../../core/src/schedules/SchedulesRoot.tsx","../../core/src/sensors/SensorsTable.tsx","../../core/src/sensors/SensorsRoot.tsx","../../core/src/workspace/RepositoryAssetsList.tsx","../../core/src/workspace/RepositoryGraphsList.tsx","../../core/src/pipelines/PipelineTable.tsx","../../core/src/workspace/RepositoryPipelinesList.tsx","../../core/src/workspace/WorkspaceRepoRoot.tsx","../../core/src/workspace/VirtualizedScheduleTable.tsx","../../core/src/workspace/WorkspaceSchedulesRoot.tsx","../../core/src/workspace/VirtualizedSensorTable.tsx","../../core/src/workspace/WorkspaceSensorsRoot.tsx","../../core/src/workspace/WorkspaceRoot.tsx"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Loading} from '../ui/Loading';\nimport {buildPipelineSelector} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explodeCompositesInHandleGraph} from './CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_ASSET_NODE_FRAGMENT,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from './GraphExplorer';\nimport {NonIdealPipelineQueryResult} from './NonIdealPipelineQueryResult';\nimport {ExplorerPath, explorerPathFromString, explorerPathToString} from './PipelinePathUtils';\nimport {\n  PipelineExplorerRootQuery,\n  PipelineExplorerRootQueryVariables,\n} from './types/PipelineExplorerRootQuery';\n\nexport const PipelineExplorerSnapshotRoot = () => {\n  useTrackPageView();\n\n  const params = useParams();\n  const explorerPath = explorerPathFromString(params['0']);\n  const {pipelineName, snapshotId} = explorerPath;\n  const history = useHistory();\n\n  useDocumentTitle(`Snapshot: ${pipelineName}${snapshotId ? `@${snapshotId.slice(0, 8)}` : ''}`);\n\n  return (\n    <PipelineExplorerContainer\n      explorerPath={explorerPath}\n      onChangeExplorerPath={(path, mode) => {\n        history[mode](`/snapshots/${explorerPathToString(path)}`);\n      }}\n      onNavigateToSourceAssetNode={({assetKey}) => {\n        history.push(assetDetailsPathForKey(assetKey));\n      }}\n    />\n  );\n};\n\nexport const PipelineExplorerContainer: React.FC<{\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n  repoAddress?: RepoAddress;\n  isGraph?: boolean;\n}> = ({\n  explorerPath,\n  repoAddress,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode,\n  isGraph = false,\n}) => {\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: explorerPath.explodeComposites ?? false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const pipelineSelector = buildPipelineSelector(repoAddress || null, explorerPath.pipelineName);\n\n  const pipelineResult = useQuery<PipelineExplorerRootQuery, PipelineExplorerRootQueryVariables>(\n    PIPELINE_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        snapshotPipelineSelector: explorerPath.snapshotId ? undefined : pipelineSelector,\n        snapshotId: explorerPath.snapshotId ? explorerPath.snapshotId : undefined,\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<PipelineExplorerRootQuery> queryResult={pipelineResult}>\n      {({pipelineSnapshotOrError: result}) => {\n        if (result.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph={isGraph}\n              result={result}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n        const assetNodesPresent = result.solidHandles.some(\n          (h) => h.solid.definition.assetNodes.length > 0,\n        );\n        if (options.preferAssetRendering && assetNodesPresent) {\n          return (\n            <AssetGraphExplorer\n              options={options}\n              setOptions={setOptions}\n              fetchOptions={{pipelineSelector}}\n              explorerPath={explorerPath}\n              onChangeExplorerPath={onChangeExplorerPath}\n              onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n            />\n          );\n        }\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={onChangeExplorerPath}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={isGraph}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const PIPELINE_EXPLORER_ROOT_QUERY = gql`\n  query PipelineExplorerRootQuery(\n    $snapshotPipelineSelector: PipelineSelector\n    $snapshotId: String\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    pipelineSnapshotOrError(\n      snapshotId: $snapshotId\n      activePipelineSelector: $snapshotPipelineSelector\n    ) {\n      ... on PipelineSnapshot {\n        id\n        name\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n        ...GraphExplorerFragment\n\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n            definition {\n              assetNodes {\n                id\n                ...GraphExplorerAssetNodeFragment\n              }\n            }\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${METADATA_ENTRY_FRAGMENT}\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${GRAPH_EXPLORER_ASSET_NODE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {\n  Box,\n  CursorHistoryControls,\n  NonIdealState,\n  Page,\n  Tag,\n  TokenizingFieldValue,\n  tokenToString,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunsQueryRefetchContext} from '../runs/RunUtils';\nimport {\n  RunFilterTokenType,\n  RunsFilterInput,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  RunFilterToken,\n} from '../runs/RunsFilterInput';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\nimport {PipelineRunsRootQuery, PipelineRunsRootQueryVariables} from './types/PipelineRunsRootQuery';\nimport {useJobTitle} from './useJobTitle';\n\nconst PAGE_SIZE = 25;\nconst ENABLED_FILTERS: RunFilterTokenType[] = ['status', 'tag'];\n\ninterface Props {\n  repoAddress?: RepoAddress;\n}\n\nexport const PipelineRunsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n  const {repoAddress = null} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters(ENABLED_FILTERS);\n  const permanentTokens = React.useMemo(() => {\n    return [\n      isJob ? {token: 'job', value: pipelineName} : {token: 'pipeline', value: pipelineName},\n      snapshotId ? {token: 'snapshotId', value: snapshotId} : null,\n    ].filter(Boolean) as TokenizingFieldValue[];\n  }, [isJob, pipelineName, snapshotId]);\n\n  const allTokens = [...filterTokens, ...permanentTokens];\n  if (repoAddress) {\n    const repoToken = {\n      token: 'tag',\n      value: `${DagsterTag.RepositoryLabelTag}=${repoAddressAsTag(repoAddress)}`,\n    };\n    allTokens.push(repoToken);\n  }\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PipelineRunsRootQuery,\n    PipelineRunsRootQueryVariables\n  >({\n    query: PIPELINE_RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n    variables: {\n      filter: {...runsFilterForSearchTokens(allTokens), pipelineName, snapshotId},\n    },\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.runId;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n  });\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!filterTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokens([...filterTokens, token]);\n      }\n    },\n    [filterTokens, setFilterTokens],\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n      <Page>\n        <Loading queryResult={queryResult} allowStaleData={true}>\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n            const runs = pipelineRunsOrError.results;\n            const displayed = runs.slice(0, PAGE_SIZE);\n            const {hasNextCursor, hasPrevCursor} = paginationProps;\n            return (\n              <>\n                <Box\n                  flex={{alignItems: 'flex-start', justifyContent: 'space-between'}}\n                  padding={{top: 8, horizontal: 24}}\n                >\n                  <Box flex={{direction: 'row', gap: 8}}>\n                    {permanentTokens.map(({token, value}) => (\n                      <Tag key={token}>{`${token}:${value}`}</Tag>\n                    ))}\n                  </Box>\n                  <QueryRefreshCountdown refreshState={refreshState} />\n                </Box>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={displayed}\n                    onAddTag={onAddTag}\n                    actionBarComponents={\n                      <RunsFilterInput\n                        enabledFilters={ENABLED_FILTERS}\n                        tokens={filterTokens}\n                        onChange={setFilterTokens}\n                        loading={queryResult.loading}\n                      />\n                    }\n                  />\n                </StickyTableContainer>\n                {hasNextCursor || hasPrevCursor ? (\n                  <div style={{marginTop: '20px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </Page>\n    </RunsQueryRefetchContext.Provider>\n  );\n};\n\nconst PIPELINE_RUNS_ROOT_QUERY = gql`\n  query PipelineRunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {REPOSITORY_INFO_FRAGMENT} from '../workspace/RepositoryInformation';\n\nexport const SCHEDULE_FRAGMENT = gql`\n  fragment ScheduleFragment on Schedule {\n    id\n    name\n    cronSchedule\n    executionTimezone\n    pipelineName\n    solidSelection\n    mode\n    description\n    partitionSet {\n      id\n      name\n    }\n    scheduleState {\n      id\n      ...InstigationStateFragment\n    }\n    futureTicks(limit: 5) {\n      results {\n        timestamp\n      }\n    }\n  }\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n\nexport const REPOSITORY_SCHEDULES_FRAGMENT = gql`\n  fragment RepositorySchedulesFragment on Repository {\n    name\n    id\n    location {\n      id\n      name\n    }\n    schedules {\n      id\n      ...ScheduleFragment\n    }\n    ...RepositoryInfoFragment\n  }\n  ${REPOSITORY_INFO_FRAGMENT}\n  ${SCHEDULE_FRAGMENT}\n`;\n\nexport const SCHEDULES_ROOT_QUERY = gql`\n  query SchedulesRootQuery(\n    $repositorySelector: RepositorySelector!\n    $instigationType: InstigationType!\n  ) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        ...RepositorySchedulesFragment\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: $instigationType) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${REPOSITORY_SCHEDULES_FRAGMENT}\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  MenuItem,\n  Menu,\n  NonIdealState,\n  Popover,\n  Spinner,\n  Table,\n  Subheading,\n  StyledReadOnlyCodeMirror,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useCopyToClipboard} from '../app/browser';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RunTags} from '../runs/RunTags';\nimport {InstigationStatus} from '../types/globalTypes';\nimport {MenuLink} from '../ui/MenuLink';\nimport {\n  findRepositoryAmongOptions,\n  isThisThingAJob,\n  useRepository,\n  useRepositoryOptions,\n} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {RepositorySchedulesFragment} from './types/RepositorySchedulesFragment';\nimport {ScheduleFragment} from './types/ScheduleFragment';\nimport {\n  ScheduleTickConfigQuery,\n  ScheduleTickConfigQueryVariables,\n  ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult,\n  ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult_runRequests,\n} from './types/ScheduleTickConfigQuery';\n\ninterface ScheduleTick {\n  schedule: ScheduleFragment;\n  timestamp: number;\n  repoAddress: RepoAddress;\n}\n\nexport const SchedulesNextTicks: React.FC<{\n  repos: RepositorySchedulesFragment[];\n}> = React.memo(({repos}) => {\n  const nextTicks: ScheduleTick[] = [];\n  let anyPipelines = false;\n  let anySchedules = false;\n\n  const {options} = useRepositoryOptions();\n\n  repos.forEach((repo) => {\n    const {schedules} = repo;\n    anySchedules = anySchedules || schedules.length > 0;\n\n    const repoAddress = {\n      name: repo.name,\n      location: repo.location.name,\n    };\n\n    const futureTickSchedules = schedules.filter(\n      (schedule) =>\n        schedule.futureTicks.results.length &&\n        schedule.scheduleState.status === InstigationStatus.RUNNING,\n    );\n\n    const minMaxTimestamp = Math.min(\n      ...futureTickSchedules.map(\n        (schedule) =>\n          schedule.futureTicks.results[schedule.futureTicks.results.length - 1].timestamp,\n      ),\n    );\n\n    futureTickSchedules.forEach((schedule) => {\n      schedule.futureTicks.results.forEach((tick) => {\n        if (tick.timestamp <= minMaxTimestamp) {\n          nextTicks.push({schedule, timestamp: tick.timestamp, repoAddress});\n        }\n      });\n    });\n\n    if (!anyPipelines) {\n      anyPipelines = schedules.some((schedule) => !!schedule.mode);\n    }\n  });\n\n  nextTicks.sort((a, b) => a.timestamp - b.timestamp);\n\n  if (!nextTicks.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No scheduled ticks\"\n          description={\n            anySchedules ? (\n              <>\n                There are no running schedules.{' '}\n                <Link to=\"/overview/schedules\">Start a schedule</Link> to see scheduled ticks.\n              </>\n            ) : (\n              <>\n                There are no schedules in this workspace. Create a running schedule to view its\n                scheduled ticks.\n              </>\n            )\n          }\n          action={\n            anySchedules ? null : (\n              <ExternalAnchorButton\n                icon={<Icon name=\"open_in_new\" />}\n                href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\"\n              >\n                View documentation\n              </ExternalAnchorButton>\n            )\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '260px'}}>Timestamp</th>\n          <th style={{width: '30%'}}>Schedule</th>\n          <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          <th>Metadata</th>\n        </tr>\n      </thead>\n      <tbody>\n        {nextTicks.map(({schedule, timestamp, repoAddress}) => {\n          const repo = findRepositoryAmongOptions(options, repoAddress);\n          return (\n            <tr key={`${schedule.id}:${timestamp}`}>\n              <td>\n                <TimestampDisplay\n                  timestamp={timestamp}\n                  timezone={schedule.executionTimezone}\n                  timeFormat={{showSeconds: false, showTimezone: true}}\n                />\n              </td>\n              <td>\n                <Link to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}>\n                  {schedule.name}\n                </Link>\n              </td>\n              <td>\n                <PipelineReference\n                  pipelineName={schedule.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isThisThingAJob(repo, schedule.pipelineName)}\n                />\n              </td>\n              <td>\n                <NextTickMenu\n                  repoAddress={repoAddress}\n                  schedule={schedule}\n                  tickTimestamp={timestamp}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n});\n\nconst NextTickMenu: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleFragment;\n  tickTimestamp: number;\n}> = React.memo(({repoAddress, schedule, tickTimestamp}) => {\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName: schedule.name,\n  };\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const [loadTickConfig, {called, loading, data}] = useLazyQuery<\n    ScheduleTickConfigQuery,\n    ScheduleTickConfigQueryVariables\n  >(SCHEDULE_TICK_CONFIG_QUERY, {\n    variables: {\n      scheduleSelector,\n      tickTimestamp,\n    },\n  });\n\n  const infoReady = called ? !loading : false;\n  const evaluationResult =\n    data?.scheduleOrError?.__typename === 'Schedule'\n      ? data.scheduleOrError.futureTick.evaluationResult\n      : null;\n\n  const menuItems = infoReady ? (\n    <NextTickMenuItems\n      repoAddress={repoAddress}\n      schedule={schedule}\n      loading={loading}\n      onItemOpen={setOpen}\n      evaluationResult={evaluationResult}\n    />\n  ) : (\n    <Spinner purpose=\"body-text\" />\n  );\n  return (\n    <>\n      <Popover\n        content={<Menu>{menuItems}</Menu>}\n        position=\"bottom-right\"\n        onOpening={() => {\n          if (!called) {\n            loadTickConfig();\n          }\n        }}\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <NextTickDialog\n        repoAddress={repoAddress}\n        isOpen={isOpen}\n        setOpen={setOpen}\n        schedule={schedule}\n        tickTimestamp={tickTimestamp}\n        evaluationResult={evaluationResult}\n      />\n    </>\n  );\n});\n\nconst NextTickMenuItems: React.FC<{\n  repoAddress: RepoAddress;\n  evaluationResult: ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult | null;\n  schedule: ScheduleFragment;\n  loading: boolean;\n  onItemOpen: (value: boolean) => void;\n}> = ({repoAddress, schedule, evaluationResult, loading, onItemOpen}) => {\n  if (!evaluationResult) {\n    return <MenuItem text=\"Could not preview tick for this schedule\" />;\n  }\n\n  if (evaluationResult.skipReason) {\n    return <MenuItem text=\"View skip reason...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (evaluationResult.error) {\n    return <MenuItem text=\"View error...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (!evaluationResult.runRequests || !evaluationResult.runRequests.length) {\n    return <MenuItem text=\"No runs requested for this projected schedule tick\" />;\n  }\n\n  if (evaluationResult.runRequests.length === 1) {\n    const runRequest = evaluationResult.runRequests[0];\n    const runConfigYaml = runRequest ? runRequest.runConfigYaml : '';\n    return (\n      <>\n        <MenuItem\n          text={loading ? 'Loading Configuration...' : 'View Configuration...'}\n          icon=\"open_in_new\"\n          onClick={() => onItemOpen(true)}\n        />\n        <MenuLink\n          text=\"Open in Launchpad...\"\n          icon=\"edit\"\n          target=\"_blank\"\n          to={workspacePathFromAddress(\n            repoAddress,\n            `/pipeline_or_job/${schedule.pipelineName}/playground/setup?${qs.stringify({\n              mode: schedule.mode,\n              config: runConfigYaml,\n              solidSelection: schedule.solidSelection,\n            })}`,\n          )}\n        />\n      </>\n    );\n  }\n\n  return (\n    <MenuItem\n      text={`View ${evaluationResult.runRequests.length} run requests...`}\n      icon=\"edit\"\n      target=\"_blank\"\n      onClick={() => onItemOpen(true)}\n    />\n  );\n};\n\nconst NextTickDialog: React.FC<{\n  repoAddress: RepoAddress;\n  isOpen: boolean;\n  setOpen: (value: boolean) => void;\n  evaluationResult: ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult | null;\n  schedule: ScheduleFragment;\n  tickTimestamp: number;\n}> = ({repoAddress, evaluationResult, schedule, tickTimestamp, setOpen, isOpen}) => {\n  const [\n    selectedRunRequest,\n    setSelectedRunRequest,\n  ] = React.useState<ScheduleTickConfigQuery_scheduleOrError_Schedule_futureTick_evaluationResult_runRequests | null>(\n    evaluationResult && evaluationResult.runRequests && evaluationResult.runRequests.length === 1\n      ? evaluationResult.runRequests[0]\n      : null,\n  );\n\n  const copy = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, schedule.pipelineName);\n\n  React.useEffect(() => {\n    if (\n      evaluationResult &&\n      evaluationResult.runRequests &&\n      evaluationResult.runRequests.length === 1\n    ) {\n      setSelectedRunRequest(evaluationResult.runRequests[0]);\n    }\n  }, [evaluationResult]);\n\n  const close = () => {\n    setSelectedRunRequest(null);\n    setOpen(false);\n  };\n\n  let body;\n  if (!evaluationResult) {\n    body = null;\n  } else if (selectedRunRequest) {\n    body = (\n      <Box flex={{direction: 'column', gap: 20}}>\n        <Box flex={{direction: 'column', gap: 12}} padding={{top: 16, horizontal: 24}}>\n          <Subheading>Tags</Subheading>\n          {selectedRunRequest.tags.length ? (\n            <RunTags tags={selectedRunRequest.tags} mode={isJob ? null : schedule.mode} />\n          ) : null}\n        </Box>\n        <div>\n          <Box\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            padding={{left: 24, bottom: 16}}\n          >\n            <Subheading>Config</Subheading>\n          </Box>\n          <StyledReadOnlyCodeMirror\n            value={selectedRunRequest.runConfigYaml}\n            options={{lineNumbers: true, mode: 'yaml'}}\n          />\n        </div>\n      </Box>\n    );\n  } else if (evaluationResult.error) {\n    body = (\n      <DialogBody>\n        <PythonErrorInfo error={evaluationResult.error} />\n      </DialogBody>\n    );\n  } else if (evaluationResult.skipReason) {\n    body = (\n      <DialogBody>\n        <SkipWrapper>{evaluationResult.skipReason}</SkipWrapper>\n      </DialogBody>\n    );\n  } else if (evaluationResult.runRequests) {\n    body = (\n      <DialogBody>\n        <RunRequestBody>\n          <Table>\n            <thead>\n              <tr>\n                <th>Run key</th>\n                <th>Config</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {evaluationResult.runRequests.map((runRequest, idx) => {\n                if (!runRequest) {\n                  return null;\n                }\n                return (\n                  <tr key={idx}>\n                    <td>{runRequest.runKey || <span>&mdash;</span>}</td>\n                    <td>\n                      <ButtonLink\n                        onClick={() => setSelectedRunRequest(runRequest)}\n                        underline={false}\n                      >\n                        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                          <Icon name=\"open_in_new\" color={Colors.Gray400} />\n                          <span>View config</span>\n                        </Group>\n                      </ButtonLink>\n                    </td>\n                    <td>\n                      <Popover\n                        content={\n                          <Menu>\n                            <MenuLink\n                              text=\"Open in Launchpad...\"\n                              icon=\"edit\"\n                              target=\"_blank\"\n                              to={workspacePathFromAddress(\n                                repoAddress,\n                                `/${isJob ? 'jobs' : 'pipelines'}/${\n                                  schedule.pipelineName\n                                }/playground/setup?${qs.stringify({\n                                  mode: schedule.mode,\n                                  config: runRequest.runConfigYaml,\n                                  solidSelection: schedule.solidSelection,\n                                })}`,\n                              )}\n                            />\n                          </Menu>\n                        }\n                        position=\"bottom\"\n                      >\n                        <Button icon={<Icon name=\"expand_more\" />} />\n                      </Popover>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </RunRequestBody>\n      </DialogBody>\n    );\n  }\n\n  return (\n    <Dialog\n      onClose={() => close()}\n      style={{width: '50vw'}}\n      title={\n        <Box flex={{direction: 'row', gap: 4}}>\n          <TimestampDisplay timestamp={tickTimestamp} timezone={schedule.executionTimezone} />\n          {selectedRunRequest?.runKey ? <div>: {selectedRunRequest?.runKey}</div> : null}\n        </Box>\n      }\n      isOpen={isOpen}\n    >\n      {body}\n      <DialogFooter topBorder>\n        {selectedRunRequest ? (\n          <Button\n            autoFocus={false}\n            onClick={() => {\n              copy(selectedRunRequest.runConfigYaml);\n              SharedToaster.show({\n                intent: 'success',\n                icon: 'copy_to_clipboard_done',\n                message: 'Copied!',\n              });\n            }}\n          >\n            Copy config\n          </Button>\n        ) : null}\n        <Button intent=\"primary\" autoFocus={true} onClick={() => close()}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst SCHEDULE_TICK_CONFIG_QUERY = gql`\n  query ScheduleTickConfigQuery($scheduleSelector: ScheduleSelector!, $tickTimestamp: Int!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        futureTick(tickTimestamp: $tickTimestamp) {\n          evaluationResult {\n            runRequests {\n              runKey\n              runConfigYaml\n              tags {\n                key\n                value\n              }\n            }\n            skipReason\n            error {\n              ...PythonErrorFragment\n            }\n          }\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst RunRequestBody = styled.div`\n  font-size: 13px;\n`;\n\nconst SkipWrapper = styled.div`\n  background-color: #fdfcf2;\n  border: 1px solid ${Colors.Yellow500};\n  border-radius: 3px;\n`;\n","import {Page, PageHeader, Heading, Box, Tag, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {\n  ExplorerPath,\n  explorerPathFromString,\n  explorerPathToString,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {AssetGlobalLineageLink} from './AssetPageHeader';\nimport {AssetsCatalogTable} from './AssetsCatalogTable';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\ninterface AssetGroupRootParams {\n  groupName: string;\n  prefixPath: string;\n  0: string;\n}\n\nexport const AssetGroupRoot: React.FC<{repoAddress: RepoAddress; tab: 'lineage' | 'list'}> = ({\n  repoAddress,\n  tab,\n}) => {\n  useTrackPageView();\n\n  const {groupName, 0: path} = useParams<AssetGroupRootParams>();\n  const history = useHistory();\n\n  useDocumentTitle(`Asset Group: ${groupName}`);\n\n  const groupPath = workspacePathFromAddress(repoAddress, `/asset-groups/${groupName}`);\n  const groupSelector = React.useMemo(\n    () => ({\n      groupName,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [groupName, repoAddress],\n  );\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, mode: 'push' | 'replace') => {\n      history[mode](`${groupPath}/${explorerPathToString(path)}`);\n    },\n    [groupPath, history],\n  );\n\n  const onNavigateToSourceAssetNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (node.groupName && node.repoAddress) {\n        history.replace(\n          workspacePathFromAddress(\n            node.repoAddress,\n            `/asset-groups/${node.groupName}/lineage/${node.assetKey.path\n              .map(encodeURIComponent)\n              .join('/')}`,\n          ),\n        );\n      } else {\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n      }\n    },\n    [history],\n  );\n\n  return (\n    <Page style={{display: 'flex', flexDirection: 'column', paddingBottom: 0}}>\n      <PageHeader\n        title={<Heading>{groupName}</Heading>}\n        right={\n          <div style={{marginBottom: -8}}>\n            <ReloadAllButton label=\"Reload definitions\" />\n          </div>\n        }\n        tags={\n          <Tag icon=\"asset_group\">\n            Asset Group in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        tabs={\n          <Box\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            margin={{right: 4}}\n          >\n            <Tabs selectedTabId={tab}>\n              <TabLink id=\"lineage\" title=\"Lineage\" to={`${groupPath}/lineage`} />\n              <TabLink id=\"list\" title=\"List\" to={`${groupPath}/list`} />\n            </Tabs>\n            <AssetGlobalLineageLink />\n          </Box>\n        }\n      />\n      {tab === 'lineage' ? (\n        <AssetGraphExplorer\n          fetchOptions={{groupSelector}}\n          options={{preferAssetRendering: true, explodeComposites: true}}\n          explorerPath={explorerPathFromString(path || 'lineage/')}\n          onChangeExplorerPath={onChangeExplorerPath}\n          onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n        />\n      ) : (\n        <AssetsCatalogTable\n          groupSelector={groupSelector}\n          prefixPath={path.split('/').map(decodeURIComponent).filter(Boolean)}\n          setPrefixPath={(prefixPath) =>\n            history.push(`${groupPath}/list/${prefixPath.map(encodeURIComponent).join('/')}`)\n          }\n        />\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissions} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {LaunchpadSessionError} from './LaunchpadSessionError';\nimport {LaunchpadSessionLoading} from './LaunchpadSessionLoading';\nimport {ConfigForRunQuery, ConfigForRunQueryVariables} from './types/ConfigForRunQuery';\n\nexport const LaunchpadSetupFromRunRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissions();\n  const {repoPath, pipelinePath, runId} = useParams<{\n    repoPath: string;\n    pipelinePath: string;\n    runId: string;\n  }>();\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return (\n    <LaunchpadSetupFromRunAllowedRoot\n      pipelinePath={pipelinePath}\n      repoAddress={repoAddress}\n      runId={runId}\n    />\n  );\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n  runId: string;\n}\n\n/**\n * For a given run ID, retrieve the run config and populate a new Launchpad session with its\n * values, then redirect to the launchpad. The newly created session will be the open launchpad\n * config tab.\n */\nconst LaunchpadSetupFromRunAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress, runId} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [storageData, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n\n  const {data, loading} = useQuery<ConfigForRunQuery, ConfigForRunQueryVariables>(\n    CONFIG_FOR_RUN_QUERY,\n    {variables: {runId}},\n  );\n  const runOrError = data?.runOrError;\n  const run = runOrError?.__typename === 'Run' ? runOrError : null;\n\n  React.useEffect(() => {\n    // Wait until we have a run, then create the session.\n    if (!run) {\n      return;\n    }\n\n    const {runConfigYaml, mode, solidSelection} = run;\n    if (runConfigYaml || mode || solidSelection) {\n      // Name the session after this run ID.\n      const newSession: Partial<IExecutionSession> = {name: `From run ${run.id.slice(0, 8)}`};\n\n      if (typeof runConfigYaml === 'string') {\n        newSession.runConfigYaml = runConfigYaml;\n      }\n      if (typeof mode === 'string') {\n        newSession.mode = mode;\n      }\n      if (solidSelection instanceof Array && solidSelection.length > 0) {\n        newSession.solidSelection = solidSelection as string[];\n      } else if (typeof solidSelection === 'string' && solidSelection) {\n        newSession.solidSelection = [solidSelection];\n      }\n\n      onSave(applyCreateSession(storageData, newSession));\n    }\n  }, [run, storageData, onSave]);\n\n  if (loading) {\n    return <LaunchpadSessionLoading />;\n  }\n\n  if (!runOrError || runOrError.__typename === 'RunNotFoundError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"No run found\"\n        description=\"The run with this ID does not exist or has been cleaned up.\"\n      />\n    );\n  }\n\n  if (runOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError icon=\"error\" title=\"Python error\" description={runOrError.message} />\n    );\n  }\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n\nconst CONFIG_FOR_RUN_QUERY = gql`\n  query ConfigForRunQuery($runId: ID!) {\n    runOrError(runId: $runId) {\n      ... on Run {\n        id\n        mode\n        runConfigYaml\n        solidSelection\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import qs from 'qs';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissions} from '../app/Permissions';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nexport const LaunchpadSetupRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissions();\n  const {repoPath, pipelinePath} = useParams<{repoPath: string; pipelinePath: string}>();\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return <LaunchpadSetupAllowedRoot pipelinePath={pipelinePath} repoAddress={repoAddress} />;\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n}\n\nconst LaunchpadSetupAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [data, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n  const queryString = qs.parse(window.location.search, {ignoreQueryPrefix: true});\n\n  React.useEffect(() => {\n    if (queryString.config || queryString.mode || queryString.solidSelection) {\n      const newSession: Partial<IExecutionSession> = {};\n      if (typeof queryString.config === 'string') {\n        newSession.runConfigYaml = queryString.config;\n      }\n      if (typeof queryString.mode === 'string') {\n        newSession.mode = queryString.mode;\n      }\n      if (queryString.solidSelection instanceof Array && queryString.solidSelection.length > 0) {\n        newSession.solidSelection = queryString.solidSelection as string[];\n      } else if (typeof queryString.solidSelection === 'string' && queryString.solidSelection) {\n        newSession.solidSelection = [queryString.solidSelection];\n      }\n      if (typeof queryString.solidSelectionQuery === 'string') {\n        newSession.solidSelectionQuery = queryString.solidSelectionQuery;\n      }\n\n      onSave(applyCreateSession(data, newSession));\n    }\n  });\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n","import {useQuery, gql} from '@apollo/client';\nimport {Box, Colors, StyledTable, Tag, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {timingStringForStatus} from '../runs/RunDetails';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunTime, RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {RunStatus} from '../types/globalTypes';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTagQuery, LatestRunTagQueryVariables} from './types/LatestRunTagQuery';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const LatestRunTag: React.FC<{pipelineName: string; repoAddress: RepoAddress}> = ({\n  pipelineName,\n  repoAddress,\n}) => {\n  const lastRunQuery = useQuery<LatestRunTagQuery, LatestRunTagQueryVariables>(\n    LATEST_RUN_TAG_QUERY,\n    {\n      variables: {\n        runsFilter: {\n          pipelineName,\n          tags: [\n            {\n              key: DagsterTag.RepositoryLabelTag,\n              value: repoAddressAsTag(repoAddress),\n            },\n          ],\n        },\n      },\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(lastRunQuery, FIFTEEN_SECONDS);\n\n  const run = React.useMemo(() => {\n    const runsOrError = lastRunQuery.data?.pipelineRunsOrError;\n    if (runsOrError && runsOrError.__typename === 'Runs') {\n      return runsOrError.results[0] || null;\n    }\n    return null;\n  }, [lastRunQuery]);\n\n  if (!run) {\n    return null;\n  }\n\n  const stats = {start: run.startTime, end: run.endTime, status: run.status};\n  const intent = () => {\n    switch (run.status) {\n      case RunStatus.SUCCESS:\n        return 'success';\n      case RunStatus.CANCELED:\n      case RunStatus.CANCELING:\n      case RunStatus.FAILURE:\n        return 'danger';\n      default:\n        return 'none';\n    }\n  };\n\n  return (\n    <Tag intent={intent()}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <RunStatusIndicator status={run.status} size={10} />\n        Latest run:\n        {stats ? (\n          <Tooltip\n            placement=\"bottom\"\n            content={\n              <StyledTable>\n                <tbody>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>\n                      <Box padding={{right: 16}}>Started</Box>\n                    </td>\n                    <td>\n                      {stats.start ? (\n                        <TimestampDisplay timestamp={stats.start} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>Ended</td>\n                    <td>\n                      {stats.end ? (\n                        <TimestampDisplay timestamp={stats.end} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                </tbody>\n              </StyledTable>\n            }\n          >\n            <Link to={`/runs/${run.id}`}>\n              <RunTime run={run} />\n            </Link>\n          </Tooltip>\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n\nconst LATEST_RUN_TAG_QUERY = gql`\n  query LatestRunTagQuery($runsFilter: RunsFilter) {\n    pipelineRunsOrError(filter: $runsFilter, limit: 1) {\n      ... on PipelineRuns {\n        results {\n          id\n          status\n          ...RunTimeFragment\n        }\n      }\n    }\n  }\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, ButtonLink, Colors, DialogFooter, Dialog, Table, Tag} from '@dagster-io/ui';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTag} from './LatestRunTag';\nimport {ScheduleOrSensorTag} from './ScheduleOrSensorTag';\nimport {JobMetadataFragment as Job} from './types/JobMetadataFragment';\nimport {\n  JobMetadataQuery,\n  JobMetadataQueryVariables,\n  JobMetadataQuery_assetNodes,\n  JobMetadataQuery_pipelineOrError_Pipeline,\n  JobMetadataQuery_pipelineRunsOrError_Runs_results,\n} from './types/JobMetadataQuery';\n\ntype JobMetadata = {\n  assetNodes: JobMetadataQuery_assetNodes[] | null;\n  job: JobMetadataQuery_pipelineOrError_Pipeline | null;\n  runsForAssetScan: JobMetadataQuery_pipelineRunsOrError_Runs_results[];\n};\n\nexport function useJobNavMetadata(repoAddress: RepoAddress, pipelineName: string) {\n  const {data} = useQuery<JobMetadataQuery, JobMetadataQueryVariables>(JOB_METADATA_QUERY, {\n    variables: {\n      runsFilter: {\n        pipelineName,\n        tags: [\n          {\n            key: DagsterTag.RepositoryLabelTag,\n            value: repoAddressAsTag(repoAddress),\n          },\n        ],\n      },\n      params: {\n        pipelineName,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n    },\n  });\n\n  return React.useMemo<JobMetadata>(() => {\n    return {\n      assetNodes: data?.assetNodes || null,\n      job:\n        data?.pipelineOrError && data.pipelineOrError.__typename === 'Pipeline'\n          ? data.pipelineOrError\n          : null,\n      runsForAssetScan:\n        data?.pipelineRunsOrError && data.pipelineRunsOrError.__typename === 'Runs'\n          ? data.pipelineRunsOrError.results\n          : [],\n    };\n  }, [data]);\n}\n\ninterface Props {\n  pipelineName: string;\n  repoAddress: RepoAddress;\n}\n\nexport const JobMetadata: React.FC<Props> = (props) => {\n  const {pipelineName, repoAddress} = props;\n  const metadata = useJobNavMetadata(repoAddress, pipelineName);\n\n  return (\n    <>\n      {metadata.job ? (\n        <JobScheduleOrSensorTag job={metadata.job} repoAddress={repoAddress} />\n      ) : null}\n      <LatestRunTag pipelineName={pipelineName} repoAddress={repoAddress} />\n      {metadata.runsForAssetScan ? (\n        <RelatedAssetsTag relatedAssets={getRelatedAssets(metadata)} />\n      ) : null}\n    </>\n  );\n};\n\nconst JobScheduleOrSensorTag: React.FC<{\n  job: Job;\n  repoAddress: RepoAddress;\n}> = ({job, repoAddress}) => {\n  const matchingSchedules = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.schedules.length) {\n      return job.schedules;\n    }\n    return [];\n  }, [job]);\n\n  const matchingSensors = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.sensors.length) {\n      return job.sensors;\n    }\n    return [];\n  }, [job]);\n\n  return (\n    <ScheduleOrSensorTag\n      schedules={matchingSchedules}\n      sensors={matchingSensors}\n      repoAddress={repoAddress}\n    />\n  );\n};\n\nfunction getRelatedAssets(metadata: JobMetadata) {\n  if (metadata.assetNodes) {\n    return metadata.assetNodes.map((node) => tokenForAssetKey(node.assetKey));\n  }\n\n  return uniq(\n    metadata.runsForAssetScan.flatMap((r) => r.assets.map((a) => tokenForAssetKey(a.key))),\n  );\n}\n\nconst RelatedAssetsTag: React.FC<{relatedAssets: string[]}> = ({relatedAssets}) => {\n  const [open, setOpen] = React.useState(false);\n\n  if (relatedAssets.length === 0) {\n    return null;\n  }\n\n  if (relatedAssets.length === 1) {\n    const key = relatedAssets[0];\n    return (\n      <Tag icon=\"asset\">\n        Asset: <Link to={`/assets/${key}`}>{key}</Link>\n      </Tag>\n    );\n  }\n\n  return (\n    <>\n      <Tag icon=\"asset\">\n        <ButtonLink\n          color={Colors.Link}\n          onClick={() => setOpen(true)}\n        >{`View ${relatedAssets.length} assets`}</ButtonLink>\n      </Tag>\n      <Dialog\n        title=\"Related assets\"\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        style={{maxWidth: '80%', minWidth: '500px', width: 'auto'}}\n      >\n        <Box padding={{bottom: 12}}>\n          <Table>\n            <tbody>\n              {relatedAssets.map((key) => (\n                <tr key={key}>\n                  <td>\n                    <Link key={key} to={`/assets/${key}`} style={{wordBreak: 'break-word'}}>\n                      {key}\n                    </Link>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setOpen(false)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst RUN_METADATA_FRAGMENT = gql`\n  fragment RunMetadataFragment on PipelineRun {\n    id\n    status\n    assets {\n      id\n      key {\n        path\n      }\n    }\n    ...RunTimeFragment\n  }\n  ${RUN_TIME_FRAGMENT}\n`;\n\nconst JOB_METADATA_FRAGMENT = gql`\n  fragment JobMetadataFragment on Pipeline {\n    id\n    isJob\n    name\n    schedules {\n      id\n      mode\n      ...ScheduleSwitchFragment\n    }\n    sensors {\n      id\n      targets {\n        pipelineName\n        mode\n      }\n      ...SensorSwitchFragment\n    }\n  }\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n\nconst JOB_METADATA_QUERY = gql`\n  query JobMetadataQuery($params: PipelineSelector!, $runsFilter: RunsFilter!) {\n    pipelineOrError(params: $params) {\n      ... on Pipeline {\n        id\n        ...JobMetadataFragment\n      }\n    }\n    assetNodes(pipeline: $params) {\n      id\n      assetKey {\n        path\n      }\n    }\n    pipelineRunsOrError(filter: $runsFilter, limit: 5) {\n      ... on PipelineRuns {\n        results {\n          id\n          ...RunMetadataFragment\n        }\n      }\n    }\n  }\n  ${JOB_METADATA_FRAGMENT}\n  ${RUN_METADATA_FRAGMENT}\n`;\n","import {Box, PageHeader, Tabs, Tag, Heading, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {useRouteMatch} from 'react-router-dom';\n\nimport {PermissionsMap, PermissionResult, usePermissions} from '../app/Permissions';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {JobMetadata} from './JobMetadata';\nimport {RepositoryLink} from './RepositoryLink';\n\ninterface TabConfig {\n  title: string;\n  pathComponent: string;\n  getPermissionsResult?: (permissions: PermissionsMap) => PermissionResult;\n}\n\nconst pipelineTabs: {[key: string]: TabConfig} = {\n  overview: {title: 'Overview', pathComponent: ''},\n  playground: {\n    title: 'Launchpad',\n    pathComponent: 'playground',\n    getPermissionsResult: (permissions: PermissionsMap) => permissions.canLaunchPipelineExecution,\n  },\n  runs: {\n    title: 'Runs',\n    pathComponent: 'runs',\n  },\n  partitions: {\n    title: 'Partitions',\n    pathComponent: 'partitions',\n  },\n};\n\nconst currentOrder = ['overview', 'playground', 'runs', 'partitions'];\n\nfunction tabForPipelinePathComponent(component?: string): TabConfig {\n  const tabList = Object.keys(pipelineTabs);\n  const match =\n    tabList.find((t) => pipelineTabs[t].pathComponent === component) ||\n    tabList.find((t) => pipelineTabs[t].pathComponent === '')!;\n  return pipelineTabs[match];\n}\n\nconst tabForKey = (repoAddress: RepoAddress, isJob: boolean, explorerPath: ExplorerPath) => {\n  const explorerPathForTab = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  // When you click one of the top tabs, it resets the snapshot you may be looking at\n  // in the Definition tab and also clears solids from the path\n  return (key: string) => {\n    const tab = pipelineTabs[key];\n    return {\n      text: tab.title,\n      href: workspacePathFromAddress(\n        repoAddress,\n        `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathForTab}${tab.pathComponent}`,\n      ),\n      getPermissionsResult: tab.getPermissionsResult,\n    };\n  };\n};\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineNav: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const permissions = usePermissions();\n\n  const match = useRouteMatch<{tab?: string; selector: string}>([\n    '/locations/:repoPath/pipelines/:selector/:tab?',\n    '/locations/:repoPath/jobs/:selector/:tab?',\n    '/locations/:repoPath/pipeline_or_job/:selector/:tab?',\n  ]);\n\n  const active = tabForPipelinePathComponent(match!.params.tab);\n  const explorerPath = explorerPathFromString(match!.params.selector);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const repoJobEntry = repo?.repository.pipelines.find(\n    (pipelineOrJob) => pipelineOrJob.name === pipelineName,\n  );\n  const isJob = !!repoJobEntry?.isJob;\n  const isAssetJob = !!repoJobEntry?.isAssetJob;\n\n  // If using pipeline:mode tuple (crag flag), check for partition sets that are for this specific\n  // pipeline:mode tuple. Otherwise, just check for a pipeline name match.\n  const partitionSets = repo?.repository.partitionSets || [];\n  const hasLaunchpad = !isAssetJob;\n  const hasPartitionSet = partitionSets.some(\n    (partitionSet) => partitionSet.pipelineName === pipelineName,\n  );\n\n  const tabs = currentOrder\n    .filter(\n      (key) => (hasLaunchpad || key !== 'playground') && (hasPartitionSet || key !== 'partitions'),\n    )\n    .map(tabForKey(repoAddress, isJob, explorerPath));\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        tags={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8, wrap: 'wrap'}}>\n            <Tag icon=\"job\">\n              {isJob ? 'Job in ' : 'Pipeline in '}\n              <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {snapshotId ? null : (\n              <JobMetadata pipelineName={pipelineName} repoAddress={repoAddress} />\n            )}\n          </Box>\n        }\n        tabs={\n          <Tabs size=\"large\" selectedTabId={active.title}>\n            {tabs.map((tab) => {\n              const {href, text, getPermissionsResult} = tab;\n              let permissionsResult = null;\n              if (getPermissionsResult) {\n                permissionsResult = getPermissionsResult(permissions);\n              }\n              const disabled = !!(permissionsResult && !permissionsResult.enabled);\n              const title =\n                permissionsResult && disabled ? (\n                  <Tooltip content={permissionsResult.disabledReason} placement=\"top\">\n                    {text}\n                  </Tooltip>\n                ) : (\n                  text\n                );\n              return <TabLink key={text} id={text} title={title} disabled={disabled} to={href} />;\n            })}\n          </Tabs>\n        }\n      />\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, CursorPaginationControls, CursorPaginationProps, NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from '../instance/BackfillTable';\nimport {RepositorySelector} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\n\nconst BACKFILL_PAGE_SIZE = 10;\n\nexport const JobBackfillsTable = ({\n  partitionSetName,\n  partitionNames,\n  repositorySelector,\n  refetchCounter,\n}: {\n  partitionSetName: string;\n  partitionNames: string[];\n  repositorySelector: RepositorySelector;\n  refetchCounter: number;\n}) => {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = React.useState<string | undefined>();\n  const queryResult = useQuery(JOB_BACKFILLS_QUERY, {\n    variables: {\n      partitionSetName,\n      repositorySelector,\n      cursor,\n      limit: BACKFILL_PAGE_SIZE,\n    },\n    partialRefetch: true,\n  });\n\n  const refetch = queryResult.refetch;\n  React.useEffect(() => {\n    refetchCounter && refetch();\n  }, [refetch, refetchCounter]);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        const {backfills, pipelineName} = partitionSetOrError;\n\n        if (!backfills.length) {\n          return (\n            <Box margin={{vertical: 20}}>\n              <NonIdealState title={`No backfills for ${pipelineName}`} icon=\"no-results\" />\n            </Box>\n          );\n        }\n\n        const paginationProps: CursorPaginationProps = {\n          hasPrevCursor: !!cursor,\n          hasNextCursor: backfills && backfills.length === BACKFILL_PAGE_SIZE,\n          popCursor: () => {\n            const nextStack = [...cursorStack];\n            setCursor(nextStack.pop());\n            setCursorStack(nextStack);\n          },\n          advanceCursor: () => {\n            if (cursor) {\n              setCursorStack((current) => [...current, cursor]);\n            }\n            const nextCursor = backfills && backfills[backfills.length - 1].backfillId;\n            if (!nextCursor) {\n              return;\n            }\n            setCursor(nextCursor);\n          },\n          reset: () => {\n            setCursorStack([]);\n            setCursor(undefined);\n          },\n        };\n        return (\n          <>\n            <BackfillTable\n              backfills={backfills}\n              refetch={refetch}\n              showBackfillTarget={false}\n              allPartitions={partitionNames}\n            />\n            <CursorPaginationControls {...paginationProps} />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst JOB_BACKFILLS_QUERY = gql`\n  query JobBackfillsQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n    $cursor: String\n    $limit: Int\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        pipelineName\n        backfills(cursor: $cursor, limit: $limit) {\n          ...BackfillTableFragment\n        }\n      }\n    }\n  }\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  ButtonLink,\n  Checkbox,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tooltip,\n  Mono,\n  Button,\n} from '@dagster-io/ui';\nimport {History} from 'history';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfill,\n  LaunchPartitionBackfillVariables,\n} from '../instance/types/LaunchPartitionBackfill';\nimport {LaunchButton} from '../launchpad/LaunchButton';\nimport {TagEditor, TagContainer} from '../launchpad/TagEditor';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRangeWizard} from './PartitionRangeWizard';\nimport {PartitionStateCheckboxes} from './PartitionStateCheckboxes';\nimport {PartitionState} from './PartitionStatus';\nimport {BackfillSelectorQuery, BackfillSelectorQueryVariables} from './types/BackfillSelectorQuery';\n\nconst DEFAULT_RUN_LAUNCHER_NAME = 'DefaultRunLauncher';\n\ninterface BackfillOptions {\n  reexecute: boolean;\n  fromFailure: boolean;\n}\n\nexport const BackfillPartitionSelector: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  partitionData: {[name: string]: PartitionState};\n  pipelineName: string;\n  onLaunch?: (backfillId: string, stepQuery: string) => void;\n  onCancel?: () => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  onLaunch,\n  onCancel,\n  onSubmit,\n  repoAddress,\n  partitionData,\n  pipelineName,\n  partitionNames,\n}) => {\n  const history = useHistory();\n  const [range, _setRange] = React.useState<string[]>(\n    Object.keys(partitionData).filter(\n      (k) => !partitionData[k] || partitionData[k] === PartitionState.FAILURE,\n    ),\n  );\n  const [stateFilters, setStateFilters] = React.useState<PartitionState[]>([\n    PartitionState.MISSING,\n    PartitionState.FAILURE,\n  ]);\n\n  const selected = React.useMemo(() => {\n    return range.filter((r) => stateFilters.includes(partitionData[r]));\n  }, [range, stateFilters, partitionData]);\n\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n  const [query, setQuery] = React.useState<string>('');\n  const [options, setOptions] = React.useState<BackfillOptions>({\n    reexecute: false,\n    fromFailure: false,\n  });\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data} = useQuery<BackfillSelectorQuery, BackfillSelectorQueryVariables>(\n    BACKFILL_SELECTOR_QUERY,\n    {\n      variables: {\n        pipelineSelector: {\n          ...repositorySelector,\n          pipelineName,\n        },\n      },\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  const mounted = React.useRef(true);\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onLaunch]);\n\n  const onSuccess = (backfillId: string) => {\n    showBackfillSuccessToast(history, backfillId);\n    onLaunch?.(backfillId, query);\n  };\n\n  const onError = (data: LaunchPartitionBackfill | null | undefined) => {\n    showBackfillErrorToast(data);\n  };\n\n  if (!data) {\n    return (\n      <Box margin={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n    return (\n      <Box margin={20}>\n        <NonIdealState icon=\"error\" title=\"Could not fetch job details\" />\n      </Box>\n    );\n  }\n\n  const {pipelineSnapshotOrError: pipelineSnapshot, instance} = data;\n  const solids = explodeCompositesInHandleGraph(pipelineSnapshot.solidHandles).map(\n    (h: any) => h.solid,\n  );\n  const solidsFiltered = filterByQuery(solids, query);\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n  const stepRows = layout.boxes.map((box) => ({\n    x: box.x,\n    name: box.node.name,\n  }));\n\n  const usingDefaultRunLauncher = instance.runLauncher?.name === DEFAULT_RUN_LAUNCHER_NAME;\n\n  const isFailed = (name: string) => partitionData[name] === PartitionState.FAILURE;\n  const failedPartitions = partitionNames.filter(isFailed);\n\n  const setRange = (selection: string[]) => {\n    const selectionSet = new Set(selection);\n    // first order the partition names, according to the order given by partition names, which\n    // is the order determined from the partition definition set in user code\n    _setRange(partitionNames.filter((name) => selectionSet.has(name)));\n    if (options.fromFailure && selection.filter((x) => !isFailed(x)).length > 0) {\n      setOptions({...options, fromFailure: false});\n    }\n  };\n\n  return (\n    <>\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 32}}>\n          <Section title=\"Partitions\">\n            <Box>\n              Select partitions to materialize. Click and drag to select a range on the timeline.\n            </Box>\n\n            <PartitionRangeWizard\n              selected={range}\n              setSelected={setRange}\n              partitionStateForKey={(name) => partitionData[name]}\n              partitionKeys={partitionNames}\n            />\n\n            <PartitionStateCheckboxes\n              value={stateFilters}\n              partitionKeysForCounts={range.map((key) => ({\n                partitionKey: key,\n                state: partitionData[key],\n              }))}\n              allowed={\n                options.fromFailure\n                  ? [PartitionState.FAILURE]\n                  : [\n                      PartitionState.MISSING,\n                      PartitionState.FAILURE,\n                      PartitionState.QUEUED,\n                      PartitionState.STARTED,\n                      PartitionState.SUCCESS,\n                    ]\n              }\n              onChange={setStateFilters}\n            />\n          </Section>\n\n          {failedPartitions.length ? (\n            <Section title=\"Reexecution\">\n              <Checkbox\n                checked={options.fromFailure}\n                disabled={!selected.every(isFailed)}\n                onChange={() => {\n                  const next = {\n                    ...options,\n                    fromFailure: !options.fromFailure,\n                    reexecute: !options.reexecute,\n                  };\n\n                  if (next.fromFailure) {\n                    setStateFilters([PartitionState.FAILURE]);\n                  }\n                  setQuery('');\n                  setOptions(next);\n                }}\n                label={\n                  <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                    <Box margin={{right: 4}}>Re-execute from failures</Box>\n                    <Tooltip\n                      placement=\"top\"\n                      content=\"For each partition, if the most recent run failed, launch a re-execution starting from the steps that failed. Only applies for selections of failed partitions.\"\n                    >\n                      <Icon name=\"info\" color={Colors.Gray500} />\n                    </Tooltip>\n                  </Box>\n                }\n              />\n            </Section>\n          ) : null}\n\n          <Section\n            title={\n              <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                <Box margin={{right: 4}}>Step subset</Box>\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Applies a step-selection to each run for the requested partitions.\"\n                >\n                  <Icon name=\"info\" color={Colors.Gray500} />\n                </Tooltip>\n              </Box>\n            }\n          >\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n              <GraphQueryInput\n                disabled={options.fromFailure}\n                width={520}\n                items={solids}\n                value={query}\n                placeholder=\"Type a step subset\"\n                onChange={setQuery}\n                autoApplyChanges={true}\n              />\n              {query ? (\n                <div style={{color: Colors.Gray500}}>\n                  {stepRows.length} step{stepRows.length === 1 ? '' : 's'} selected\n                </div>\n              ) : null}\n            </Box>\n          </Section>\n\n          <Section title=\"Tags\">\n            <TagEditor\n              tagsFromSession={tags}\n              onChange={setTags}\n              open={tagEditorOpen}\n              onRequestClose={() => setTagEditorOpen(false)}\n            />\n            {tags.length ? (\n              <div style={{border: `1px solid ${Colors.Gray300}`, borderRadius: 8, padding: 3}}>\n                <TagContainer tagsFromSession={tags} onRequestEdit={() => setTagEditorOpen(true)} />\n              </div>\n            ) : (\n              <div>\n                <Button onClick={() => setTagEditorOpen(true)}>Add tags to backfill runs</Button>\n              </div>\n            )}\n          </Section>\n\n          {!instance.daemonHealth.daemonStatus.healthy ? <DaemonNotRunningAlert /> : null}\n\n          {usingDefaultRunLauncher && !instance.runQueuingSupported ? (\n            <UsingDefaultLauncherAlert />\n          ) : null}\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <LaunchBackfillButton\n          partitionNames={selected}\n          partitionSetName={partitionSetName}\n          reexecutionSteps={\n            !options.fromFailure && solidsFiltered.all.length < solids.length\n              ? stepRows.map((step) => step.name)\n              : undefined\n          }\n          fromFailure={options.fromFailure}\n          tags={tags}\n          onSubmit={onSubmit}\n          onSuccess={onSuccess}\n          onError={onError}\n          repoAddress={repoAddress}\n        />\n      </DialogFooter>\n    </>\n  );\n};\n\nconst LaunchBackfillButton: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  reexecutionSteps?: string[];\n  fromFailure?: boolean;\n  tags?: PipelineRunTag[];\n  onSuccess?: (backfillId: string) => void;\n  onError: (data: LaunchPartitionBackfill | null | undefined) => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  partitionNames,\n  reexecutionSteps,\n  fromFailure,\n  tags,\n  onSuccess,\n  onError,\n  onSubmit,\n  repoAddress,\n}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const mounted = React.useRef(true);\n  const [launchBackfill, {loading}] = useMutation<\n    LaunchPartitionBackfill,\n    LaunchPartitionBackfillVariables\n  >(LAUNCH_PARTITION_BACKFILL_MUTATION);\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onSuccess]);\n\n  const onLaunch = async () => {\n    onSubmit();\n    const {data} = await launchBackfill({\n      variables: {\n        backfillParams: {\n          selector: {\n            partitionSetName,\n            repositorySelector,\n          },\n          partitionNames,\n          reexecutionSteps,\n          fromFailure,\n          tags,\n        },\n      },\n    });\n\n    if (!mounted.current) {\n      return;\n    }\n\n    if (data && data.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n      onSuccess?.(data.launchPartitionBackfill.backfillId);\n    } else {\n      onError?.(data);\n    }\n  };\n\n  const count = partitionNames.length;\n  const reexecutionCount = reexecutionSteps?.length;\n\n  const title = () => {\n    if (loading) {\n      return `Submitting ${count} ${count === 1 ? 'run' : 'runs'}…`;\n    }\n\n    if (count) {\n      return `Submit ${count} ${count === 1 ? 'run' : 'runs'}`;\n    }\n\n    return 'Select partitions to submit';\n  };\n\n  const subtitle = () => {\n    return !loading && reexecutionCount\n      ? `(${reexecutionCount} selected ${reexecutionCount === 1 ? 'step' : 'steps'})`\n      : '';\n  };\n\n  const buttonTitle = [title(), subtitle()].join(' ');\n\n  return (\n    <LaunchButton\n      runCount={count}\n      config={{\n        title: buttonTitle,\n        icon: 'open_in_new',\n        disabled: !count || loading,\n        onClick: onLaunch,\n      }}\n    />\n  );\n};\n\nconst BACKFILL_SELECTOR_QUERY = gql`\n  query BackfillSelectorQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          handleID\n          ...GraphExplorerSolidHandleFragment\n          solid {\n            name\n            definition {\n              name\n            }\n            inputs {\n              dependsOn {\n                solid {\n                  name\n                }\n              }\n            }\n            outputs {\n              dependedBy {\n                solid {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    instance {\n      runLauncher {\n        name\n      }\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"BACKFILL\") {\n          id\n          healthy\n        }\n      }\n      runQueuingSupported\n    }\n  }\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n\nfunction messageForLaunchBackfillError(data: LaunchPartitionBackfill | null | undefined) {\n  const result = data?.launchPartitionBackfill;\n\n  let errors = <></>;\n  if (result?.__typename === 'PythonError' || result?.__typename === 'PartitionSetNotFoundError') {\n    errors = <PythonErrorInfo error={result} />;\n  } else if (result?.__typename === 'InvalidStepError') {\n    errors = <div>{`Invalid step: ${result.invalidStepKey}`}</div>;\n  } else if (result?.__typename === 'InvalidOutputError') {\n    errors = <div>{`Invalid output: ${result.invalidOutputName} for ${result.stepKey}`}</div>;\n  } else if (result && 'errors' in result) {\n    errors = (\n      <>\n        {result['errors'].map((error, idx) => (\n          <PythonErrorInfo error={error} key={idx} />\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <div>An unexpected error occurred. This backfill was not launched.</div>\n      {errors ? (\n        <ButtonLink\n          color={Colors.White}\n          underline=\"always\"\n          onClick={() => {\n            showCustomAlert({\n              body: errors,\n            });\n          }}\n        >\n          View error\n        </ButtonLink>\n      ) : null}\n    </Group>\n  );\n}\n\nexport function showBackfillErrorToast(data: LaunchPartitionBackfill | null | undefined) {\n  SharedToaster.show({\n    message: messageForLaunchBackfillError(data),\n    icon: 'error',\n    intent: 'danger',\n  });\n}\n\nexport function showBackfillSuccessToast(history: History<unknown>, backfillId: string) {\n  SharedToaster.show({\n    intent: 'success',\n    message: (\n      <div>\n        Created backfill <Mono>{backfillId}</Mono>\n      </div>\n    ),\n    action: {\n      text: 'View',\n      onClick: () => history.push('/overview/backfills'),\n    },\n  });\n}\n\nconst DaemonNotRunningAlert: React.FC = () => (\n  <Alert\n    intent=\"warning\"\n    title=\"The backfill daemon is not running.\"\n    description={\n      <div>\n        See the{' '}\n        <a\n          href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          dagster-daemon documentation\n        </a>{' '}\n        for more information on how to deploy the dagster-daemon process.\n      </div>\n    }\n  />\n);\n\nconst UsingDefaultLauncherAlert: React.FC = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Using the default run launcher <code>{DEFAULT_RUN_LAUNCHER_NAME}</code> for launching\n        backfills without a queued run coordinator is not advised.\n      </div>\n    }\n    description={\n      <div>\n        Check your instance configuration in <code>dagster.yaml</code> to either configure the{' '}\n        <a\n          href=\"https://docs.dagster.io/deployment/run-coordinator\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          queued run coordinator\n        </a>{' '}\n        or to configure a run launcher more appropriate for launching a large number of jobs.\n      </div>\n    }\n  />\n);\n\nconst Section = ({\n  title,\n  children,\n}: {\n  title: string | React.ReactNode;\n  children: React.ReactNode;\n}) => (\n  <Box flex={{direction: 'column', gap: 8}}>\n    <strong style={{display: 'block'}}>{title}</strong>\n    <Box\n      flex={{direction: 'column', gap: 8}}\n      padding={{top: 16}}\n      border={{width: 1, color: Colors.KeylineGray, side: 'top'}}\n    >\n      {children}\n    </Box>\n  </Box>\n);\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport styled from 'styled-components/macro';\n\nimport {colorHash} from '../app/Util';\n\ntype PointValue = number | null | undefined;\ntype Point = {x: string; y: PointValue};\n\ninterface PartitionGraphProps {\n  partitionNames: string[];\n  jobDataByPartition?: {[partitionName: string]: PointValue};\n  stepDataByPartition?: {[partitionName: string]: {[key: string]: PointValue[]}};\n  title?: string;\n  yLabel?: string;\n  isJob: boolean;\n  hiddenStepKeys?: string[];\n}\n\nexport const PartitionGraph = ({\n  partitionNames,\n  jobDataByPartition,\n  stepDataByPartition,\n  title,\n  yLabel,\n  isJob,\n  hiddenStepKeys,\n}: PartitionGraphProps) => {\n  const [hiddenPartitions, setHiddenPartitions] = React.useState<{[name: string]: boolean}>(\n    () => ({}),\n  );\n  const chart = React.useRef<any>(null);\n\n  const onGraphClick = React.useCallback((event: MouseEvent) => {\n    const instance = chart.current;\n    if (!instance) {\n      return;\n    }\n    const xAxis = instance.scales['x-axis-0'];\n    if (!xAxis) {\n      return;\n    }\n    const {offsetX, offsetY} = event;\n\n    const isChartClick =\n      event.type === 'click' &&\n      offsetX <= instance.chartArea.right &&\n      offsetX >= instance.chartArea.left &&\n      offsetY <= instance.chartArea.bottom &&\n      offsetY >= instance.chartArea.top;\n\n    if (!isChartClick || !event.shiftKey) {\n      return;\n    }\n\n    // category scale returns index here for some reason\n    const labelIndex = xAxis.getValueForPixel(offsetX);\n    const partitionName = instance.data.labels[labelIndex];\n    setHiddenPartitions((current) => ({\n      ...current,\n      [partitionName]: !current[partitionName],\n    }));\n  }, []);\n\n  const defaultOptions = React.useMemo(() => {\n    const titleOptions = title ? {display: true, text: title} : undefined;\n    const scales = yLabel\n      ? {\n          y: {\n            id: 'y',\n            title: {display: true, text: yLabel},\n          },\n          x: {\n            id: 'x',\n            title: {display: true, text: title},\n          },\n        }\n      : undefined;\n\n    return {\n      title: titleOptions,\n      animation: false,\n      scales,\n      plugins: {\n        legend: {\n          display: false,\n          onClick: (_e: MouseEvent, _legendItem: any) => {},\n        },\n      },\n      onClick: onGraphClick,\n      maintainAspectRatio: false,\n    };\n  }, [onGraphClick, title, yLabel]);\n\n  const buildDatasetData = () => {\n    const jobData: Point[] = [];\n    const stepData = {};\n\n    partitionNames.forEach((partitionName) => {\n      const hidden = !!hiddenPartitions[partitionName];\n      if (jobDataByPartition) {\n        jobData.push({\n          x: partitionName,\n          y: !hidden ? jobDataByPartition[partitionName] : undefined,\n        });\n      }\n\n      if (stepDataByPartition) {\n        const stepDataByKey = stepDataByPartition[partitionName];\n        Object.keys(stepDataByKey || {}).forEach((stepKey) => {\n          if (hiddenStepKeys?.includes(stepKey) || !stepDataByKey[stepKey]) {\n            return;\n          }\n          stepData[stepKey] = [\n            ...(stepData[stepKey] || []),\n            {\n              x: partitionName,\n              y: !hidden ? stepDataByKey[stepKey] : undefined,\n            },\n          ];\n        });\n      }\n    });\n\n    // stepData may have holes due to missing runs or missing steps.  For these to\n    // render properly, fill in the holes with `undefined` values.\n    Object.keys(stepData).forEach((stepKey) => {\n      stepData[stepKey] = _fillPartitions(partitionNames, stepData[stepKey]);\n    });\n\n    return {jobData, stepData};\n  };\n\n  const {jobData, stepData} = buildDatasetData();\n  const allLabel = isJob ? 'Total job' : 'Total pipeline';\n  const graphData = {\n    labels: partitionNames,\n    datasets: [\n      ...(!jobDataByPartition || (hiddenStepKeys && hiddenStepKeys.includes(allLabel))\n        ? []\n        : [\n            {\n              label: allLabel,\n              data: jobData,\n              borderColor: Colors.Gray500,\n              backgroundColor: 'rgba(0,0,0,0)',\n            },\n          ]),\n      ...Object.keys(stepData).map((stepKey) => ({\n        label: stepKey,\n        data: stepData[stepKey],\n        borderColor: colorHash(stepKey),\n        backgroundColor: 'rgba(0,0,0,0)',\n      })),\n    ],\n  };\n\n  // Passing graphData as a closure prevents ChartJS from trying to isEqual, which is fairly\n  // unlikely to save a render and is time consuming given the size of the data structure.\n  // We have a useMemo around the entire <PartitionGraphSet /> and there aren't many extra renders.\n  return (\n    <PartitionGraphContainer>\n      <Line type=\"line\" data={() => graphData} height={300} options={defaultOptions} ref={chart} />\n    </PartitionGraphContainer>\n  );\n};\n\nconst _fillPartitions = (partitionNames: string[], points: Point[]) => {\n  const pointData = {};\n  points.forEach((point) => {\n    pointData[point.x] = point.y;\n  });\n\n  return partitionNames.map((partitionName) => ({\n    x: partitionName,\n    y: pointData[partitionName],\n  }));\n};\n\nconst PartitionGraphContainer = styled.div`\n  display: flex;\n  color: ${Colors.Gray700};\n  padding: 24px 12px;\n  text-decoration: none;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, Dialog, Icon, Tooltip, Colors, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissions} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useViewport} from '../gantt/useViewport';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BackfillPartitionSelector} from './BackfillSelector';\nimport {JobBackfillsTable} from './JobBackfillsTable';\nimport {PartitionGraph} from './PartitionGraph';\nimport {PartitionState, PartitionStatus, runStatusToPartitionState} from './PartitionStatus';\nimport {getVisibleItemCount, PartitionPerOpStatus} from './PartitionStepStatus';\nimport {GRID_FLOATING_CONTAINER_WIDTH} from './RunMatrixUtils';\nimport {\n  PartitionsStatusQuery_partitionSetOrError_PartitionSet_partitionStatusesOrError_PartitionStatuses_results,\n  PartitionsStatusQuery_partitionSetOrError_PartitionSet,\n  PartitionsStatusQuery,\n  PartitionsStatusQueryVariables,\n} from './types/PartitionsStatusQuery';\nimport {PartitionRuns} from './useMatrixData';\nimport {usePartitionStepQuery} from './usePartitionStepQuery';\n\ntype PartitionStatus = PartitionsStatusQuery_partitionSetOrError_PartitionSet_partitionStatusesOrError_PartitionStatuses_results;\n\nexport const OpJobPartitionsView: React.FC<{\n  partitionSetName: string;\n  repoAddress: RepoAddress;\n}> = ({partitionSetName, repoAddress}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const queryResult = useQuery<PartitionsStatusQuery, PartitionsStatusQueryVariables>(\n    PARTITIONS_STATUS_QUERY,\n    {variables: {partitionSetName, repositorySelector}},\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        if (\n          partitionSetOrError.__typename !== 'PartitionSet' ||\n          partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ) {\n          return null;\n        }\n\n        const partitionNames = partitionSetOrError.partitionsOrError.results.map(({name}) => name);\n\n        return (\n          <OpJobPartitionsViewContent\n            partitionNames={partitionNames}\n            partitionSet={partitionSetOrError}\n            repoAddress={repoAddress}\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport function usePartitionDurations(partitions: PartitionRuns[]) {\n  return React.useMemo(() => {\n    const stepDurationData: {[name: string]: {[key: string]: (number | undefined)[]}} = {};\n    const runDurationData: {[name: string]: number | undefined} = {};\n\n    partitions.forEach((p) => {\n      if (!p.runsLoaded || p.runs.length === 0) {\n        return;\n      }\n      const sortedRuns = p.runs.sort((a, b) => a.startTime || 0 - (b.startTime || 0));\n      const lastRun = sortedRuns[sortedRuns.length - 1];\n      stepDurationData[p.name] = {};\n      runDurationData[p.name] =\n        lastRun?.endTime && lastRun?.startTime ? lastRun.endTime - lastRun.startTime : undefined;\n\n      lastRun.stepStats.forEach((s) => {\n        stepDurationData[p.name][s.stepKey] = [\n          s.endTime && s.startTime ? s.endTime - s.startTime : undefined,\n        ];\n      });\n    });\n\n    return {runDurationData, stepDurationData};\n  }, [partitions]);\n}\n\nconst OpJobPartitionsViewContent: React.FC<{\n  partitionNames: string[];\n  partitionSet: PartitionsStatusQuery_partitionSetOrError_PartitionSet;\n  repoAddress: RepoAddress;\n}> = ({partitionSet, partitionNames, repoAddress}) => {\n  const {canLaunchPartitionBackfill} = usePermissions();\n  const {viewport, containerProps} = useViewport();\n\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n  const [showSteps, setShowSteps] = React.useState(false);\n  const [showBackfillSetup, setShowBackfillSetup] = React.useState(false);\n  const [blockDialog, setBlockDialog] = React.useState(false);\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const [backfillRefetchCounter, setBackfillRefetchCounter] = React.useState(0);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter: [],\n    repositorySelector,\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !showSteps,\n  });\n\n  React.useEffect(() => {\n    if (viewport.width && !showSteps) {\n      // magical numbers to approximate the size of the window, which is calculated in the step\n      // status component.  This approximation is to make sure that the window does not jump as\n      // the pageSize gets recalculated\n      const approxPageSize = getVisibleItemCount(viewport.width - GRID_FLOATING_CONTAINER_WIDTH);\n      setPageSize(approxPageSize);\n    }\n  }, [viewport.width, showSteps, setPageSize]);\n\n  const selectedPartitions = showSteps\n    ? partitionNames.slice(\n        Math.max(0, partitionNames.length - 1 - offset - pageSize),\n        partitionNames.length - offset,\n      )\n    : partitionNames;\n\n  const runDurationData: {[name: string]: number | undefined} = {};\n  const stepDurationData = usePartitionDurations(partitions).stepDurationData;\n\n  // Note: This view reads \"run duration\" from the `partitionStatusesOrError` GraphQL API,\n  // rather than looking at the duration of the most recent run returned in `partitions` above\n  // so that the latter can be loaded when you click \"Show per-step status\" only.\n\n  const statusData: {[name: string]: PartitionState} = {};\n  (partitionSet.partitionStatusesOrError.__typename === 'PartitionStatuses'\n    ? partitionSet.partitionStatusesOrError.results\n    : []\n  ).forEach((p) => {\n    statusData[p.partitionName] = runStatusToPartitionState(p.runStatus);\n    if (selectedPartitions.includes(p.partitionName)) {\n      runDurationData[p.partitionName] = p.runDuration || undefined;\n    }\n  });\n\n  const onSubmit = React.useCallback(() => setBlockDialog(true), []);\n\n  return (\n    <div>\n      <Dialog\n        canEscapeKeyClose={!blockDialog}\n        canOutsideClickClose={!blockDialog}\n        onClose={() => setShowBackfillSetup(false)}\n        style={{width: 800, zIndex: 1000}}\n        title={`Launch ${partitionSet.pipelineName} backfill`}\n        isOpen={showBackfillSetup}\n      >\n        {showBackfillSetup && (\n          <BackfillPartitionSelector\n            partitionSetName={partitionSet.name}\n            partitionNames={partitionNames}\n            partitionData={statusData}\n            pipelineName={partitionSet.pipelineName}\n            onCancel={() => setShowBackfillSetup(false)}\n            onLaunch={(_backfillId, _stepQuery) => {\n              setBackfillRefetchCounter(backfillRefetchCounter + 1);\n              setShowBackfillSetup(false);\n            }}\n            onSubmit={onSubmit}\n            repoAddress={repoAddress}\n          />\n        )}\n      </Dialog>\n\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{vertical: 16, horizontal: 24}}\n      >\n        <Subheading>Status</Subheading>\n        <Box flex={{gap: 8}}>\n          <Button onClick={() => setShowSteps(!showSteps)} active={showBackfillSetup}>\n            {showSteps ? 'Hide per-step status' : 'Show per-step status'}\n          </Button>\n          {canLaunchPartitionBackfill.enabled ? (\n            <Button\n              onClick={() => setShowBackfillSetup(!showBackfillSetup)}\n              icon={<Icon name=\"add_circle\" />}\n              active={showBackfillSetup}\n            >\n              Launch backfill...\n            </Button>\n          ) : (\n            <Tooltip content={canLaunchPartitionBackfill.disabledReason}>\n              <Button icon={<Icon name=\"add_circle\" />} disabled>\n                Launch backfill...\n              </Button>\n            </Tooltip>\n          )}\n        </Box>\n      </Box>\n      <Box\n        flex={{direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{left: 8}}\n      >\n        <CountBox count={partitionNames.length} label=\"Total partitions\" />\n        <CountBox\n          count={partitionNames.filter((x) => statusData[x] === PartitionState.FAILURE).length}\n          label=\"Failed partitions\"\n        />\n        <CountBox\n          count={partitionNames.filter((x) => !statusData[x]).length}\n          label=\"Missing partitions\"\n        />\n      </Box>\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <div {...containerProps}>\n          <PartitionStatus\n            partitionNames={partitionNames}\n            partitionStateForKey={(name) => statusData[name]}\n            selected={showSteps ? selectedPartitions : undefined}\n            selectionWindowSize={pageSize}\n            onClick={(partitionName) => {\n              const maxIdx = partitionNames.length - 1;\n              const selectedIdx = partitionNames.indexOf(partitionName);\n              const nextOffset = Math.min(\n                maxIdx,\n                Math.max(0, maxIdx - selectedIdx - 0.5 * pageSize),\n              );\n              setOffset(nextOffset);\n              if (!showSteps) {\n                setShowSteps(true);\n              }\n            }}\n            tooltipMessage=\"Click to view per-step status\"\n          />\n        </div>\n        {showSteps ? (\n          <Box margin={{top: 16}}>\n            <PartitionPerOpStatus\n              partitionNames={partitionNames}\n              partitions={partitions}\n              pipelineName={partitionSet.pipelineName}\n              repoAddress={repoAddress}\n              setPageSize={setPageSize}\n              offset={offset}\n              setOffset={setOffset}\n            />\n          </Box>\n        ) : null}\n      </Box>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Run duration</Subheading>\n      </Box>\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={showSteps ? selectedPartitions : partitionNames}\n          jobDataByPartition={runDurationData}\n        />\n      </Box>\n      {showSteps ? (\n        <>\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <Subheading>Step duration</Subheading>\n          </Box>\n          <Box margin={24}>\n            <PartitionGraph\n              isJob={true}\n              title=\"Execution time by partition\"\n              yLabel=\"Execution time (secs)\"\n              partitionNames={selectedPartitions}\n              stepDataByPartition={stepDurationData}\n            />\n          </Box>\n        </>\n      ) : null}\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', color: Colors.KeylineGray, width: 1}}\n        style={{marginBottom: -1}}\n      >\n        <Subheading>Backfill history</Subheading>\n      </Box>\n      <Box margin={{bottom: 20}}>\n        <JobBackfillsTable\n          partitionSetName={partitionSet.name}\n          repositorySelector={repositorySelector}\n          partitionNames={partitionNames}\n          refetchCounter={backfillRefetchCounter}\n        />\n      </Box>\n    </div>\n  );\n};\n\nexport const CountBox: React.FC<{\n  count: number;\n  label: string;\n}> = ({count, label}) => (\n  <Box padding={16} style={{flex: 1}} border={{side: 'right', width: 1, color: Colors.KeylineGray}}>\n    <div style={{fontSize: 18, marginBottom: 4}}>\n      <strong>{count}</strong>\n    </div>\n    <div>{label}</div>\n  </Box>\n);\n\nconst PARTITIONS_STATUS_QUERY = gql`\n  query PartitionsStatusQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        name\n        pipelineName\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              name\n            }\n          }\n        }\n        partitionStatusesOrError {\n          __typename\n          ... on PartitionStatuses {\n            results {\n              id\n              partitionName\n              runStatus\n              runDuration\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Button, Colors, Subheading} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {useAssetGraphData} from '../asset-graph/useAssetGraphData';\nimport {LaunchAssetExecutionButton} from '../assets/LaunchAssetExecutionButton';\nimport {\n  mergedAssetHealth,\n  explodePartitionKeysInRanges,\n  isTimeseriesDimension,\n} from '../assets/MultipartitioningSupport';\nimport {usePartitionHealthData} from '../assets/usePartitionHealthData';\nimport {useViewport} from '../gantt/useViewport';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RepositorySelector} from '../types/globalTypes';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {JobBackfillsTable} from './JobBackfillsTable';\nimport {CountBox, usePartitionDurations} from './OpJobPartitionsView';\nimport {PartitionGraph} from './PartitionGraph';\nimport {PartitionState, PartitionStatus} from './PartitionStatus';\nimport {getVisibleItemCount, PartitionPerAssetStatus} from './PartitionStepStatus';\nimport {GRID_FLOATING_CONTAINER_WIDTH} from './RunMatrixUtils';\nimport {usePartitionStepQuery} from './usePartitionStepQuery';\n\nexport const AssetJobPartitionsView: React.FC<{\n  pipelineName: string;\n  partitionSetName: string;\n  repoAddress: RepoAddress;\n}> = ({partitionSetName, repoAddress, pipelineName}) => {\n  const {viewport, containerProps} = useViewport();\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const assetGraph = useAssetGraphData('', {\n    pipelineSelector: {\n      pipelineName,\n      repositoryName: repoAddress.name,\n      repositoryLocationName: repoAddress.location,\n    },\n  });\n\n  const assetHealth = usePartitionHealthData(assetGraph.graphAssetKeys);\n\n  const {total, missing, merged} = React.useMemo(() => {\n    const merged = mergedAssetHealth(assetHealth.filter((h) => h.dimensions.length > 0));\n    const ranges = merged.dimensions.map((d) => ({selected: d.partitionKeys, dimension: d}));\n    const allKeys = explodePartitionKeysInRanges(ranges, merged.stateForKey);\n\n    return {\n      merged,\n      total: allKeys.length,\n      missing: allKeys.filter((p) => p.state === PartitionState.MISSING).length,\n    };\n  }, [assetHealth]);\n\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n  const [showAssets, setShowAssets] = React.useState(false);\n\n  React.useEffect(() => {\n    if (viewport.width) {\n      // magical numbers to approximate the size of the window, which is calculated in the step\n      // status component.  This approximation is to make sure that the window does not jump as\n      // the pageSize gets recalculated\n      const approxPageSize = getVisibleItemCount(viewport.width - GRID_FLOATING_CONTAINER_WIDTH);\n      setPageSize(approxPageSize);\n    }\n  }, [viewport.width, setPageSize]);\n\n  let dimensionIdx = merged.dimensions.findIndex(isTimeseriesDimension);\n  if (dimensionIdx === -1) {\n    dimensionIdx = 0; // may as well show something\n  }\n\n  const dimension = merged.dimensions[dimensionIdx] ? merged.dimensions[dimensionIdx] : null;\n  const dimensionKeys = dimension?.partitionKeys || [];\n\n  const selectedDimensionKeys = dimensionKeys.slice(\n    Math.max(0, dimensionKeys.length - 1 - offset - pageSize),\n    dimensionKeys.length - offset,\n  );\n  return (\n    <div>\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{vertical: 16, horizontal: 24}}\n      >\n        <Subheading>Status</Subheading>\n        <Box flex={{gap: 8}}>\n          <Button onClick={() => setShowAssets(!showAssets)}>\n            {showAssets ? 'Hide per-asset status' : 'Show per-asset status'}\n          </Button>\n          <LaunchAssetExecutionButton\n            scope={{all: assetGraph.graphQueryItems.map((g) => g.node), skipAllTerm: true}}\n            preferredJobName={pipelineName}\n          />\n        </Box>\n      </Box>\n      <Box\n        flex={{direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{left: 8}}\n      >\n        <CountBox count={total} label=\"Total partitions\" />\n        <CountBox count={missing} label=\"Missing partitions\" />\n      </Box>\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <div {...containerProps}>\n          <PartitionStatus\n            partitionNames={dimensionKeys}\n            splitPartitions={dimension ? !isTimeseriesDimension(dimension) : false}\n            partitionStateForKey={(key) => merged.stateForSingleDimension(dimensionIdx, key)}\n            selected={selectedDimensionKeys}\n            selectionWindowSize={pageSize}\n            tooltipMessage=\"Click to view per-asset status\"\n            onClick={(partitionName) => {\n              const maxIdx = dimensionKeys.length - 1;\n              const selectedIdx = dimensionKeys.indexOf(partitionName);\n              const nextOffset = Math.min(\n                maxIdx,\n                Math.max(0, maxIdx - selectedIdx - 0.5 * pageSize),\n              );\n              setOffset(nextOffset);\n            }}\n          />\n        </div>\n        {showAssets && dimension && (\n          <Box margin={{top: 16}}>\n            <PartitionPerAssetStatus\n              rangeDimensionIdx={dimensionIdx}\n              rangeDimension={dimension}\n              assetHealth={assetHealth}\n              assetQueryItems={assetGraph.graphQueryItems}\n              pipelineName={pipelineName}\n              setPageSize={setPageSize}\n              offset={offset}\n              setOffset={setOffset}\n            />\n          </Box>\n        )}\n      </Box>\n      {showAssets && (\n        <AssetJobPartitionGraphs\n          repositorySelector={repositorySelector}\n          pipelineName={pipelineName}\n          partitionSetName={partitionSetName}\n          multidimensional={(merged?.dimensions.length || 0) > 1}\n          dimensionName={dimension ? dimension.name : null}\n          dimensionKeys={dimensionKeys}\n          selected={selectedDimensionKeys}\n          offset={offset}\n          pageSize={pageSize}\n        />\n      )}\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', color: Colors.KeylineGray, width: 1}}\n        style={{marginBottom: -1}}\n      >\n        <Subheading>Backfill history</Subheading>\n      </Box>\n      <Box margin={{bottom: 20}}>\n        <JobBackfillsTable\n          partitionSetName={partitionSetName}\n          repositorySelector={repositorySelector}\n          partitionNames={dimensionKeys}\n          refetchCounter={1}\n        />\n      </Box>\n    </div>\n  );\n};\n\nexport const AssetJobPartitionGraphs: React.FC<{\n  repositorySelector: RepositorySelector;\n  pipelineName: string;\n  partitionSetName: string;\n  multidimensional: boolean;\n  dimensionName: string | null;\n  dimensionKeys: string[];\n  selected: string[];\n  pageSize: number;\n  offset: number;\n}> = ({\n  repositorySelector,\n  dimensionKeys,\n  dimensionName,\n  selected,\n  pageSize,\n  partitionSetName,\n  multidimensional,\n  pipelineName,\n  offset,\n}) => {\n  const partitions = usePartitionStepQuery({\n    partitionSetName,\n    partitionTagName: multidimensional\n      ? `${DagsterTag.Partition}/${dimensionName}`\n      : DagsterTag.Partition,\n    partitionNames: dimensionKeys,\n    repositorySelector,\n    pageSize,\n    runsFilter: [],\n    jobName: pipelineName,\n    offset,\n    skipQuery: !dimensionName,\n  });\n\n  const {stepDurationData, runDurationData} = usePartitionDurations(partitions);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Run duration</Subheading>\n      </Box>\n\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={selected}\n          jobDataByPartition={runDurationData}\n        />\n      </Box>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Step durations</Subheading>\n      </Box>\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={selected}\n          stepDataByPartition={stepDurationData}\n        />\n      </Box>\n    </>\n  );\n};\n","import {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {usePartitionNameForPipeline} from '../assets/usePartitionNameForPipeline';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {LoadingSpinner} from '../ui/Loading';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {AssetJobPartitionsView} from './AssetJobPartitionsView';\nimport {OpJobPartitionsView} from './OpJobPartitionsView';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelinePartitionsRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const pipelineInfo = repo?.repository.pipelines.find(\n    (pipelineOrJob) => pipelineOrJob.name === pipelineName,\n  );\n  const isJob = !!pipelineInfo?.isJob;\n  const isAssetJob = !!pipelineInfo?.isAssetJob;\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath(params);\n\n  const {partitionSet, partitionSetError} = usePartitionNameForPipeline(repoAddress, pipelineName);\n\n  if (!partitionSet && !partitionSetError) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n  if (partitionSetError) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState icon=\"error\" title=\"Partitions\" description={partitionSetError.message} />\n      </Box>\n    );\n  }\n\n  if (!partitionSet) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Partitions\"\n          description={\n            <div>\n              There are no partition sets defined for {isJob ? 'job' : 'pipeline'}{' '}\n              <code>{pipelineName}</code>.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return isAssetJob ? (\n    <AssetJobPartitionsView\n      pipelineName={pipelineName}\n      partitionSetName={partitionSet.name}\n      repoAddress={repoAddress}\n    />\n  ) : (\n    <OpJobPartitionsView partitionSetName={partitionSet.name} repoAddress={repoAddress} />\n  );\n};\n","import * as React from 'react';\nimport {Redirect, useLocation, useParams} from 'react-router-dom';\n\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOrJobDisambiguationRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const location = useLocation();\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n\n  const {pipelineName: pipelineOrJobName} = explorerPathFromString(pipelinePath);\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineOrJobName);\n  const {pathname, search} = location;\n\n  const replacedPath = pathname.replace('/pipeline_or_job/', isJob ? '/jobs/' : '/pipelines/');\n\n  return <Redirect to={`${replacedPath}${search}`} />;\n};\n","import * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineExplorerContainer} from './PipelineExplorerRoot';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n  useStripSnapshotFromPath,\n} from './PipelinePathUtils';\nimport {useJobTitle} from './useJobTitle';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOverviewRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString(params['0']);\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, explorerPath.pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath({pipelinePath: explorerPathToString(explorerPath)});\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, action: 'push' | 'replace') => {\n      history[action]({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathToString(path)}`,\n        ),\n      });\n    },\n    [history, location.search, repoAddress, isJob],\n  );\n\n  const onNavigateToSourceAssetNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (!node.jobName || !node.opNames.length || !node.repoAddress) {\n        // This op has no definition in any loaded repository (source asset).\n        // The best we can do is show the asset page. This will still be mostly empty,\n        // but there can be a description.\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n        return;\n      }\n\n      // Note: asset location can be in another job AND in another repo! Need\n      // to build a full job URL using the `node` info here.\n      history.replace({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          node.repoAddress,\n          `/jobs/${explorerPathToString({\n            ...explorerPath,\n            opNames: [tokenForAssetKey(node.assetKey)],\n            opsQuery: '',\n            pipelineName: node.jobName!,\n          })}`,\n        ),\n      });\n    },\n    [explorerPath, history, location.search],\n  );\n\n  return (\n    <PipelineExplorerContainer\n      repoAddress={repoAddress}\n      explorerPath={explorerPath}\n      onChangeExplorerPath={onChangeExplorerPath}\n      onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n    />\n  );\n};\n","import * as React from 'react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\n\nimport {JobLaunchpad} from '../launchpad/LaunchpadRoot';\nimport {LaunchpadSetupFromRunRoot} from '../launchpad/LaunchpadSetupFromRunRoot';\nimport {LaunchpadSetupRoot} from '../launchpad/LaunchpadSetupRoot';\nimport {PipelineNav} from '../nav/PipelineNav';\nimport {PipelinePartitionsRoot} from '../partitions/PipelinePartitionsRoot';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PipelineOrJobDisambiguationRoot} from './PipelineOrJobDisambiguationRoot';\nimport {PipelineOverviewRoot} from './PipelineOverviewRoot';\nimport {PipelineRunsRoot} from './PipelineRunsRoot';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <PipelineNav repoAddress={repoAddress} />\n      <Switch>\n        <Route path=\"/locations/:repoPath/pipeline_or_job/:pipelinePath/(/?.*)\">\n          <PipelineOrJobDisambiguationRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground/setup',\n            '/locations/:repoPath/jobs/:pipelinePath/playground/setup',\n          ]}\n        >\n          <LaunchpadSetupRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground/setup-from-run/:runId',\n            '/locations/:repoPath/jobs/:pipelinePath/playground/setup-from-run/:runId',\n          ]}\n        >\n          <LaunchpadSetupFromRunRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground',\n            '/locations/:repoPath/jobs/:pipelinePath/playground',\n          ]}\n        >\n          <JobLaunchpad repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/runs/:runId',\n            '/locations/:repoPath/jobs/:pipelinePath/runs/:runId',\n          ]}\n          render={(props: RouteComponentProps<{runId: string}>) => (\n            <Redirect to={`/runs/${props.match.params.runId}`} />\n          )}\n        />\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/runs',\n            '/locations/:repoPath/jobs/:pipelinePath/runs',\n          ]}\n        >\n          <PipelineRunsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/partitions',\n            '/locations/:repoPath/jobs/:pipelinePath/partitions',\n          ]}\n        >\n          <PipelinePartitionsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/overview',\n            '/locations/:repoPath/jobs/:pipelinePath/overview',\n          ]}\n          render={(props) => (\n            <Redirect to={`/locations/${props.match.url.replace(/\\/overview$/i, '')}`} />\n          )}\n        />\n        <Route path={['/locations/:repoPath/pipelines/(/?.*)', '/locations/:repoPath/jobs/(/?.*)']}>\n          <PipelineOverviewRoot repoAddress={repoAddress} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, DialogFooter, Dialog, Colors, DialogBody} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {TickHistoryQuery_instigationStateOrError_InstigationState_ticks} from './instigation/types/TickHistoryQuery';\nimport {EventTypeColumn, TimestampColumn, Row} from './runs/LogsRowComponents';\nimport {\n  ColumnWidthsProvider,\n  ColumnWidthsContext,\n  HeadersContainer,\n  HeaderContainer,\n  Header,\n} from './runs/LogsScrollingTableHeader';\nimport {TimestampDisplay} from './schedules/TimestampDisplay';\nimport {\n  TickLogEventsQuery,\n  TickLogEventsQueryVariables,\n  TickLogEventsQuery_instigationStateOrError_InstigationState_tick_logEvents_events,\n} from './types/TickLogEventsQuery';\nimport {InstigationSelector} from './types/globalTypes';\n\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\ntype LogEvent = TickLogEventsQuery_instigationStateOrError_InstigationState_tick_logEvents_events;\n\nexport const TickLogDialog: React.FC<{\n  tick: InstigationTick;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}> = ({tick, instigationSelector, onClose}) => {\n  const {data} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(TICK_LOG_EVENTS_QUERY, {\n    variables: {instigationSelector, timestamp: tick.timestamp},\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!events}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      <DialogBody>\n        {events && events.length ? (\n          <TickLogsTable events={events} />\n        ) : (\n          <Box\n            flex={{justifyContent: 'center', alignItems: 'center'}}\n            style={{flex: 1, color: Colors.Gray600}}\n          >\n            No logs available\n          </Box>\n        )}\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst TickLogsTable: React.FC<{events: LogEvent[]}> = ({events}) => {\n  return (\n    <div style={{overflow: 'hidden', borderBottom: '0.5px solid #ececec', flex: 1}}>\n      <ColumnWidthsProvider onWidthsChanged={() => {}}>\n        <Headers />\n        {events.map((event, idx) => (\n          <TickLogRow event={event} key={idx} />\n        ))}\n      </ColumnWidthsProvider>\n    </div>\n  );\n};\n\nconst Headers = () => {\n  const widths = React.useContext(ColumnWidthsContext);\n  return (\n    <HeadersContainer>\n      <Header\n        width={widths.eventType}\n        onResize={(width) => widths.onChange({...widths, eventType: width})}\n      >\n        Event Type\n      </Header>\n      <HeaderContainer style={{flex: 1}}>Info</HeaderContainer>\n      <Header\n        handleSide=\"left\"\n        width={widths.timestamp}\n        onResize={(width) => widths.onChange({...widths, timestamp: width})}\n      >\n        Timestamp\n      </Header>\n    </HeadersContainer>\n  );\n};\n\nconst TickLogRow: React.FC<{event: LogEvent}> = ({event}) => {\n  return (\n    <Row level={event.level} highlighted={false}>\n      <EventTypeColumn>\n        <span style={{marginLeft: 8}}>{event.level}</span>\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {event.message}\n      </Box>\n      <TimestampColumn time={event.timestamp} />\n    </Row>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $timestamp: Float!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        tick(timestamp: $timestamp) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              message\n              timestamp\n              level\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Colors} from '@dagster-io/ui';\nimport {ActiveElement, TimeUnit, TooltipItem} from 'chart.js';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport {InstigationTickStatus} from '../types/globalTypes';\n\nimport {\n  TickHistoryQuery_instigationStateOrError_InstigationState_nextTick,\n  TickHistoryQuery_instigationStateOrError_InstigationState_ticks,\n} from './types/TickHistoryQuery';\n\ntype FutureTick = TickHistoryQuery_instigationStateOrError_InstigationState_nextTick;\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.Blue500,\n  [InstigationTickStatus.FAILURE]: Colors.Red500,\n  [InstigationTickStatus.STARTED]: Colors.Gray400,\n  [InstigationTickStatus.SKIPPED]: Colors.Yellow500,\n};\n\nconst REFRESH_INTERVAL = 100;\n\nexport const LiveTickTimeline: React.FC<{\n  ticks: InstigationTick[];\n  nextTick: FutureTick | null;\n  onHoverTick: (InstigationTick?: any) => void;\n  onSelectTick: (InstigationTick?: any) => void;\n}> = ({ticks, nextTick, onHoverTick, onSelectTick}) => {\n  const [now, setNow] = React.useState<number>(Date.now());\n  const [graphNow, setGraphNow] = React.useState<number>(Date.now());\n  const [isPaused, setPaused] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      !isPaused && setNow(Date.now());\n    }, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  });\n\n  React.useEffect(() => {\n    if (!isPaused && (!nextTick || now < 1000 * nextTick.timestamp)) {\n      setGraphNow(now);\n    }\n  }, [isPaused, nextTick, now]);\n\n  const isAtFutureTick = nextTick && 1000 * nextTick.timestamp <= now;\n  const PULSE_DURATION = 2000;\n  const nextTickRadius = isAtFutureTick\n    ? 4 + Math.sin((2 * Math.PI * (now % PULSE_DURATION)) / PULSE_DURATION)\n    : 3;\n\n  const tickData = ticks.map((tick) => ({x: 1000 * tick.timestamp, y: 0}));\n  const tickColors = ticks.map((tick) => COLOR_MAP[tick.status]);\n  const tickRadii = Array(ticks.length).fill(3);\n\n  if (nextTick) {\n    tickData.push({x: 1000 * nextTick.timestamp, y: 0});\n    tickColors.push(Colors.Gray200);\n    tickRadii.push(nextTickRadius);\n  }\n\n  const graphData = {\n    labels: ['ticks'],\n    datasets: [\n      {\n        label: 'now',\n        data: [\n          {x: graphNow - 60000 * 10, y: 0},\n          {x: graphNow, y: 0},\n        ],\n        borderColor: Colors.Gray100,\n        borderWidth: 1,\n        pointBorderWidth: 2,\n        pointBorderColor: Colors.Gray200,\n        pointRadius: 1,\n        pointHoverRadius: 1,\n      },\n      {\n        label: 'ticks',\n        data: tickData,\n        borderColor: Colors.Gray100,\n        borderWidth: 0,\n        backgroundColor: 'rgba(0,0,0,0)',\n        pointBackgroundColor: 'rgba(0,0,0,0)',\n        pointBorderWidth: 2,\n        pointBorderColor: tickColors,\n        pointRadius: tickRadii,\n        pointHoverBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBorderColor: tickColors,\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n\n    scales: {\n      y: {id: 'y', display: false, grid: {display: false}, title: {display: false}},\n      x: {\n        id: 'x',\n        type: 'time',\n        title: {\n          display: false,\n        },\n        grid: {display: true},\n        bounds: 'ticks',\n        min: graphNow - 60000 * 5, // 5 minutes ago\n        max: graphNow + 60000, // 1 minute from now\n        time: {\n          minUnit: 'minute' as TimeUnit,\n        },\n      },\n    },\n\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        displayColors: false,\n        callbacks: {\n          label(tooltipItem: TooltipItem<any>) {\n            if (!tooltipItem.datasetIndex) {\n              // this is the current time\n              return 'Current time';\n            }\n            if (tooltipItem.dataIndex === undefined) {\n              return '';\n            }\n            if (tooltipItem.dataIndex === ticks.length) {\n              // This is the future tick\n              return '';\n            }\n            const tick = ticks[tooltipItem.dataIndex];\n            const cursorLabel = tick.cursor ? `Cursor: ${tick.cursor}\\n` : '';\n\n            // returning an array of strings ensures that each string is displayed on its own line\n            // in the tooltip\n\n            if (tick.status === InstigationTickStatus.SKIPPED && tick.skipReason) {\n              return cursorLabel ? [tick.skipReason, cursorLabel] : tick.skipReason;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.runIds.length) {\n              return cursorLabel ? [...tick.runIds, cursorLabel] : tick.runIds;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.originRunIds) {\n              return cursorLabel ? [...tick.originRunIds, cursorLabel] : tick.originRunIds;\n            }\n            if (tick.status === InstigationTickStatus.FAILURE && tick.error?.message) {\n              return cursorLabel ? [tick.error.message, cursorLabel] : tick.error.message;\n            }\n            return cursorLabel;\n          },\n        },\n      },\n    },\n\n    onClick: (_event: MouseEvent, activeElements: any[]) => {\n      if (!activeElements.length) {\n        return;\n      }\n      const [item] = activeElements;\n      if (item.datasetIndex === undefined || item.index === undefined) {\n        return;\n      }\n      const tick = ticks[item.index];\n      onSelectTick(tick);\n    },\n\n    onHover: (event: MouseEvent, elements: ActiveElement[]) => {\n      if (event?.target instanceof HTMLElement) {\n        event.target.style.cursor = elements.length ? 'pointer' : 'default';\n      }\n      if (elements.length && !isPaused) {\n        setPaused(true);\n        const [element] = elements.filter(\n          (x) => x.datasetIndex === 1 && x.index !== undefined && x.index < ticks.length,\n        );\n        if (!element) {\n          return;\n        }\n        const tick = ticks[element.index];\n        onHoverTick(tick);\n      } else if (!elements.length && isPaused) {\n        setPaused(false);\n        onHoverTick(undefined);\n      }\n    },\n\n    maintainAspectRatio: false,\n  };\n\n  return <Line type=\"line\" data={graphData} height={150} options={options} key=\"100%\" />;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport 'chartjs-adapter-date-fns';\nimport {Button, DialogBody, DialogFooter, Dialog, Group, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {copyValue} from '../app/DomUtils';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationSelector, InstigationTickStatus} from '../types/globalTypes';\n\nimport {FailedRunList, RunList, TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/SelectedTickQuery';\n\nexport const TickDetailsDialog: React.FC<{\n  timestamp: number | undefined;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}> = ({timestamp, instigationSelector, onClose}) => {\n  const {data} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(JOB_SELECTED_TICK_QUERY, {\n    variables: {instigationSelector, timestamp: timestamp || 0},\n    fetchPolicy: 'cache-and-network',\n    skip: !timestamp,\n    partialRefetch: true,\n  });\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!tick}\n      onClose={onClose}\n      style={{\n        width: tick && tick.status === InstigationTickStatus.SKIPPED ? '50vw' : '90vw',\n      }}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      {tick ? (\n        <DialogBody>\n          {tick.status === InstigationTickStatus.SUCCESS ? (\n            tick.runIds.length ? (\n              <RunList runIds={tick.runIds} />\n            ) : (\n              <FailedRunList originRunIds={tick.originRunIds} />\n            )\n          ) : null}\n          {tick.status === InstigationTickStatus.SKIPPED ? (\n            <Group direction=\"row\" spacing={16}>\n              <TickTag tick={tick} />\n              <span>{tick.skipReason || 'No skip reason provided'}</span>\n            </Group>\n          ) : tick.status === InstigationTickStatus.FAILURE && tick.error ? (\n            <PythonErrorInfo error={tick.error} />\n          ) : undefined}\n        </DialogBody>\n      ) : null}\n      <DialogFooter>\n        <Button\n          icon={<Icon name=\"copy_to_clipboard\" />}\n          onClick={(e) => copyValue(e, window.location.href)}\n        >\n          Copy Link\n        </Button>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $timestamp: Float!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        tick(timestamp: $timestamp) {\n          id\n          status\n          timestamp\n          skipReason\n          runIds\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          ...TickTagFragment\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n","import 'chartjs-adapter-date-fns';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Checkbox,\n  Colors,\n  CursorHistoryControls,\n  NonIdealState,\n  Spinner,\n  Table,\n  Subheading,\n  FontFamily,\n  Icon,\n  IconWrapper,\n} from '@dagster-io/ui';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {TickLogDialog} from '../TickLogDialog';\nimport {SharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {ONE_MONTH, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationTickStatus, InstigationType} from '../types/globalTypes';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {RunStatusLink, RUN_STATUS_FRAGMENT} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {RunStatusFragment} from './types/RunStatusFragment';\nimport {\n  TickHistoryQuery,\n  TickHistoryQueryVariables,\n  TickHistoryQuery_instigationStateOrError_InstigationState_ticks,\n} from './types/TickHistoryQuery';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nconst PAGE_SIZE = 25;\ninterface ShownStatusState {\n  [InstigationTickStatus.SUCCESS]: boolean;\n  [InstigationTickStatus.FAILURE]: boolean;\n  [InstigationTickStatus.STARTED]: boolean;\n  [InstigationTickStatus.SKIPPED]: boolean;\n}\n\nconst DEFAULT_SHOWN_STATUS_STATE = {\n  [InstigationTickStatus.SUCCESS]: true,\n  [InstigationTickStatus.FAILURE]: true,\n  [InstigationTickStatus.STARTED]: true,\n  [InstigationTickStatus.SKIPPED]: false,\n};\nconst STATUS_TEXT_MAP = {\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.SKIPPED]: 'Skipped',\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n}) => {\n  const [shownStates, setShownStates] = useQueryPersistedState<ShownStatusState>({\n    encode: (states) => {\n      const queryState = {};\n      Object.keys(states).map((state) => {\n        queryState[state.toLowerCase()] = String(states[state]);\n      });\n      return queryState;\n    },\n    decode: (queryState) => {\n      const status: ShownStatusState = {...DEFAULT_SHOWN_STATUS_STATE};\n      Object.keys(DEFAULT_SHOWN_STATUS_STATE).forEach((state) => {\n        if (state.toLowerCase() in queryState) {\n          status[state] = !(queryState[state.toLowerCase()] === 'false');\n        }\n      });\n\n      return status;\n    },\n  });\n  const copyToClipboard = useCopyToClipboard();\n  const {flagSensorScheduleLogging} = useFeatureFlags();\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = Object.keys(shownStates)\n    .filter((status) => shownStates[status])\n    .map((status) => status as InstigationTickStatus);\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: JOB_TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  const [logTick, setLogTick] = React.useState<InstigationTick>();\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {ticks, instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && statuses.length === Object.keys(DEFAULT_SHOWN_STATUS_STATE).length) {\n    return null;\n  }\n\n  const StatusFilter = ({status}: {status: InstigationTickStatus}) => (\n    <Checkbox\n      label={STATUS_TEXT_MAP[status]}\n      checked={shownStates[status]}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setShownStates({...shownStates, [status]: e.target.checked});\n      }}\n    />\n  );\n\n  return (\n    <>\n      {logTick ? (\n        <TickLogDialog\n          tick={logTick}\n          instigationSelector={instigationSelector}\n          onClose={() => setLogTick(undefined)}\n        />\n      ) : null}\n      <Box margin={{vertical: 8, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={InstigationTickStatus.STARTED} />\n            <StatusFilter status={InstigationTickStatus.SUCCESS} />\n            <StatusFilter status={InstigationTickStatus.FAILURE} />\n            <StatusFilter status={InstigationTickStatus.SKIPPED} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Runs</th>\n              {flagSensorScheduleLogging ? <th style={{width: 180}}>Logs</th> : null}\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick) => (\n              <tr key={tick.id}>\n                <td>\n                  <TimestampDisplay\n                    timestamp={tick.timestamp}\n                    timeFormat={{showTimezone: false, showSeconds: true}}\n                  />\n                </td>\n                <td>\n                  <TickTag tick={tick} />\n                </td>\n                {instigationType === InstigationType.SENSOR ? (\n                  <td style={{width: 120}}>\n                    {tick.cursor ? (\n                      <Box flex={{direction: 'row', alignItems: 'center'}}>\n                        <Box style={{fontFamily: FontFamily.monospace, marginRight: 10}}>\n                          <>{truncate(tick.cursor || '')}</>\n                        </Box>\n                        <CopyButton\n                          onClick={() => {\n                            copyToClipboard(tick.cursor || '');\n                            SharedToaster.show({\n                              message: <div>Copied value</div>,\n                              intent: 'success',\n                            });\n                          }}\n                        >\n                          <Icon name=\"assignment\" />\n                        </CopyButton>\n                      </Box>\n                    ) : (\n                      <>&mdash;</>\n                    )}\n                  </td>\n                ) : null}\n                <td>\n                  {tick.runIds.length ? (\n                    tick.runs.map((run: RunStatusFragment) => (\n                      <>\n                        <RunStatusLink key={run.id} run={run} />\n                      </>\n                    ))\n                  ) : (\n                    <>&mdash;</>\n                  )}\n                </td>\n                {flagSensorScheduleLogging ? (\n                  <td>\n                    {tick.logKey ? <a onClick={() => setLogTick(tick)}>View logs</a> : <>&mdash;</>}\n                  </td>\n                ) : null}\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  onHighlightRunIds,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n}) => {\n  const [selectedTime, setSelectedTime] = useQueryPersistedState<number | undefined>({\n    encode: (timestamp) => ({time: timestamp}),\n    decode: (qs) => (qs['time'] ? Number(qs['time']) : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(\n    JOB_TICK_HISTORY_QUERY,\n    {\n      variables: {instigationSelector, limit: 15},\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, pollingPaused ? ONE_MONTH : 1000);\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <>\n        <Box\n          padding={{top: 16, horizontal: 24}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        >\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  const {ticks, nextTick} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTime(tick ? tick.timestamp : undefined);\n  };\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      onHighlightRunIds && onHighlightRunIds(tick.runIds);\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        timestamp={selectedTime}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n        <LiveTickTimeline\n          ticks={ticks}\n          nextTick={nextTick}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n        />\n      </Box>\n    </>\n  );\n};\n\nconst JOB_TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        instigationType\n        nextTick {\n          timestamp\n        }\n        ticks(dayRange: $dayRange, limit: $limit, cursor: $cursor, statuses: $statuses) {\n          id\n          status\n          timestamp\n          cursor\n          skipReason\n          runIds\n          runs {\n            id\n            status\n            ...RunStatusFragment\n          }\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          logKey\n          ...TickTagFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_STATUS_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.Gray600};\n    transition: background-color 100ms;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.Gray800};\n  }\n\n  :focus ${IconWrapper} {\n    background-color: ${Colors.Link};\n  }\n`;\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Code,\n  Heading,\n  Mono,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SchedulePartitionStatus} from './SchedulePartitionStatus';\nimport {ScheduleSwitch} from './ScheduleSwitch';\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {humanCronString} from './humanCronString';\nimport {ScheduleFragment} from './types/ScheduleFragment';\n\nconst TIME_FORMAT = {showSeconds: false, showTimezone: true};\n\nexport const ScheduleDetails: React.FC<{\n  schedule: ScheduleFragment;\n  repoAddress: RepoAddress;\n  refreshState: QueryRefreshState;\n}> = (props) => {\n  const {repoAddress, schedule, refreshState} = props;\n  const {cronSchedule, executionTimezone, futureTicks, name, partitionSet, pipelineName} = schedule;\n  const copyToClipboard = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const [copyText, setCopyText] = React.useState('Click to copy');\n\n  // Restore the tooltip text after a delay.\n  React.useEffect(() => {\n    let token: any;\n    if (copyText === 'Copied!') {\n      token = setTimeout(() => {\n        setCopyText('Click to copy');\n      }, 2000);\n    }\n    return () => {\n      token && clearTimeout(token);\n    };\n  }, [copyText]);\n\n  const {scheduleState} = schedule;\n  const {status, id, ticks} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n\n  const copyId = () => {\n    copyToClipboard(id);\n    setCopyText('Copied!');\n  };\n\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <ScheduleSwitch repoAddress={repoAddress} schedule={schedule} />\n          </Box>\n        }\n        tags={\n          <>\n            <Tag icon=\"schedule\">\n              Schedule in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {futureTicks.results.length && running ? (\n              <Tag icon=\"timer\">\n                Next tick:{' '}\n                <TimestampDisplay\n                  timestamp={futureTicks.results[0].timestamp}\n                  timezone={executionTimezone}\n                  timeFormat={TIME_FORMAT}\n                />\n              </Tag>\n            ) : null}\n            <Box flex={{display: 'inline-flex'}} margin={{top: 2}}>\n              <Tooltip content={copyText}>\n                <ButtonLink color={{link: Colors.Gray400, hover: Colors.Gray600}} onClick={copyId}>\n                  <Mono>{`id: ${id.slice(0, 8)}`}</Mono>\n                </ButtonLink>\n              </Tooltip>\n            </Box>\n          </>\n        }\n        right={<QueryRefreshCountdown refreshState={refreshState} />}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {schedule.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{schedule.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                  <TimestampDisplay\n                    timestamp={latestTick.timestamp}\n                    timezone={executionTimezone}\n                    timeFormat={TIME_FORMAT}\n                  />\n                  <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n                </Group>\n              ) : (\n                'Schedule has never run'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>{isJob ? 'Job' : 'Pipeline'}</td>\n            <td>\n              <PipelineReference\n                pipelineName={pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={isJob}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>Partition set</td>\n            <td>\n              {partitionSet ? (\n                <SchedulePartitionStatus schedule={schedule} repoAddress={repoAddress} />\n              ) : (\n                'None'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Schedule</td>\n            <td>\n              {cronSchedule ? (\n                <Group direction=\"row\" spacing={8}>\n                  <span>{humanCronString(cronSchedule, executionTimezone || 'UTC')}</span>\n                  <Code>({cronSchedule})</Code>\n                </Group>\n              ) : (\n                <div>&mdash;</div>\n              )}\n            </td>\n          </tr>\n          {executionTimezone ? (\n            <tr>\n              <td>Execution timezone</td>\n              <td>{executionTimezone}</td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Tabs, Tab, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable} from '../instigation/TickHistory';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ScheduleDetails} from './ScheduleDetails';\nimport {SCHEDULE_FRAGMENT} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {\n  PreviousRunsForScheduleQuery,\n  PreviousRunsForScheduleQueryVariables,\n} from './types/PreviousRunsForScheduleQuery';\nimport {\n  ScheduleRootQuery,\n  ScheduleRootQueryVariables,\n  ScheduleRootQuery_scheduleOrError_Schedule as Schedule,\n} from './types/ScheduleRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const ScheduleRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const {scheduleName} = useParams<{scheduleName: string}>();\n\n  useDocumentTitle(`Schedule: ${scheduleName}`);\n\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n\n  const queryResult = useQuery<ScheduleRootQuery, ScheduleRootQueryVariables>(SCHEDULE_ROOT_QUERY, {\n    variables: {\n      scheduleSelector,\n    },\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({scheduleOrError, instance}) => {\n        if (scheduleOrError.__typename !== 'Schedule') {\n          return null;\n        }\n\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <ScheduleDetails\n              repoAddress={repoAddress}\n              schedule={scheduleOrError}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <SchedulerInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n            ) : null}\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={scheduleOrError.name} />\n            ) : (\n              <SchedulePreviousRuns\n                repoAddress={repoAddress}\n                schedule={scheduleOrError}\n                tabs={tabs}\n              />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const SchedulePreviousRuns: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: Schedule;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({schedule, highlightedIds, tabs}) => {\n  const queryResult = useQuery<PreviousRunsForScheduleQuery, PreviousRunsForScheduleQueryVariables>(\n    PREVIOUS_RUNS_FOR_SCHEDULE_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        limit: 20,\n        filter: {\n          pipelineName: schedule.pipelineName,\n          tags: [{key: DagsterTag.ScheduleName, value: schedule.name}],\n        },\n      },\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  } else if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nconst SCHEDULE_ROOT_QUERY = gql`\n  query ScheduleRootQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...ScheduleFragment\n      }\n      ... on ScheduleNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SCHEDULER\") {\n          id\n          healthy\n        }\n      }\n    }\n  }\n\n  ${SCHEDULE_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst PREVIOUS_RUNS_FOR_SCHEDULE_QUERY = gql`\n  query PreviousRunsForScheduleQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on Error {\n        message\n      }\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    jobOriginId\n    name\n    description\n    minIntervalSeconds\n    nextTick {\n      timestamp\n    }\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, NonIdealState, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/PreviousRunsForSensorQuery';\nimport {SensorFragment} from './types/SensorFragment';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({sensor, highlightedIds, tabs}) => {\n  const {data} = useQuery<PreviousRunsForSensorQuery, PreviousRunsForSensorQueryVariables>(\n    PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          pipelineName: sensor.targets?.length === 1 ? sensor.targets[0].pipelineName : undefined,\n          tags: [{key: DagsterTag.SensorName, value: sensor.name}],\n        },\n      },\n    },\n  );\n\n  if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nexport const NoTargetSensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  highlightedIds: string[];\n}> = () => {\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.Gray100}}\n        flex={{direction: 'row'}}\n      >\n        <Subheading>Latest runs</Subheading>\n      </Box>\n      <div style={{color: Colors.Gray400}}>\n        <Box margin={{vertical: 64}}>\n          <NonIdealState\n            icon=\"sensors\"\n            title=\"No runs to display\"\n            description=\"This sensor does not target a pipeline or job.\"\n          />\n        </Box>\n      </div>\n    </Group>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Tab, Tabs, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable, TickHistoryTimeline} from '../instigation/TickHistory';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {SensorRootQuery, SensorRootQueryVariables} from './types/SensorRootQuery';\n\nexport const SensorRoot: React.FC<{repoAddress: RepoAddress}> = ({repoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({sensorOrError, instance}) => {\n        if (sensorOrError.__typename === 'SensorNotFoundError') {\n          return (\n            <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"error\"\n                title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n              />\n            </Box>\n          );\n        } else if (sensorOrError.__typename === 'PythonError') {\n          return <PythonErrorInfo error={sensorOrError} />;\n        } else if (sensorOrError.__typename !== 'Sensor') {\n          return null;\n        }\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <SensorDetails\n              repoAddress={repoAddress}\n              sensor={sensorOrError}\n              daemonHealth={instance.daemonHealth.daemonStatus.healthy}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <SensorInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n            ) : null}\n            <TickHistoryTimeline repoAddress={repoAddress} name={sensorOrError.name} />\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={sensorOrError.name} />\n            ) : (\n              <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      __typename\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${SENSOR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, PageHeader, Tag, Heading} from '@dagster-io/ui';\nimport React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from '../pipelines/GraphExplorer';\nimport {explorerPathFromString, explorerPathToString} from '../pipelines/PipelinePathUtils';\nimport {Loading} from '../ui/Loading';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {RepoAddress} from './types';\nimport {\n  GraphExplorerRootQuery,\n  GraphExplorerRootQueryVariables,\n} from './types/GraphExplorerRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const GraphRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const path = explorerPathFromString(params[0]);\n\n  // Show the name of the composite solid we are within (-1 is the selection, -2 is current parent)\n  // or the name of the pipeline tweaked to look a bit more like a graph name.\n  const title = path.opNames.length > 1 ? path.opNames[path.opNames.length - 2] : path.pipelineName;\n  useDocumentTitle(`Graph: ${title}`);\n\n  return (\n    <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      <PageHeader\n        title={<Heading>{title}</Heading>}\n        tags={\n          <Tag icon=\"schema\">\n            Graph in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n      />\n      <Box\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n        style={{minHeight: 0, flex: 1, display: 'flex'}}\n      >\n        <GraphExplorerRoot repoAddress={repoAddress} />\n      </Box>\n    </div>\n  );\n};\n\nconst GraphExplorerRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString(params['0']);\n  const history = useHistory();\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const graphResult = useQuery<GraphExplorerRootQuery, GraphExplorerRootQueryVariables>(\n    GRAPH_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        graphSelector: {\n          repositoryName: repoAddress?.name || '',\n          repositoryLocationName: repoAddress?.location || '',\n          graphName: explorerPath.pipelineName,\n        },\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<GraphExplorerRootQuery> queryResult={graphResult}>\n      {({graphOrError: result}) => {\n        if (result.__typename === 'GraphNotFoundError') {\n          return (\n            <NonIdealState icon=\"error\" title=\"Graph not found\" description={result.message} />\n          );\n        }\n        if (result.__typename === 'PythonError') {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" description={result.message} />;\n        }\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={(path, mode) => {\n              const fullPath = workspacePathFromAddress(\n                props.repoAddress,\n                `/graphs/${explorerPathToString(path)}`,\n              );\n              if (mode === 'push') {\n                history.push(fullPath);\n              } else {\n                history.replace(fullPath);\n              }\n            }}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={true}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst GRAPH_EXPLORER_ROOT_QUERY = gql`\n  query GraphExplorerRootQuery(\n    $graphSelector: GraphSelector\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    graphOrError(selector: $graphSelector) {\n      ... on Graph {\n        id\n        name\n        ...GraphExplorerFragment\n\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n      ... on GraphNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors, Icon, IconWrapper, Tag} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {ASSET_NODE_LIVE_FRAGMENT} from '../asset-graph/AssetNode';\nimport {AssetLatestRunWithNotices, AssetRunLink} from '../asset-graph/AssetRunLinking';\nimport {buildLiveDataForNode} from '../asset-graph/Utils';\nimport {ASSET_LATEST_INFO_FRAGMENT} from '../asset-graph/useLiveDataForAssetKeys';\nimport {AssetActionMenu} from '../assets/AssetActionMenu';\nimport {AssetLink} from '../assets/AssetLink';\nimport {ASSET_TABLE_FRAGMENT} from '../assets/AssetTable';\nimport {StaleTag} from '../assets/StaleTag';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {SingleAssetQuery, SingleAssetQueryVariables} from './types/SingleAssetQuery';\nimport {workspacePathFromAddress} from './workspacePath';\n\ntype Asset = {id: string; groupName: string | null; assetKey: {path: string[]}};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  assets: Asset[];\n}\n\ntype RowType =\n  | {type: 'group'; name: string; assetCount: number}\n  | {type: 'asset'; id: string; path: string[]};\n\nconst UNGROUPED_NAME = 'UNGROUPED';\nconst ASSET_GROUPS_EXPANSION_STATE_STORAGE_KEY = 'assets-virtualized-expansion-state';\n\nexport const VirtualizedAssetTable: React.FC<Props> = ({repoAddress, assets}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const repoKey = repoAddressAsHumanString(repoAddress);\n  const {expandedKeys, onToggle} = useAssetGroupExpansionState(\n    `${repoKey}-${ASSET_GROUPS_EXPANSION_STATE_STORAGE_KEY}`,\n  );\n\n  const grouped: {[key: string]: Asset[]} = React.useMemo(() => {\n    const groups = {};\n    for (const asset of assets) {\n      const groupName = asset.groupName || UNGROUPED_NAME;\n      const assetsForGroup = groups[groupName] || [];\n      groups[groupName] = [...assetsForGroup, asset];\n    }\n    return groups;\n  }, [assets]);\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    Object.keys(grouped).forEach((groupName) => {\n      const assetsForGroup = grouped[groupName];\n      flat.push({type: 'group', name: groupName, assetCount: assetsForGroup.length});\n      if (expandedKeys.includes(groupName)) {\n        assetsForGroup.forEach(({id, assetKey}) => {\n          flat.push({type: 'asset', id, path: assetKey.path});\n        });\n      }\n    });\n    return flat;\n  }, [grouped, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'group' ? 48 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <Box\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '40% 30% 20% 10%',\n          height: '32px',\n          fontSize: '12px',\n          color: Colors.Gray600,\n        }}\n      >\n        <HeaderCell>Asset name</HeaderCell>\n        <HeaderCell>Materialized</HeaderCell>\n        <HeaderCell>Latest run</HeaderCell>\n        <HeaderCell>Actions</HeaderCell>\n      </Box>\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'group' ? (\n                <GroupNameRow\n                  repoAddress={repoAddress}\n                  groupName={row.name}\n                  assetCount={row.assetCount}\n                  expanded={expandedKeys.includes(row.name)}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                />\n              ) : (\n                <AssetRow\n                  key={key}\n                  path={row.path}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n\ninterface JobRowProps {\n  path: string[];\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nconst AssetRow = (props: JobRowProps) => {\n  const {path, repoAddress, start, height} = props;\n\n  const [queryAsset, queryResult] = useLazyQuery<SingleAssetQuery, SingleAssetQueryVariables>(\n    SINGLE_ASSET_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {input: {path}},\n    },\n  );\n\n  useDelayedRowQuery(queryAsset);\n  const {data} = queryResult;\n\n  const asset = React.useMemo(() => {\n    if (data?.assetOrError.__typename === 'Asset') {\n      return data.assetOrError;\n    }\n    return null;\n  }, [data]);\n\n  const liveData = React.useMemo(() => {\n    if (asset?.definition && data?.assetsLatestInfo) {\n      const latestInfoForAsset = data.assetsLatestInfo[0];\n      if (latestInfoForAsset) {\n        return buildLiveDataForNode(asset.definition, latestInfoForAsset);\n      }\n    }\n    return null;\n  }, [data, asset]);\n\n  const linkUrl = assetDetailsPathForKey({path});\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <div style={{fontWeight: 500, maxWidth: '100%', overflow: 'hidden'}}>\n            <AssetLink\n              path={path}\n              url={linkUrl}\n              isGroup={false}\n              icon=\"asset\"\n              textStyle=\"middle-truncate\"\n            />\n          </div>\n          <div\n            style={{\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            <Caption\n              style={{\n                color: Colors.Gray500,\n                whiteSpace: 'nowrap',\n              }}\n            >\n              {asset?.definition?.description}\n            </Caption>\n          </div>\n        </RowCell>\n        <RowCell>\n          {liveData?.lastMaterialization ? (\n            <Box flex={{gap: 8, alignItems: 'center'}}>\n              <>\n                <AssetRunLink\n                  runId={liveData.lastMaterialization.runId}\n                  event={{\n                    stepKey: liveData.stepKey,\n                    timestamp: liveData.lastMaterialization.timestamp,\n                  }}\n                >\n                  <TimestampDisplay\n                    timestamp={Number(liveData.lastMaterialization.timestamp) / 1000}\n                    timeFormat={{showSeconds: false, showTimezone: false}}\n                  />\n                </AssetRunLink>\n              </>\n              <StaleTag liveData={liveData} />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {liveData ? (\n            <AssetLatestRunWithNotices liveData={liveData} includeFreshness includeRunStatus />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {asset ? (\n            <div>\n              <AssetActionMenu repoAddress={repoAddress} asset={asset} />\n            </div>\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const GroupNameRow: React.FC<{\n  repoAddress: RepoAddress;\n  groupName: string;\n  assetCount: number;\n  expanded: boolean;\n  height: number;\n  start: number;\n  onToggle: (groupName: string) => void;\n}> = ({repoAddress, groupName, assetCount, expanded, height, start, onToggle}) => {\n  return (\n    <ClickableRow\n      $height={height}\n      $start={start}\n      onClick={() => onToggle(groupName)}\n      $open={expanded}\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.code === 'Space' || e.code === 'Enter') {\n          e.preventDefault();\n          onToggle(groupName);\n        }\n      }}\n    >\n      <Box\n        background={Colors.Gray50}\n        flex={{direction: 'row', alignItems: 'center', gap: 8, justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        style={{height: '100%'}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"asset_group\" />\n          {groupName === UNGROUPED_NAME ? (\n            <div>Ungrouped assets</div>\n          ) : (\n            <>\n              <strong>{groupName}</strong>\n              {groupName !== UNGROUPED_NAME ? (\n                <Box margin={{left: 12}}>\n                  <Link to={workspacePathFromAddress(repoAddress, `/asset-groups/${groupName}`)}>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                      <span>View lineage</span>\n                      <Icon name=\"open_in_new\" size={16} color={Colors.Link} />\n                    </Box>\n                  </Link>\n                </Box>\n              ) : null}\n            </>\n          )}\n        </Box>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n          <Tag>{assetCount === 1 ? '1 asset' : `${assetCount} assets`}</Tag>\n          <Icon name=\"arrow_drop_down\" size={20} />\n        </Box>\n      </Box>\n    </ClickableRow>\n  );\n};\n\nconst ClickableRow = styled(Row)<{$open: boolean}>`\n  cursor: pointer;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: 40% 30% 20% 10%;\n  height: 100%;\n`;\n\nconst SINGLE_ASSET_QUERY = gql`\n  query SingleAssetQuery($input: AssetKeyInput!) {\n    assetOrError(assetKey: $input) {\n      ... on Asset {\n        id\n        assetMaterializations(limit: 1) {\n          runId\n          timestamp\n        }\n        ...AssetTableFragment\n        definition {\n          id\n          ...AssetNodeLiveFragment\n        }\n      }\n    }\n    assetsLatestInfo(assetKeys: [$input]) {\n      ...AssetLatestInfoFragment\n    }\n  }\n\n  ${ASSET_TABLE_FRAGMENT}\n  ${ASSET_NODE_LIVE_FRAGMENT}\n  ${ASSET_LATEST_INFO_FRAGMENT}\n`;\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of asset groups.\n */\nexport const useAssetGroupExpansionState = (storageKey: string) => {\n  const {basePath} = React.useContext(AppContext);\n  const [expandedKeys, setExpandedKeys] = useStateWithStorage<string[]>(\n    `${basePath}:dagit.${storageKey}`,\n    validateExpandedKeys,\n  );\n\n  const onToggle = React.useCallback(\n    (groupName: string) => {\n      setExpandedKeys((current) => {\n        const nextExpandedKeys = new Set(current || []);\n        if (nextExpandedKeys.has(groupName)) {\n          nextExpandedKeys.delete(groupName);\n        } else {\n          nextExpandedKeys.add(groupName);\n        }\n        return Array.from(nextExpandedKeys);\n      });\n    },\n    [setExpandedKeys],\n  );\n\n  return React.useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n    }),\n    [expandedKeys, onToggle],\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const WorkspaceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"assets\" title=\"Assets\" to={workspacePathFromAddress(repoAddress, '/assets')} />\n        <TabLink id=\"jobs\" title=\"Jobs\" to={workspacePathFromAddress(repoAddress, '/jobs')} />\n        <TabLink\n          id=\"schedules\"\n          title=\"Schedules\"\n          to={workspacePathFromAddress(repoAddress, '/schedules')}\n        />\n        <TabLink\n          id=\"sensors\"\n          title=\"Sensors\"\n          to={workspacePathFromAddress(repoAddress, '/sensors')}\n        />\n        <TabLink id=\"graphs\" title=\"Graphs\" to={workspacePathFromAddress(repoAddress, '/graphs')} />\n        <TabLink id=\"ops\" title=\"Ops\" to={workspacePathFromAddress(repoAddress, '/ops')} />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {PageHeader, Box, Heading, Colors, Button, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {QueryRefreshState} from '../app/QueryRefresh';\nimport {ReloadRepositoryLocationButton} from '../nav/ReloadRepositoryLocationButton';\n\nimport {WorkspaceTabs} from './WorkspaceTabs';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  tab: string;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n}\n\nexport const WorkspaceHeader = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, tab, refreshState, queryData} = props;\n\n  return (\n    <PageHeader\n      title={\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Heading>\n            <Link to=\"/locations\" style={{color: Colors.Dark}}>\n              Deployment\n            </Link>\n          </Heading>\n          <Heading>/</Heading>\n          <Heading style={{color: Colors.Gray600}}>{repoAddressAsHumanString(repoAddress)}</Heading>\n        </Box>\n      }\n      tabs={\n        <WorkspaceTabs\n          repoAddress={repoAddress}\n          tab={tab}\n          refreshState={refreshState}\n          queryData={queryData}\n        />\n      }\n      right={\n        <ReloadRepositoryLocationButton location={repoAddress.location}>\n          {({tryReload, reloading}) => {\n            return (\n              <Button\n                onClick={() => tryReload()}\n                loading={reloading}\n                icon={<Icon name=\"refresh\" />}\n              >\n                Reload definitions\n              </Button>\n            );\n          }}\n        </ReloadRepositoryLocationButton>\n      }\n    />\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetNodeSearch} from '../assets/useAssetSearch';\n\nimport {VirtualizedAssetTable} from './VirtualizedAssetTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {WorkspaceAssetsQuery, WorkspaceAssetsQueryVariables} from './types/WorkspaceAssetsQuery';\n\nexport const WorkspaceAssetsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceAssetsQuery, WorkspaceAssetsQueryVariables>(\n    WORKSPACE_ASSETS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const assetNodes = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.assetNodes;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = useAssetNodeSearch(searchValue, assetNodes);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading assets…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const repoName = repoAddressAsHumanString(repoAddress);\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching assets\"\n              description={\n                <div>\n                  No assets matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No assets\"\n            description={`No assets were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedAssetTable repoAddress={repoAddress} assets={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"assets\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by asset name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_ASSETS_QUERY = gql`\n  query WorkspaceAssetsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          groupName\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleGraphQuery, SingleGraphQueryVariables} from './types/SingleGraphQuery';\nimport {workspacePathFromAddress} from './workspacePath';\n\nexport type Graph = {name: string; path: string; description: string | null};\n\ninterface Props {\n  graphs: Graph[];\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedGraphTable: React.FC<Props> = ({repoAddress, graphs}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: graphs.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <Box\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '100%',\n          height: '32px',\n          fontSize: '12px',\n          color: Colors.Gray600,\n        }}\n      >\n        <HeaderCell>Graph</HeaderCell>\n      </Box>\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Graph = graphs[index];\n              return (\n                <GraphRow\n                  key={key}\n                  name={row.name}\n                  description={row.description}\n                  path={row.path}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n\ninterface GraphRowProps {\n  name: string;\n  path: string;\n  description: string | null;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nconst GraphRow = (props: GraphRowProps) => {\n  const {name, path, description, repoAddress, start, height} = props;\n\n  const [queryGraph, queryResult] = useLazyQuery<SingleGraphQuery, SingleGraphQueryVariables>(\n    SINGLE_GRAPH_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          graphName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryGraph);\n  const {data} = queryResult;\n\n  const displayedDescription = React.useMemo(() => {\n    if (description) {\n      return description;\n    }\n    if (data?.graphOrError.__typename === 'Graph') {\n      return data.graphOrError.description;\n    }\n    return null;\n  }, [data, description]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <Box flex={{direction: 'column'}}>\n            <div style={{whiteSpace: 'nowrap', fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, path)}>{name}</Link>\n            </div>\n            {displayedDescription ? (\n              <div\n                style={{\n                  maxWidth: '100%',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                <Caption\n                  style={{\n                    color: Colors.Gray500,\n                    whiteSpace: 'nowrap',\n                  }}\n                >\n                  {displayedDescription}\n                </Caption>\n              </div>\n            ) : null}\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: 100%;\n  height: 100%;\n`;\n\nconst SINGLE_GRAPH_QUERY = gql`\n  query SingleGraphQuery($selector: GraphSelector!) {\n    graphOrError(selector: $selector) {\n      ... on Graph {\n        id\n        name\n        description\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nimport {Graph, VirtualizedGraphTable} from './VirtualizedGraphTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {WorkspaceGraphsQuery, WorkspaceGraphsQueryVariables} from './types/WorkspaceGraphsQuery';\n\nexport const WorkspaceGraphsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceGraphsQuery, WorkspaceGraphsQueryVariables>(\n    WROSKPACE_GRAPHS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const graphs = React.useMemo(() => {\n    const repo = data?.repositoryOrError;\n    if (!repo || repo.__typename !== 'Repository') {\n      return [];\n    }\n\n    const jobGraphNames = new Set<string>(\n      repo.pipelines\n        .filter((p) => p.isJob && !isHiddenAssetGroupJob(p.name))\n        .map((p) => p.graphName),\n    );\n\n    const items: Graph[] = Array.from(jobGraphNames).map((graphName) => ({\n      name: graphName,\n      path: `/graphs/${graphName}`,\n      description: null,\n    }));\n\n    repo.usedSolids.forEach((s) => {\n      if (s.definition.__typename === 'CompositeSolidDefinition') {\n        items.push({\n          name: s.definition.name,\n          path: `/graphs/${s.invocations[0].pipeline.name}/${s.invocations[0].solidHandle.handleID}/`,\n          description: s.definition.description,\n        });\n      }\n    });\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return graphs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [graphs, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading graphs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const repoName = repoAddressAsHumanString(repoAddress);\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching graphs\"\n              description={\n                <div>\n                  No graphs matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No graphs\"\n            description={`No graphs were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedGraphTable repoAddress={repoAddress} graphs={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"graphs\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by graph name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WROSKPACE_GRAPHS_QUERY = gql`\n  query WorkspaceGraphsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        usedSolids {\n          definition {\n            __typename\n            ... on CompositeSolidDefinition {\n              id\n              name\n              description\n            }\n          }\n          invocations {\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n        pipelines {\n          id\n          name\n          isJob\n          graphName\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedJobHeader, VirtualizedJobRow} from './VirtualizedJobRow';\nimport {RepoAddress} from './types';\n\ntype Job = {isJob: boolean; name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  jobs: Job[];\n}\n\nexport const VirtualizedJobTable: React.FC<Props> = ({repoAddress, jobs}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: jobs.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Job = jobs[index];\n              return (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nimport {VirtualizedJobTable} from './VirtualizedJobTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {WorkspaceJobsQuery, WorkspaceJobsQueryVariables} from './types/WorkspaceJobsQuery';\n\nexport const WorkspaceJobsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceJobsQuery, WorkspaceJobsQueryVariables>(\n    WORKSPACE_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const jobs = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.pipelines;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return jobs.filter(\n      ({name}) => !isHiddenAssetGroupJob(name) && name.toLocaleLowerCase().includes(searchToLower),\n    );\n  }, [jobs, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const repoName = repoAddressAsHumanString(repoAddress);\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                <div>\n                  No jobs matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={`No jobs were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedJobTable repoAddress={repoAddress} jobs={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"jobs\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nexport const WORKSPACE_JOBS_QUERY = gql`\n  query WorkspaceJobsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        pipelines {\n          id\n          name\n          isJob\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Box} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {OpNode, OP_NODE_DEFINITION_FRAGMENT} from '../graph/OpNode';\nimport {layoutOp} from '../graph/asyncGraphLayout';\n\nimport {OpCardSolidDefinitionFragment} from './types/OpCardSolidDefinitionFragment';\n\ninterface OpCardProps {\n  definition: OpCardSolidDefinitionFragment;\n}\n\nexport const OpCard: React.FC<OpCardProps> = (props) => {\n  const {name, inputDefinitions, outputDefinitions} = props.definition;\n  const layout = layoutOp(\n    {\n      name,\n      inputs: inputDefinitions.map((d) => ({\n        definition: d,\n        dependsOn: [],\n      })),\n      outputs: outputDefinitions.map((d) => ({\n        definition: d,\n        dependedBy: [],\n      })),\n      definition: {\n        description: null,\n        assetNodes: [],\n      },\n    },\n    {x: 0, y: 0},\n  );\n\n  return (\n    <Box padding={24}>\n      <OpCardContainer style={{height: layout.bounds.height}}>\n        <OpNode\n          invocation={undefined}\n          definition={props.definition}\n          minified={false}\n          onClick={() => {}}\n          onDoubleClick={() => {}}\n          onEnterComposite={() => {}}\n          onHighlightEdges={() => {}}\n          layout={layout}\n          selected={false}\n          focused={false}\n          highlightedEdges={[]}\n          dim={false}\n        />\n      </OpCardContainer>\n    </Box>\n  );\n};\n\nexport const OP_CARD_SOLID_DEFINITION_FRAGMENT = gql`\n  fragment OpCardSolidDefinitionFragment on ISolidDefinition {\n    ...OpNodeDefinitionFragment\n    __typename\n    name\n    description\n    metadata {\n      key\n      value\n    }\n    inputDefinitions {\n      name\n    }\n    outputDefinitions {\n      name\n    }\n  }\n\n  ${OP_NODE_DEFINITION_FRAGMENT}\n`;\n\nconst OpCardContainer = styled.div`\n  flex: 1;\n  max-width: 450px;\n  position: relative;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {\n  SidebarOpDefinition,\n  SIDEBAR_OP_DEFINITION_FRAGMENT,\n} from '../pipelines/SidebarOpDefinition';\nimport {SidebarOpInvocationInfo} from '../pipelines/SidebarOpHelpers';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OpCard, OP_CARD_SOLID_DEFINITION_FRAGMENT} from './OpCard';\nimport {UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables} from './types/UsedSolidDetailsQuery';\n\ninterface UsedSolidDetailsProps {\n  name: string;\n  onClickInvocation: (arg: SidebarOpInvocationInfo) => void;\n  repoAddress: RepoAddress;\n}\n\nexport const UsedSolidDetails: React.FC<UsedSolidDetailsProps> = (props) => {\n  const {name, onClickInvocation, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables>(\n    USED_SOLID_DETAILS_QUERY,\n    {\n      variables: {\n        name,\n        repositorySelector,\n      },\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({repositoryOrError}) => {\n        if (!(repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolid)) {\n          return null;\n        }\n        const usedSolid = repositoryOrError.usedSolid;\n        return (\n          <>\n            <OpCard definition={usedSolid.definition} />\n            <SidebarOpDefinition\n              definition={usedSolid.definition}\n              showingSubgraph={false}\n              onClickInvocation={onClickInvocation}\n              getInvocations={() => {\n                return usedSolid.invocations.map((i) => ({\n                  handleID: i.solidHandle.handleID,\n                  pipelineName: i.pipeline.name,\n                }));\n              }}\n            />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst USED_SOLID_DETAILS_QUERY = gql`\n  query UsedSolidDetailsQuery($name: String!, $repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolid(name: $name) {\n          __typename\n          definition {\n            ...OpCardSolidDefinitionFragment\n            ...SidebarOpDefinitionFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${OP_CARD_SOLID_DEFINITION_FRAGMENT}\n  ${SIDEBAR_OP_DEFINITION_FRAGMENT}\n`;\n\nexport const OpDetailScrollContainer = styled.div`\n  overflow: scroll;\n  flex: 1;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  SplitPanelContainer,\n  SuggestionProvider,\n  TokenizingField,\n  TokenizingFieldValue,\n  stringFromValue,\n  tokenizedValuesFromString,\n  FontFamily,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\nimport {AutoSizer, CellMeasurer, CellMeasurerCache, List} from 'react-virtualized';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {OpDetailScrollContainer, UsedSolidDetails} from './OpDetailsRoot';\nimport {OpTypeSignature, OP_TYPE_SIGNATURE_FRAGMENT} from './OpTypeSignature';\nimport {\n  OpsRootQuery,\n  OpsRootQueryVariables,\n  OpsRootQuery_repositoryOrError_Repository_usedSolids,\n} from './types/OpsRootQuery';\n\nfunction flatUniq(arrs: string[][]) {\n  const results: {[key: string]: boolean} = {};\n  for (const arr of arrs) {\n    for (const item of arr) {\n      results[item] = true;\n    }\n  }\n  return Object.keys(results).sort((a, b) => a.localeCompare(b));\n}\n\ntype Solid = OpsRootQuery_repositoryOrError_Repository_usedSolids;\n\nfunction searchSuggestionsForOps(solids: Solid[]): SuggestionProvider[] {\n  return [\n    {\n      token: 'name',\n      values: () => solids.map((s) => s.definition.name),\n    },\n    {\n      token: 'job',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => !i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'pipeline',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'input',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.inputDefinitions.map((d) => d.type.displayName))),\n    },\n    {\n      token: 'output',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.outputDefinitions.map((d) => d.type.displayName))),\n    },\n  ];\n}\n\nfunction filterSolidsWithSearch(solids: Solid[], search: TokenizingFieldValue[]) {\n  return solids.filter((s) => {\n    for (const item of search) {\n      if (\n        (item.token === 'name' || item.token === undefined) &&\n        !s.definition.name.startsWith(item.value)\n      ) {\n        return false;\n      }\n      if (\n        (item.token === 'pipeline' || item.token === 'job') &&\n        !s.invocations.some((i) => i.pipeline.name === item.value)\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'input' &&\n        !s.definition.inputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'output' &&\n        !s.definition.outputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const OpsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n  useDocumentTitle('Ops');\n\n  const {name} = useParams<{name?: string}>();\n  const {repoAddress} = props;\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<OpsRootQuery, OpsRootQueryVariables>(OPS_ROOT_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  return (\n    <div style={{height: '100%'}}>\n      <Loading queryResult={queryResult}>\n        {({repositoryOrError}) => {\n          if (repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolids) {\n            return (\n              <OpsRootWithData\n                {...props}\n                name={name}\n                repoAddress={repoAddress}\n                usedSolids={repositoryOrError.usedSolids}\n              />\n            );\n          }\n          return null;\n        }}\n      </Loading>\n    </div>\n  );\n};\n\nconst OpsRootWithData: React.FC<Props & {name?: string; usedSolids: Solid[]}> = (props) => {\n  const {name, repoAddress, usedSolids} = props;\n  const history = useHistory();\n  const location = useLocation();\n\n  const {q, typeExplorer} = qs.parse(location.search, {ignoreQueryPrefix: true});\n  const suggestions = searchSuggestionsForOps(usedSolids);\n  const search = tokenizedValuesFromString((q as string) || '', suggestions);\n  const filtered = filterSolidsWithSearch(usedSolids, search);\n\n  const selected = usedSolids.find((s) => s.definition.name === name);\n\n  const onSearch = (search: TokenizingFieldValue[]) => {\n    history.replace({\n      search: `?${qs.stringify({q: stringFromValue(search)})}`,\n    });\n  };\n\n  const onClickOp = (defName: string) => {\n    history.replace(workspacePathFromAddress(repoAddress, `/ops/${defName}?${qs.stringify({q})}`));\n  };\n\n  React.useEffect(() => {\n    // If the user has typed in a search that brings us to a single result, autoselect it\n    if (filtered.length === 1 && (!selected || filtered[0] !== selected)) {\n      onClickOp(filtered[0].definition.name);\n    }\n\n    // If the user has clicked a type, translate it into a search\n    if (typeof typeExplorer === 'string') {\n      onSearch([...search, {token: 'input', value: typeExplorer}]);\n    }\n  });\n\n  const onClickInvocation = React.useCallback(\n    ({pipelineName, handleID}) => {\n      history.push(\n        workspacePathFromAddress(\n          repoAddress,\n          `/pipeline_or_job/${pipelineName}/${handleID.split('.').join('/')}`,\n        ),\n      );\n    },\n    [history, repoAddress],\n  );\n\n  return (\n    <div style={{height: '100%', display: 'flex'}}>\n      <SplitPanelContainer\n        identifier=\"ops\"\n        firstInitialPercent={40}\n        firstMinSize={420}\n        first={\n          <OpListColumnContainer>\n            <Box\n              padding={{vertical: 12, horizontal: 24}}\n              border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            >\n              <TokenizingField\n                values={search}\n                onChange={(search) => onSearch(search)}\n                suggestionProviders={suggestions}\n                placeholder=\"Filter by name or input/output type...\"\n              />\n            </Box>\n            <div style={{flex: 1}}>\n              <AutoSizer nonce={window.__webpack_nonce__}>\n                {({height, width}) => (\n                  <OpList\n                    height={height}\n                    width={width}\n                    selected={selected}\n                    onClickOp={onClickOp}\n                    items={filtered.sort((a, b) =>\n                      a.definition.name.localeCompare(b.definition.name),\n                    )}\n                  />\n                )}\n              </AutoSizer>\n            </div>\n          </OpListColumnContainer>\n        }\n        second={\n          selected ? (\n            <OpDetailScrollContainer>\n              <UsedSolidDetails\n                name={selected.definition.name}\n                onClickInvocation={onClickInvocation}\n                repoAddress={repoAddress}\n              />\n            </OpDetailScrollContainer>\n          ) : (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"No op selected\"\n                description=\"Select an op to see its definition and invocations\"\n              />\n            </Box>\n          )\n        }\n      />\n    </div>\n  );\n};\n\ninterface OpListProps {\n  items: Solid[];\n  width: number;\n  height: number;\n  selected: Solid | undefined;\n  onClickOp: (name: string) => void;\n}\n\nconst OpList: React.FC<OpListProps> = (props) => {\n  const {items, selected} = props;\n  const cache = React.useRef(new CellMeasurerCache({defaultHeight: 60, fixedWidth: true}));\n\n  // Reset our cell sizes when the panel's width is changed. This is similar to a useEffect\n  // but we need it to run /before/ the render not just after it completes.\n  const lastWidth = React.useRef(props.width);\n  if (props.width !== lastWidth.current) {\n    cache.current.clearAll();\n    lastWidth.current = props.width;\n  }\n\n  const selectedIndex = selected ? items.findIndex((item) => item === selected) : undefined;\n\n  return (\n    <Container>\n      <List\n        width={props.width}\n        height={props.height}\n        rowCount={props.items.length}\n        rowHeight={cache.current.rowHeight}\n        scrollToIndex={selectedIndex}\n        className=\"solids-list\"\n        rowRenderer={({parent, index, key, style}) => {\n          const solid = props.items[index];\n          return (\n            <CellMeasurer cache={cache.current} index={index} parent={parent} key={key}>\n              <OpListItem\n                style={style}\n                selected={solid === props.selected}\n                onClick={() => props.onClickOp(solid.definition.name)}\n              >\n                <OpName>{solid.definition.name}</OpName>\n                <OpTypeSignature definition={solid.definition} />\n              </OpListItem>\n            </CellMeasurer>\n          );\n        }}\n        overscanRowCount={10}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  .solids-list:focus {\n    outline: none;\n  }\n`;\n\nconst OPS_ROOT_QUERY = gql`\n  query OpsRootQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolids {\n          __typename\n          definition {\n            name\n            ...OpTypeSignatureFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              isJob\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  ${OP_TYPE_SIGNATURE_FRAGMENT}\n`;\n\nconst OpListItem = styled.div<{selected: boolean}>`\n  background: ${({selected}) => (selected ? Colors.Gray100 : Colors.White)};\n  box-shadow: ${({selected}) => (selected ? Colors.HighlightGreen : 'transparent')} 4px 0 0 inset,\n    ${Colors.KeylineGray} 0 -1px 0 inset;\n  color: ${Colors.Gray800};\n  cursor: pointer;\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n  padding: 12px 24px;\n  user-select: none;\n\n  & > code.bp3-code {\n    color: ${Colors.Gray800};\n    background: transparent;\n    font-family: ${FontFamily.monospace};\n    padding: 5px 0 0 0;\n  }\n`;\n\nconst OpName = styled.div`\n  flex: 1;\n  font-weight: 600;\n`;\n\nconst OpListColumnContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n","import {Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {OpsRoot} from '../ops/OpsRoot';\n\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {RepoAddress} from './types';\n\nexport const WorkspaceOpsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader repoAddress={repoAddress} tab=\"ops\" />\n      <OpsRoot repoAddress={repoAddress} />\n    </Box>\n  );\n};\n","import {Alert, Box, NonIdealState, Page, PageHeader, Table, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, Redirect, useLocation, useParams, useRouteMatch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {LoadingSpinner} from '../ui/Loading';\n\nimport {isThisThingAJob, optionToRepoAddress, useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPathForHuman} from './buildRepoAddress';\nimport {findRepoContainingPipeline} from './findRepoContainingPipeline';\nimport {workspacePath, workspacePathFromAddress} from './workspacePath';\n\nexport const WorkspacePipelineRoot = () => {\n  useTrackPageView();\n\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const entireMatch = useRouteMatch(['/locations/pipelines/(/?.*)', '/locations/jobs/(/?.*)']);\n  const location = useLocation();\n\n  const toAppend = entireMatch!.params[0];\n  const {search} = location;\n\n  const {pipelineName} = explorerPathFromString(pipelinePath);\n  const {loading, options} = useRepositoryOptions();\n\n  if (loading) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  const reposWithMatch = findRepoContainingPipeline(options, pipelineName);\n  if (reposWithMatch.length === 0) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"no-results\"\n          title=\"No matching jobs\"\n          description={\n            <div>\n              <div>\n                <strong>{pipelineName}</strong>\n              </div>\n              was not found in any repositories in this workspace.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  if (reposWithMatch.length === 1) {\n    const match = reposWithMatch[0];\n    const repoAddress = optionToRepoAddress(match);\n    const isJob = isThisThingAJob(match, pipelineName);\n    const to = workspacePathFromAddress(\n      repoAddress,\n      `/${isJob ? 'jobs' : 'pipelines'}/${toAppend}${search}`,\n    );\n    return <Redirect to={to} />;\n  }\n\n  const anyPipelines = reposWithMatch.some((repo) => !isThisThingAJob(repo, pipelineName));\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        icon=\"job\"\n        description={\n          anyPipelines\n            ? 'Job / pipeline in multiple code locations'\n            : 'Job in multiple code locations'\n        }\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Alert\n          intent=\"info\"\n          title={\n            <div>\n              {anyPipelines ? (\n                <>\n                  Jobs or pipelines named <strong>{pipelineName}</strong> were found in multiple\n                  code locations.\n                </>\n              ) : (\n                <>\n                  Jobs named <strong>{pipelineName}</strong> were found in multiple code locations.\n                </>\n              )}\n            </div>\n          }\n        />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th>Code location</th>\n            <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {reposWithMatch.map((repository) => {\n            const {\n              repository: {name},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPathForHuman(name, location);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                <td>\n                  <Link\n                    to={workspacePath(\n                      name,\n                      location,\n                      `/${\n                        isThisThingAJob(repository, pipelineName) ? 'jobs' : 'pipelines'\n                      }/${pipelineName}`,\n                    )}\n                  >\n                    {pipelineName}\n                  </Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n","import {useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {InstigationType} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SCHEDULES_ROOT_QUERY} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {SchedulesNextTicks} from './SchedulesNextTicks';\nimport {SchedulesTable} from './SchedulesTable';\nimport {SchedulesRootQuery, SchedulesRootQueryVariables} from './types/SchedulesRootQuery';\n\nexport const SchedulesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n  useDocumentTitle('Schedules');\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SchedulesRootQuery, SchedulesRootQueryVariables>(\n    SCHEDULES_ROOT_QUERY,\n    {\n      variables: {\n        repositorySelector,\n        instigationType: InstigationType.SCHEDULE,\n      },\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, 50 * 1000);\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {(result) => {\n        const {repositoryOrError, unloadableInstigationStatesOrError, instance} = result;\n        let schedulesSection = null;\n        const repoName = repoAddressAsHumanString(repoAddress);\n\n        if (repositoryOrError.__typename === 'PythonError') {\n          schedulesSection = <PythonErrorInfo error={repositoryOrError} />;\n        } else if (repositoryOrError.__typename === 'RepositoryNotFoundError') {\n          schedulesSection = (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Definitions not found\"\n              description={`Could not load ${repoName}.`}\n            />\n          );\n        } else if (!repositoryOrError.schedules.length) {\n          schedulesSection = (\n            <NonIdealState\n              icon=\"schedule\"\n              title=\"No schedules found\"\n              description={\n                <p>\n                  {repoName} does not have any schedules defined. Visit the{' '}\n                  <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\">\n                    scheduler documentation\n                  </a>{' '}\n                  for more information about scheduling runs in Dagster.\n                </p>\n              }\n            />\n          );\n        } else {\n          schedulesSection = repositoryOrError.schedules.length > 0 && (\n            <>\n              <SchedulesTable schedules={repositoryOrError.schedules} repoAddress={repoAddress} />\n              <Box\n                padding={{vertical: 16, horizontal: 24}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray100}}\n              >\n                <Subheading>Scheduled ticks</Subheading>\n              </Box>\n              <SchedulesNextTicks repos={[repositoryOrError]} />\n            </>\n          );\n        }\n\n        return (\n          <>\n            <SchedulerInfo\n              daemonHealth={instance.daemonHealth}\n              padding={{horizontal: 24, vertical: 16}}\n            />\n            {schedulesSection}\n            {unloadableInstigationStatesOrError.__typename === 'PythonError' ? (\n              <PythonErrorInfo error={unloadableInstigationStatesOrError} />\n            ) : (\n              <UnloadableSchedules scheduleStates={unloadableInstigationStatesOrError.results} />\n            )}\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n","import {Box, Colors, Icon, Table, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {InstigatedRunStatus} from '../instigation/InstigationUtils';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {InstigationType} from '../types/globalTypes';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {humanizeSensorInterval} from './SensorDetails';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorFragment} from './types/SensorFragment';\n\nexport const SensorsTable: React.FC<{\n  repoAddress: RepoAddress;\n  sensors: SensorFragment[];\n}> = ({repoAddress, sensors}) => {\n  const lastTick = 'Status of the last tick: One of `Started`, `Skipped`, `Requested`, `Failed`';\n  const lastRun = 'The status of the last run requested by this sensor';\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '60px'}}></th>\n          <th>Sensor Name</th>\n          <th style={{width: '15%'}}>Frequency</th>\n          <th style={{width: '10%'}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Last tick\n              <Tooltip position=\"top\" content={lastTick}>\n                <Icon name=\"info\" color={Colors.Gray500} />\n              </Tooltip>\n            </Box>\n          </th>\n          <th style={{width: '25%'}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Last Run\n              <Tooltip position=\"top\" content={lastRun}>\n                <Icon name=\"info\" color={Colors.Gray500} />\n              </Tooltip>\n            </Box>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {sensors.map((sensor) => (\n          <SensorRow key={sensor.name} repoAddress={repoAddress} sensor={sensor} />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst SensorRow: React.FC<{\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}> = ({repoAddress, sensor}) => {\n  const repo = useRepository(repoAddress);\n  const {name, sensorState} = sensor;\n  const {ticks} = sensorState;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  return (\n    <tr key={name}>\n      <td>\n        <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n      </td>\n      <td>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <span style={{fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>{name}</Link>\n          </span>\n          {sensor.targets && sensor.targets.length ? (\n            <Box flex={{direction: 'column', gap: 2}}>\n              {sensor.targets.map((target) => (\n                <PipelineReference\n                  key={target.pipelineName}\n                  showIcon\n                  size=\"small\"\n                  pipelineName={target.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                />\n              ))}\n            </Box>\n          ) : null}\n          {sensor.metadata.assetKeys && sensor.metadata.assetKeys.length ? (\n            <Box flex={{direction: 'column', gap: 2}}>\n              {sensor.metadata.assetKeys.map((key) => (\n                <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n              ))}\n            </Box>\n          ) : null}\n        </Box>\n      </td>\n      <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n","import {useQuery, gql} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {InstigationType} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorsTable} from './SensorsTable';\nimport {SensorsRootQuery, SensorsRootQueryVariables} from './types/SensorsRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const SensorsRoot = (props: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Sensors');\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  const queryResult = useQuery<SensorsRootQuery, SensorsRootQueryVariables>(SENSORS_ROOT_QUERY, {\n    variables: {\n      repositorySelector,\n      instigationType: InstigationType.SENSOR,\n    },\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(queryResult, 50 * 1000);\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {(result) => {\n        const {sensorsOrError, unloadableInstigationStatesOrError, instance} = result;\n        const content = () => {\n          if (sensorsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={sensorsOrError} />;\n          } else if (unloadableInstigationStatesOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={unloadableInstigationStatesOrError} />;\n          } else if (sensorsOrError.__typename === 'RepositoryNotFoundError') {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"error\"\n                  title=\"Definitions not found\"\n                  description={`Could not load definitions for ${repoName}`}\n                />\n              </Box>\n            );\n          } else if (!sensorsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"sensors\"\n                  title=\"No sensors defined\"\n                  description={\n                    <p>\n                      {repoName} does not have any sensors defined. Visit the{' '}\n                      <a\n                        href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        sensors documentation\n                      </a>{' '}\n                      for more information about creating sensors in Dagster.\n                    </p>\n                  }\n                />\n              </Box>\n            );\n          } else {\n            return (\n              <>\n                {sensorsOrError.results.length > 0 && (\n                  <SensorInfo\n                    daemonHealth={instance.daemonHealth}\n                    padding={{horizontal: 24, vertical: 16}}\n                  />\n                )}\n                <SensorsTable repoAddress={repoAddress} sensors={sensorsOrError.results} />\n                <UnloadableSensors sensorStates={unloadableInstigationStatesOrError.results} />\n              </>\n            );\n          }\n        };\n\n        return <div>{content()}</div>;\n      }}\n    </Loading>\n  );\n};\n\nconst SENSORS_ROOT_QUERY = gql`\n  query SensorsRootQuery(\n    $repositorySelector: RepositorySelector!\n    $instigationType: InstigationType!\n  ) {\n    sensorsOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ...PythonErrorFragment\n      ... on Sensors {\n        results {\n          id\n          ...SensorFragment\n        }\n      }\n    }\n    unloadableInstigationStatesOrError(instigationType: $instigationType) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${SENSOR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {RepositoryLink} from '../nav/RepositoryLink';\n\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryAssetsListQuery,\n  RepositoryAssetsListQueryVariables,\n} from './types/RepositoryAssetsListQuery';\n\nconst REPOSITORY_ASSETS_LIST_QUERY = gql`\n  query RepositoryAssetsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          opNames\n          description\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryAssetsList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryAssetsListQuery,\n    RepositoryAssetsListQueryVariables\n  >(REPOSITORY_ASSETS_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const assetsForTable = React.useMemo(\n    () =>\n      (repo?.__typename === 'Repository' ? [...repo.assetNodes] : []).sort((a, b) =>\n        displayNameForAssetKey(a.assetKey).localeCompare(displayNameForAssetKey(b.assetKey)),\n      ),\n    [repo],\n  );\n\n  if (loading) {\n    return null;\n  }\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (error || !assetsForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load graphs\"\n          description={`Could not load graphs for ${repoName}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!assetsForTable.length) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No assets found\"\n          description={`No @asset definitions for ${repoName}`}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Asset Key</th>\n          <th>Defined In</th>\n        </tr>\n      </thead>\n      <tbody>\n        {assetsForTable.map((asset) => (\n          <tr key={asset.id}>\n            <td>\n              <Box flex={{direction: 'column', gap: 4}}>\n                <Link to={assetDetailsPathForKey(asset.assetKey)}>\n                  {displayNameForAssetKey(asset.assetKey)}\n                </Link>\n                <Description>{asset.description}</Description>\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'column'}}>\n                <RepositoryLink\n                  repoAddress={{\n                    name: asset.repository.name,\n                    location: asset.repository.location.name,\n                  }}\n                />\n              </Box>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryGraphsListQuery,\n  RepositoryGraphsListQueryVariables,\n} from './types/RepositoryGraphsListQuery';\nimport {workspacePath} from './workspacePath';\n\nconst REPOSITORY_GRAPHS_LIST_QUERY = gql`\n  query RepositoryGraphsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        usedSolids {\n          definition {\n            __typename\n            ... on CompositeSolidDefinition {\n              id\n              name\n              description\n            }\n          }\n          invocations {\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n        pipelines {\n          id\n          description\n          name\n          isJob\n          graphName\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\ninterface Item {\n  name: string;\n  description: string | null;\n  path: string;\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryGraphsList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryGraphsListQuery,\n    RepositoryGraphsListQueryVariables\n  >(REPOSITORY_GRAPHS_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const graphsForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    const jobGraphNames = new Set<string>(\n      repo.pipelines\n        .filter((p) => p.isJob && !isHiddenAssetGroupJob(p.name))\n        .map((p) => p.graphName),\n    );\n    const items: Item[] = Array.from(jobGraphNames).map((graphName) => ({\n      name: graphName,\n      path: `/graphs/${graphName}`,\n      description: null,\n      repoAddress,\n    }));\n\n    repo.usedSolids.forEach((s) => {\n      if (s.definition.__typename === 'CompositeSolidDefinition') {\n        items.push({\n          name: s.definition.name,\n          path: `/graphs/${s.invocations[0].pipeline.name}/${s.invocations[0].solidHandle.handleID}/`,\n          description: s.definition.description,\n          repoAddress,\n        });\n      }\n    });\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (error || !graphsForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load graphs\"\n          description={`Could not load graphs for ${repoName}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!graphsForTable.length) {\n    return (\n      <Box padding={64}>\n        <NonIdealState\n          icon=\"schema\"\n          title=\"No graphs found\"\n          description={`${repoName} does not have any graphs defined.`}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Graph</th>\n        </tr>\n      </thead>\n      <tbody>\n        {graphsForTable.map(({name, description, path, repoAddress}) => (\n          <tr key={`${name}-${repoAddressAsHumanString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <Link to={workspacePath(repoAddress.name, repoAddress.location, path)}>{name}</Link>\n                <Description>{description}</Description>\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Table, Caption} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineReference} from './PipelineReference';\nimport {PipelineTableFragment} from './types/PipelineTableFragment';\n\ntype PipelineForTable = {\n  pipelineOrJob: PipelineTableFragment;\n  repoAddress: RepoAddress;\n};\n\ninterface Props {\n  pipelinesOrJobs: PipelineForTable[];\n  showRepo: boolean;\n}\n\nexport const PipelineTable: React.FC<Props> = (props) => {\n  const {pipelinesOrJobs, showRepo} = props;\n\n  const anyPipelines = pipelinesOrJobs.some(({pipelineOrJob}) => !pipelineOrJob.isJob);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '50%', minWidth: '400px'}}>\n            {anyPipelines ? 'Job or Pipeline' : 'Job'}\n          </th>\n          <th>Schedules</th>\n          <th>Sensors</th>\n          <th style={{whiteSpace: 'nowrap'}}>Recent runs</th>\n        </tr>\n      </thead>\n      <tbody>\n        {pipelinesOrJobs.map(({pipelineOrJob, repoAddress}) => (\n          <tr key={`${pipelineOrJob.name}-${repoAddressAsHumanString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <PipelineReference\n                  isJob={pipelineOrJob.isJob}\n                  pipelineName={pipelineOrJob.name}\n                  pipelineHrefContext={repoAddress}\n                  truncationThreshold={80}\n                />\n                {showRepo ? <Caption>{repoAddressAsHumanString(repoAddress)}</Caption> : null}\n                <Description>{pipelineOrJob.description}</Description>\n              </Group>\n            </td>\n            <td>\n              {pipelineOrJob.schedules?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipelineOrJob.schedules.map((schedule) => (\n                    <Link\n                      key={schedule.name}\n                      to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n                    >\n                      {schedule.name}\n                    </Link>\n                  ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.Gray200}}>None</div>\n              )}\n            </td>\n            <td>\n              {pipelineOrJob.sensors?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipelineOrJob.sensors.map((sensor) => (\n                    <Link\n                      key={sensor.name}\n                      to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n                    >\n                      {sensor.name}\n                    </Link>\n                  ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.Gray200}}>None</div>\n              )}\n            </td>\n            <td>\n              <Group direction=\"row\" spacing={4} alignItems=\"center\">\n                {pipelineOrJob.runs.map((run) => (\n                  <RunStatusWithStats\n                    key={run.id}\n                    runId={run.runId}\n                    status={run.status}\n                    size={12}\n                  />\n                ))}\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n\nexport const PIPELINE_TABLE_FRAGMENT = gql`\n  fragment PipelineTableFragment on Pipeline {\n    id\n    description\n    isJob\n    name\n    modes {\n      id\n      name\n    }\n    runs(limit: 5) {\n      id\n      mode\n      runId\n      status\n    }\n    schedules {\n      id\n      name\n      mode\n    }\n    sensors {\n      id\n      name\n      targets {\n        mode\n        pipelineName\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {PipelineTable, PIPELINE_TABLE_FRAGMENT} from '../pipelines/PipelineTable';\n\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryPipelinesListQuery,\n  RepositoryPipelinesListQueryVariables,\n} from './types/RepositoryPipelinesListQuery';\n\nconst REPOSITORY_PIPELINES_LIST_QUERY = gql`\n  query RepositoryPipelinesListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        pipelines {\n          id\n          ...PipelineTableFragment\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n  ${PIPELINE_TABLE_FRAGMENT}\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n  display: 'jobs' | 'pipelines';\n}\n\nexport const RepositoryPipelinesList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {display, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryPipelinesListQuery,\n    RepositoryPipelinesListQueryVariables\n  >(REPOSITORY_PIPELINES_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const pipelinesForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    return repo.pipelines\n      .filter((pipelineOrJob) => !isHiddenAssetGroupJob(pipelineOrJob.name))\n      .map((pipelineOrJob) => ({\n        pipelineOrJob,\n        repoAddress,\n      }))\n      .filter(({pipelineOrJob}) =>\n        display === 'jobs' ? pipelineOrJob.isJob : !pipelineOrJob.isJob,\n      );\n  }, [display, repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (error || !pipelinesForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load pipelines\"\n          description={`Could not load pipelines for ${repoName}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!pipelinesForTable.length) {\n    return (\n      <Box padding={64}>\n        <NonIdealState\n          icon=\"job\"\n          title={display === 'jobs' ? 'No jobs found' : 'No pipelines found'}\n          description={\n            <div>\n              {display === 'jobs'\n                ? `${repoName} does not have any jobs defined.`\n                : `${repoName} does not have any pipelines defined.`}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return <PipelineTable pipelinesOrJobs={pipelinesForTable} showRepo={false} />;\n};\n","import {Box, PageHeader, Tabs, Tag, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, Route, Switch, useParams} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {OpsRoot} from '../ops/OpsRoot';\nimport {SchedulesRoot} from '../schedules/SchedulesRoot';\nimport {SensorsRoot} from '../sensors/SensorsRoot';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepositoryAssetsList} from './RepositoryAssetsList';\nimport {RepositoryGraphsList} from './RepositoryGraphsList';\nimport {RepositoryPipelinesList} from './RepositoryPipelinesList';\nimport {useRepository} from './WorkspaceContext';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const WorkspaceRepoRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const {tab} = useParams<{tab?: string}>();\n\n  const path = repoAddressAsHumanString(repoAddress);\n  const repo = useRepository(repoAddress);\n\n  const anyPipelines = React.useMemo(() => {\n    return repo?.repository.pipelines.some((pipelineOrJob) => !pipelineOrJob.isJob);\n  }, [repo]);\n\n  const tabs = React.useMemo(() => {\n    const tabList = [\n      {\n        text: 'Assets',\n        href: workspacePathFromAddress(repoAddress, '/assets'),\n      },\n      {text: 'Jobs', href: workspacePathFromAddress(repoAddress, '/jobs')},\n      anyPipelines\n        ? {text: 'Pipelines', href: workspacePathFromAddress(repoAddress, '/pipelines')}\n        : null,\n      {text: 'Graphs', href: workspacePathFromAddress(repoAddress, '/graphs')},\n      {\n        text: 'Ops',\n        href: workspacePathFromAddress(repoAddress, '/ops'),\n      },\n      {text: 'Schedules', href: workspacePathFromAddress(repoAddress, '/schedules')},\n      {text: 'Sensors', href: workspacePathFromAddress(repoAddress, '/sensors')},\n    ];\n\n    return tabList.filter(Boolean) as {text: string; href: string}[];\n  }, [anyPipelines, repoAddress]);\n\n  const activeTab = () => {\n    switch (tab) {\n      case 'schedules':\n        return 'Schedules';\n      case 'sensors':\n        return 'Sensors';\n      case 'solids':\n        return 'Solids';\n      case 'ops':\n        return 'Ops';\n      case 'graphs':\n        return 'Graphs';\n      case 'jobs':\n        return 'Jobs';\n      case 'pipelines':\n        return 'Pipelines';\n      case 'assets':\n        return 'Assets';\n      default:\n        return 'Jobs';\n    }\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%'}}>\n      <PageHeader\n        title={<Heading>{path}</Heading>}\n        tags={<Tag icon=\"folder\">Repository</Tag>}\n        tabs={\n          <Tabs size=\"small\" selectedTabId={activeTab()}>\n            {tabs.map(({href, text}) => (\n              <TabLink key={text} id={text} title={text} to={href} />\n            ))}\n          </Tabs>\n        }\n      />\n      <Container>\n        <Switch>\n          <Route path=\"/locations/:repoPath/schedules\">\n            <SchedulesRoot repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/sensors\">\n            <SensorsRoot repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/assets(/?.*)\">\n            <RepositoryAssetsList repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/ops/:name?\">\n            <OpsRoot repoAddress={repoAddress} />\n          </Route>\n          <Route\n            path=\"/locations/:repoPath/solids/:name?\"\n            render={(props) => <Redirect to={props.match.url.replace(/\\/solids\\/?/, '/ops/')} />}\n          />\n          <Route path=\"/locations/:repoPath/pipelines\">\n            <RepositoryPipelinesList display=\"pipelines\" repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/jobs\">\n            <RepositoryPipelinesList display=\"jobs\" repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/graphs\" exact>\n            <RepositoryGraphsList repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/(.*)?\" render={() => <Redirect to={tabs[0].href} />} />\n        </Switch>\n      </Container>\n    </Box>\n  );\n};\n\nconst Container = styled.div`\n  flex: 1;\n  flex-grow: 1;\n  min-height: 0;\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedScheduleHeader, VirtualizedScheduleRow} from './VirtualizedScheduleRow';\nimport {RepoAddress} from './types';\n\ntype Schedule = {name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  schedules: Schedule[];\n}\n\nexport const VirtualizedScheduleTable: React.FC<Props> = ({repoAddress, schedules}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: schedules.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Schedule = schedules[index];\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\n\nimport {VirtualizedScheduleTable} from './VirtualizedScheduleTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceSchedulesQuery,\n  WorkspaceSchedulesQueryVariables,\n} from './types/WorkspaceSchedulesQuery';\n\nexport const WorkspaceSchedulesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceSchedulesQuery, WorkspaceSchedulesQueryVariables>(\n    WORKSPACE_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const schedules = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.schedules;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [schedules, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const repoName = repoAddressAsHumanString(repoAddress);\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                <div>\n                  No schedules matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={`No schedules were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedScheduleTable repoAddress={repoAddress} schedules={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"schedules\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by schedule name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_SCHEDULES_QUERY = gql`\n  query WorkspaceSchedulesQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        schedules {\n          id\n          name\n          description\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from './VirtualizedSensorRow';\nimport {RepoAddress} from './types';\ntype Sensor = {name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensors: Sensor[];\n}\n\nexport const VirtualizedSensorTable: React.FC<Props> = ({repoAddress, sensors}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: sensors.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Sensor = sensors[index];\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\n\nimport {VirtualizedSensorTable} from './VirtualizedSensorTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {WorkspaceSensorsQuery, WorkspaceSensorsQueryVariables} from './types/WorkspaceSensorsQuery';\n\nexport const WorkspaceSensorsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceSensorsQuery, WorkspaceSensorsQueryVariables>(\n    WORKSPACE_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const sensors = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.sensors;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [sensors, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const repoName = repoAddressAsHumanString(repoAddress);\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                <div>\n                  No sensors matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={`No sensors were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedSensorTable repoAddress={repoAddress} sensors={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"sensors\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by sensor name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_SENSORS_QUERY = gql`\n  query WorkspaceSensorsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        sensors {\n          id\n          name\n          description\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, MainContent, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Route, Switch, useParams} from 'react-router-dom';\n\nimport {AssetGroupRoot} from '../assets/AssetGroupRoot';\nimport {PipelineRoot} from '../pipelines/PipelineRoot';\nimport {ScheduleRoot} from '../schedules/ScheduleRoot';\nimport {SensorRoot} from '../sensors/SensorRoot';\n\nimport {GraphRoot} from './GraphRoot';\nimport {WorkspaceAssetsRoot} from './WorkspaceAssetsRoot';\nimport {WorkspaceContext} from './WorkspaceContext';\nimport {WorkspaceGraphsRoot} from './WorkspaceGraphsRoot';\nimport {WorkspaceJobsRoot} from './WorkspaceJobsRoot';\nimport {WorkspaceOpsRoot} from './WorkspaceOpsRoot';\nimport {WorkspacePipelineRoot} from './WorkspacePipelineRoot';\nimport {WorkspaceRepoRoot} from './WorkspaceRepoRoot';\nimport {WorkspaceSchedulesRoot} from './WorkspaceSchedulesRoot';\nimport {WorkspaceSensorsRoot} from './WorkspaceSensorsRoot';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressFromPath} from './repoAddressFromPath';\n\nconst RepoRouteContainer = () => {\n  const {repoPath} = useParams<{repoPath: string}>();\n  const workspaceState = React.useContext(WorkspaceContext);\n  const addressForPath = repoAddressFromPath(repoPath);\n\n  // A RepoAddress could not be created for this path, which means it's invalid.\n  if (!addressForPath) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Invalid code location path\"\n          description={\n            <div>\n              <div>\n                <strong>{repoPath}</strong>\n              </div>\n              {'  is not a valid code location path.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  const {loading} = workspaceState;\n\n  if (loading) {\n    return <div />;\n  }\n\n  const matchingRepo = workspaceState.allRepos.find(\n    (repo) =>\n      repo.repository.name === addressForPath.name &&\n      repo.repositoryLocation.name === addressForPath.location,\n  );\n\n  // If we don't have any active code locations, or if our active repo does not match\n  // the repo path in the URL, it means we aren't able to load this repo.\n  if (!matchingRepo) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unknown code location\"\n          description={\n            <div>\n              <div>\n                <strong>{repoAddressAsHumanString(addressForPath)}</strong>\n              </div>\n              {'  is not loaded in the current workspace.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/locations/:repoPath/assets\" exact>\n        <WorkspaceAssetsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/jobs\" exact>\n        <WorkspaceJobsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/schedules\" exact>\n        <WorkspaceSchedulesRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/sensors\" exact>\n        <WorkspaceSensorsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/graphs\" exact>\n        <WorkspaceGraphsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/ops/:name?\" exact>\n        <WorkspaceOpsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/graphs/(/?.*)\">\n        <GraphRoot repoAddress={addressForPath} />\n      </Route>\n      <Route\n        path={[\n          '/locations/:repoPath/pipelines/(/?.*)',\n          '/locations/:repoPath/jobs/(/?.*)',\n          '/locations/:repoPath/pipeline_or_job/(/?.*)',\n        ]}\n      >\n        <PipelineRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/schedules/:scheduleName/:runTab?\">\n        <ScheduleRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/sensors/:sensorName\">\n        <SensorRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path={['/locations/:repoPath/asset-groups/:groupName/list(/?.*)']}>\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"list\" />\n      </Route>\n      <Route\n        path={[\n          '/locations/:repoPath/asset-groups/:groupName/(/?.*)',\n          '/locations/:repoPath/asset-groups/:groupName',\n        ]}\n      >\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"lineage\" />\n      </Route>\n      <Route path=\"/locations/:repoPath/:tab?\">\n        <WorkspaceRepoRoot repoAddress={addressForPath} />\n      </Route>\n    </Switch>\n  );\n};\n\nexport const WorkspaceRoot = () => {\n  return (\n    <MainContent>\n      <Switch>\n        <Route path={['/locations/pipelines/:pipelinePath', '/locations/jobs/:pipelinePath']}>\n          <WorkspacePipelineRoot />\n        </Route>\n        <Route path=\"/locations/:repoPath\">\n          <RepoRouteContainer />\n        </Route>\n      </Switch>\n    </MainContent>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default WorkspaceRoot;\n"],"names":["PipelineExplorerSnapshotRoot","useTrackPageView","params","useParams","explorerPath","explorerPathFromString","pipelineName","snapshotId","history","useHistory","useDocumentTitle","slice","PipelineExplorerContainer","onChangeExplorerPath","path","mode","explorerPathToString","onNavigateToSourceAssetNode","assetKey","push","assetDetailsPathForKey","repoAddress","isGraph","React","explodeComposites","preferAssetRendering","options","setOptions","parentNames","opNames","length","pipelineSelector","buildPipelineSelector","pipelineResult","useQuery","PIPELINE_EXPLORER_ROOT_QUERY","variables","snapshotPipelineSelector","undefined","rootHandleID","join","requestScopeHandleID","queryResult","result","pipelineSnapshotOrError","__typename","parentHandle","solidHandle","displayedHandles","explodeCompositesInHandleGraph","solidHandles","assetNodesPresent","some","h","solid","definition","assetNodes","fetchOptions","container","handles","getInvocations","definitionName","filter","s","name","map","handleID","gql","METADATA_ENTRY_FRAGMENT","GRAPH_EXPLORER_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","GRAPH_EXPLORER_ASSET_NODE_FRAGMENT","PYTHON_ERROR_FRAGMENT","ENABLED_FILTERS","PipelineRunsRoot","props","pipelinePath","repo","useRepository","isJob","isThisThingAJob","useJobTitle","useQueryPersistedRunFilters","filterTokens","setFilterTokens","permanentTokens","token","value","Boolean","allTokens","repoToken","DagsterTag","repoAddressAsTag","useCursorPaginatedQuery","query","PIPELINE_RUNS_ROOT_QUERY","pageSize","runsFilterForSearchTokens","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","runId","getResultArray","data","paginationProps","onAddTag","tokenAsString","tokenToString","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","refetch","allowStaleData","padding","vertical","icon","title","description","message","displayed","hasNextCursor","hasPrevCursor","flex","alignItems","justifyContent","top","horizontal","direction","gap","$top","actionBarComponents","enabledFilters","tokens","onChange","loading","style","marginTop","RUN_TABLE_RUN_FRAGMENT","SCHEDULE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","REPOSITORY_SCHEDULES_FRAGMENT","REPOSITORY_INFO_FRAGMENT","SCHEDULES_ROOT_QUERY","INSTANCE_HEALTH_FRAGMENT","SchedulesNextTicks","repos","nextTicks","anyPipelines","anySchedules","useRepositoryOptions","forEach","schedules","location","futureTickSchedules","schedule","futureTicks","scheduleState","status","InstigationStatus","minMaxTimestamp","Math","min","timestamp","tick","sort","a","b","width","findRepositoryAmongOptions","timezone","executionTimezone","timeFormat","showSeconds","showTimezone","to","workspacePathFromAddress","pipelineHrefContext","NextTickMenu","tickTimestamp","id","action","href","scheduleSelector","repoAddressToSelector","scheduleName","isOpen","setOpen","useLazyQuery","SCHEDULE_TICK_CONFIG_QUERY","loadTickConfig","called","infoReady","evaluationResult","scheduleOrError","futureTick","menuItems","NextTickMenuItems","onItemOpen","purpose","content","position","onOpening","NextTickDialog","text","skipReason","onClick","error","runRequests","runRequest","runConfigYaml","target","qs","config","solidSelection","selectedRunRequest","setSelectedRunRequest","copy","useCopyToClipboard","body","close","tags","border","side","color","Colors","left","bottom","lineNumbers","SkipWrapper","RunRequestBody","idx","runKey","underline","spacing","onClose","topBorder","autoFocus","SharedToaster","intent","styled","AssetGroupRoot","tab","groupName","groupPath","groupSelector","repositoryLocationName","repositoryName","node","replace","encodeURIComponent","view","Page","display","flexDirection","paddingBottom","PageHeader","right","marginBottom","ReloadAllButton","label","Tag","RepositoryLink","tabs","margin","Tabs","selectedTabId","TabLink","AssetGraphExplorer","AssetsCatalogTable","prefixPath","split","decodeURIComponent","setPrefixPath","LaunchpadSetupFromRunRoot","canLaunchPipelineExecution","usePermissions","repoPath","enabled","LaunchpadSetupFromRunAllowedRoot","useExecutionSessionStorage","storageData","onSave","CONFIG_FOR_RUN_QUERY","runOrError","run","newSession","Array","applyCreateSession","LaunchpadSessionLoading","LaunchpadSessionError","pathname","LaunchpadSetupRoot","LaunchpadSetupAllowedRoot","queryString","window","search","ignoreQueryPrefix","solidSelectionQuery","TIME_FORMAT","LatestRunTag","lastRunQuery","LATEST_RUN_TAG_QUERY","runsFilter","key","notifyOnNetworkStatusChange","runsOrError","stats","start","startTime","end","endTime","RunStatus","size","Tooltip","placement","TimestampDisplay","timingStringForStatus","RUN_TIME_FRAGMENT","JobMetadata","metadata","JOB_METADATA_QUERY","job","pipelineOrError","runsForAssetScan","useJobNavMetadata","JobScheduleOrSensorTag","RelatedAssetsTag","relatedAssets","getRelatedAssets","matchingSchedules","matchingSensors","sensors","ScheduleOrSensorTag","tokenForAssetKey","uniq","flatMap","r","assets","open","ButtonLink","Dialog","canOutsideClickClose","canEscapeKeyClose","maxWidth","minWidth","Table","wordBreak","Button","RUN_METADATA_FRAGMENT","JOB_METADATA_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","pipelineTabs","overview","pathComponent","playground","getPermissionsResult","permissions","partitions","currentOrder","PipelineNav","match","useRouteMatch","active","component","tabList","Object","keys","find","t","tabForPipelinePathComponent","selector","repoJobEntry","repository","pipelines","pipelineOrJob","isAssetJob","partitionSets","hasLaunchpad","hasPartitionSet","partitionSet","explorerPathForTab","tabForKey","wrap","permissionsResult","disabled","disabledReason","JobBackfillsTable","partitionSetName","partitionNames","repositorySelector","refetchCounter","cursorStack","setCursorStack","cursor","setCursor","JOB_BACKFILLS_QUERY","limit","partialRefetch","Loading","partitionSetOrError","backfills","popCursor","nextStack","pop","advanceCursor","current","nextCursor","backfillId","reset","BackfillTable","showBackfillTarget","allPartitions","BACKFILL_TABLE_FRAGMENT","DEFAULT_RUN_LAUNCHER_NAME","BackfillPartitionSelector","onLaunch","onCancel","onSubmit","partitionData","k","PartitionState","range","_setRange","stateFilters","setStateFilters","selected","includes","tagEditorOpen","setTagEditorOpen","setTags","setQuery","reexecute","fromFailure","BACKFILL_SELECTOR_QUERY","fetchPolicy","mounted","Spinner","pipelineSnapshot","instance","solids","solidsFiltered","filterByQuery","stepRows","buildLayout","nodes","all","GanttChartMode","boxes","box","x","usingDefaultRunLauncher","runLauncher","isFailed","failedPartitions","Section","PartitionRangeWizard","setSelected","selection","selectionSet","Set","has","partitionStateForKey","partitionKeys","PartitionStateCheckboxes","partitionKeysForCounts","partitionKey","state","allowed","Checkbox","checked","every","next","Icon","GraphQueryInput","items","placeholder","autoApplyChanges","TagEditor","tagsFromSession","onRequestClose","borderRadius","onRequestEdit","daemonHealth","daemonStatus","healthy","DaemonNotRunningAlert","runQueuingSupported","UsingDefaultLauncherAlert","LaunchBackfillButton","reexecutionSteps","step","onSuccess","showBackfillSuccessToast","onError","messageForLaunchBackfillError","showBackfillErrorToast","useMutation","LAUNCH_PARTITION_BACKFILL_MUTATION","launchBackfill","backfillParams","launchPartitionBackfill","count","reexecutionCount","buttonTitle","LaunchButton","runCount","errors","PythonErrorInfo","invalidStepKey","invalidOutputName","stepKey","showCustomAlert","Alert","rel","children","PartitionGraph","jobDataByPartition","stepDataByPartition","yLabel","hiddenStepKeys","hiddenPartitions","setHiddenPartitions","chart","onGraphClick","event","xAxis","scales","offsetX","offsetY","type","chartArea","shiftKey","labelIndex","getValueForPixel","partitionName","labels","defaultOptions","animation","y","plugins","legend","_e","_legendItem","maintainAspectRatio","jobData","stepData","hidden","stepDataByKey","_fillPartitions","buildDatasetData","allLabel","graphData","datasets","borderColor","backgroundColor","colorHash","PartitionGraphContainer","height","ref","points","pointData","point","OpJobPartitionsView","PARTITIONS_STATUS_QUERY","partitionsOrError","OpJobPartitionsViewContent","usePartitionDurations","stepDurationData","runDurationData","p","runsLoaded","sortedRuns","lastRun","stepStats","canLaunchPartitionBackfill","useViewport","viewport","containerProps","setPageSize","offset","setOffset","showSteps","setShowSteps","showBackfillSetup","setShowBackfillSetup","blockDialog","setBlockDialog","backfillRefetchCounter","setBackfillRefetchCounter","usePartitionStepQuery","partitionTagName","jobName","skipQuery","approxPageSize","getVisibleItemCount","GRID_FLOATING_CONTAINER_WIDTH","selectedPartitions","max","statusData","partitionStatusesOrError","runStatusToPartitionState","runStatus","runDuration","zIndex","_backfillId","_stepQuery","CountBox","PartitionStatus","selectionWindowSize","maxIdx","selectedIdx","indexOf","nextOffset","tooltipMessage","fontSize","AssetJobPartitionsView","assetGraph","useAssetGraphData","assetHealth","usePartitionHealthData","graphAssetKeys","merged","mergedAssetHealth","dimensions","ranges","d","dimension","allKeys","explodePartitionKeysInRanges","stateForKey","total","missing","showAssets","setShowAssets","dimensionIdx","findIndex","isTimeseriesDimension","dimensionKeys","selectedDimensionKeys","LaunchAssetExecutionButton","scope","graphQueryItems","g","skipAllTerm","preferredJobName","splitPartitions","stateForSingleDimension","rangeDimensionIdx","rangeDimension","assetQueryItems","AssetJobPartitionGraphs","multidimensional","dimensionName","PipelinePartitionsRoot","pipelineInfo","useStripSnapshotFromPath","usePartitionNameForPipeline","partitionSetError","PipelineOrJobDisambiguationRoot","useLocation","pipelineOrJobName","replacedPath","PipelineOverviewRoot","opsQuery","PipelineRoot","render","url","TickLogDialog","instigationSelector","TICK_LOG_EVENTS_QUERY","events","instigationStateOrError","logEvents","TickLogsTable","overflow","borderBottom","onWidthsChanged","Headers","TickLogRow","widths","ColumnWidthsContext","eventType","onResize","handleSide","level","highlighted","marginLeft","time","COLOR_MAP","InstigationTickStatus","LiveTickTimeline","ticks","nextTick","onHoverTick","onSelectTick","Date","now","setNow","graphNow","setGraphNow","isPaused","setPaused","interval","setInterval","clearInterval","nextTickRadius","sin","PI","tickData","tickColors","tickRadii","fill","borderWidth","pointBorderWidth","pointBorderColor","pointRadius","pointHoverRadius","pointBackgroundColor","pointHoverBorderWidth","pointHoverBorderColor","duration","grid","bounds","minUnit","tooltip","displayColors","callbacks","tooltipItem","datasetIndex","dataIndex","cursorLabel","runIds","originRunIds","_event","activeElements","item","index","onHover","elements","HTMLElement","element","TickDetailsDialog","JOB_SELECTED_TICK_QUERY","skip","e","copyValue","TICK_TAG_FRAGMENT","Chart","zoomPlugin","DEFAULT_SHOWN_STATUS_STATE","STATUS_TEXT_MAP","TicksTable","useQueryPersistedState","encode","states","queryState","toLowerCase","String","decode","shownStates","setShownStates","copyToClipboard","flagSensorScheduleLogging","useFeatureFlags","statuses","JOB_TICK_HISTORY_QUERY","logTick","setLogTick","instigationType","StatusFilter","InstigationType","fontFamily","FontFamily","marginRight","str","TRUNCATION_THRESHOLD","CopyButton","logKey","TickHistoryTimeline","onHighlightRunIds","Number","selectedTime","setSelectedTime","pollingPaused","pausePolling","ONE_MONTH","onTickClick","RUN_STATUS_FRAGMENT","IconWrapper","ScheduleDetails","cronSchedule","copyText","setCopyText","setTimeout","clearTimeout","latestTick","running","ScheduleSwitch","link","hover","QueryRefresh","MetadataTable","PipelineReference","SchedulePartitionStatus","humanCronString","ScheduleRoot","selectedTab","setSelectedTab","SCHEDULE_ROOT_QUERY","showDaemonWarning","SchedulerInfo","SchedulePreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SCHEDULE_QUERY","RunTable","SENSOR_FRAGMENT","SensorPreviousRuns","sensor","PREVIOUS_RUNS_FOR_SENSOR_QUERY","targets","SensorRoot","sensorName","sensorSelector","SENSOR_ROOT_QUERY","sensorOrError","SensorDetails","SensorInfo","GraphRoot","minHeight","GraphExplorerRoot","graphResult","GRAPH_EXPLORER_ROOT_QUERY","graphSelector","graphName","graphOrError","GraphExplorer","fullPath","UNGROUPED_NAME","VirtualizedAssetTable","parentRef","repoKey","repoAddressAsHumanString","useAssetGroupExpansionState","expandedKeys","onToggle","grouped","groups","asset","assetsForGroup","flattened","flat","assetCount","rowVirtualizer","useVirtualizer","getScrollElement","estimateSize","ii","row","overscan","totalHeight","getTotalSize","getVirtualItems","gridTemplateColumns","$totalHeight","GroupNameRow","expanded","AssetRow","SINGLE_ASSET_QUERY","input","queryAsset","useDelayedRowQuery","assetOrError","liveData","assetsLatestInfo","latestInfoForAsset","buildLiveDataForNode","linkUrl","$height","$start","RowGrid","fontWeight","AssetLink","isGroup","textStyle","textOverflow","whiteSpace","lastMaterialization","StaleTag","includeFreshness","includeRunStatus","AssetActionMenu","ClickableRow","$open","tabIndex","onKeyDown","code","preventDefault","background","Row","Box","ASSET_TABLE_FRAGMENT","ASSET_NODE_LIVE_FRAGMENT","ASSET_LATEST_INFO_FRAGMENT","validateExpandedKeys","parsed","isArray","storageKey","basePath","AppContext","useStateWithStorage","setExpandedKeys","nextExpandedKeys","delete","add","from","WorkspaceTabs","WorkspaceHeader","queryData","ReloadRepositoryLocationButton","tryReload","reloading","WorkspaceAssetsRoot","searchValue","setSearchValue","queryResultOverview","WORKSPACE_ASSETS_QUERY","anySearch","trim","toLocaleLowerCase","repositoryOrError","filteredBySearch","useAssetNodeSearch","TextInput","paddingTop","repoName","VirtualizedGraphTable","graphs","GraphRow","SINGLE_GRAPH_QUERY","queryGraph","displayedDescription","WorkspaceGraphsRoot","WROSKPACE_GRAPHS_QUERY","sanitizedSearch","jobGraphNames","isHiddenAssetGroupJob","usedSolids","invocations","pipeline","localeCompare","searchToLower","VirtualizedJobTable","jobs","VirtualizedJobRow","WorkspaceJobsRoot","WORKSPACE_JOBS_QUERY","OpCard","inputDefinitions","outputDefinitions","layout","layoutOp","inputs","dependsOn","outputs","dependedBy","OpCardContainer","OpNode","invocation","minified","onDoubleClick","onEnterComposite","onHighlightEdges","focused","highlightedEdges","dim","OP_CARD_SOLID_DEFINITION_FRAGMENT","OP_NODE_DEFINITION_FRAGMENT","UsedSolidDetails","onClickInvocation","USED_SOLID_DETAILS_QUERY","usedSolid","SidebarOpDefinition","showingSubgraph","i","SIDEBAR_OP_DEFINITION_FRAGMENT","OpDetailScrollContainer","flatUniq","arrs","arr","OpsRoot","OPS_ROOT_QUERY","OpsRootWithData","q","typeExplorer","suggestions","values","displayName","tokenizedValuesFromString","filtered","startsWith","filterSolidsWithSearch","onSearch","stringFromValue","onClickOp","defName","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","OpListColumnContainer","TokenizingField","suggestionProviders","nonce","__webpack_nonce__","OpList","second","cache","CellMeasurerCache","defaultHeight","fixedWidth","lastWidth","clearAll","selectedIndex","Container","rowCount","rowHeight","scrollToIndex","className","rowRenderer","parent","OpListItem","OpName","OpTypeSignature","overscanRowCount","OP_TYPE_SIGNATURE_FRAGMENT","WorkspaceOpsRoot","WorkspacePipelineRoot","entireMatch","toAppend","reposWithMatch","findRepoContainingPipeline","optionToRepoAddress","repositoryLocation","repoString","buildRepoPathForHuman","workspacePath","SchedulesRoot","unloadableInstigationStatesOrError","schedulesSection","SchedulesTable","Unloadable","scheduleStates","SensorsTable","SensorRow","sensorState","SensorSwitch","showIcon","assetKeys","humanizeSensorInterval","minIntervalSeconds","instigationState","SensorsRoot","SENSORS_ROOT_QUERY","sensorsOrError","sensorStates","REPOSITORY_ASSETS_LIST_QUERY","RepositoryAssetsList","assetsForTable","displayNameForAssetKey","Description","REPOSITORY_GRAPHS_LIST_QUERY","RepositoryGraphsList","graphsForTable","PipelineTable","pipelinesOrJobs","showRepo","truncationThreshold","PIPELINE_TABLE_FRAGMENT","REPOSITORY_PIPELINES_LIST_QUERY","RepositoryPipelinesList","pipelinesForTable","WorkspaceRepoRoot","activeTab","exact","VirtualizedScheduleTable","VirtualizedScheduleRow","WorkspaceSchedulesRoot","WORKSPACE_SCHEDULES_QUERY","VirtualizedSensorTable","VirtualizedSensorRow","WorkspaceSensorsRoot","WORKSPACE_SENSORS_QUERY","RepoRouteContainer","workspaceState","WorkspaceContext","addressForPath","repoAddressFromPath","allRepos","WorkspaceRoot","MainContent","M"],"sourceRoot":""}